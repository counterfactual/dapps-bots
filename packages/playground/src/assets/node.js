(function (exports, utils, EventEmitter, ethers, constants, hdnode, log, uuid, cf_js, errors, providers) {
    'use strict';

    EventEmitter = EventEmitter && EventEmitter.hasOwnProperty('default') ? EventEmitter['default'] : EventEmitter;
    log = log && log.hasOwnProperty('default') ? log['default'] : log;
    uuid = uuid && uuid.hasOwnProperty('default') ? uuid['default'] : uuid;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
    }

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var memoizeDecorator = createCommonjsModule(function (module, exports) {
    (function (factory) {
        {
            var v = factory(commonjsRequire, exports);
            if (v !== undefined) module.exports = v;
        }
    })(function (require, exports) {
        Object.defineProperty(exports, "__esModule", { value: true });
        function Memoize(hashFunction) {
            return function (target, propertyKey, descriptor) {
                if (descriptor.value != null) {
                    descriptor.value = getNewFunction(descriptor.value, hashFunction);
                }
                else if (descriptor.get != null) {
                    descriptor.get = getNewFunction(descriptor.get, hashFunction);
                }
                else {
                    throw 'Only put a Memoize() decorator on a method or get accessor.';
                }
            };
        }
        exports.Memoize = Memoize;
        var counter = 0;
        function getNewFunction(originalMethod, hashFunction) {
            var identifier = ++counter;
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var propValName = "__memoized_value_" + identifier;
                var propMapName = "__memoized_map_" + identifier;
                var returnedValue;
                if (hashFunction || args.length > 0) {
                    if (!this.hasOwnProperty(propMapName)) {
                        Object.defineProperty(this, propMapName, {
                            configurable: false,
                            enumerable: false,
                            writable: false,
                            value: new Map()
                        });
                    }
                    var myMap = this[propMapName];
                    var hashKey = void 0;
                    if (hashFunction) {
                        hashKey = hashFunction.apply(this, args);
                    }
                    else {
                        hashKey = args[0];
                    }
                    if (myMap.has(hashKey)) {
                        returnedValue = myMap.get(hashKey);
                    }
                    else {
                        returnedValue = originalMethod.apply(this, args);
                        myMap.set(hashKey, returnedValue);
                    }
                }
                else {
                    if (this.hasOwnProperty(propValName)) {
                        returnedValue = this[propValName];
                    }
                    else {
                        returnedValue = originalMethod.apply(this, args);
                        Object.defineProperty(this, propValName, {
                            configurable: false,
                            enumerable: false,
                            writable: false,
                            value: returnedValue
                        });
                    }
                }
                return returnedValue;
            };
        }
    });

    });

    unwrapExports(memoizeDecorator);
    var memoizeDecorator_1 = memoizeDecorator.Memoize;

    var abi=[{constant:true,inputs:[{name:"",type:"bytes"},{name:"",type:"bytes"}],name:"applyAction",outputs:[{name:"",type:"bytes"}],payable:false,stateMutability:"pure",type:"function"},{constant:true,inputs:[{name:"",type:"bytes"}],name:"isStateTerminal",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"pure",type:"function"},{constant:true,inputs:[{name:"",type:"bytes"}],name:"computeOutcome",outputs:[{name:"",type:"bytes"}],payable:false,stateMutability:"pure",type:"function"},{constant:true,inputs:[{name:"",type:"bytes"},{name:"",type:"address[]"}],name:"getTurnTaker",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"pure",type:"function"}];var evm={bytecode:{linkReferences:{},object:"608060405234801561001057600080fd5b50610781806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806351c2e5411461005157806359e537c11461008157806367c40cc4146100b1578063ce963afd146100e1575b600080fd5b61006b60048036036100669190810190610353565b610111565b60405161007891906105ed565b60405180910390f35b61009b60048036036100969190810190610299565b61014e565b6040516100a891906105d2565b60405180910390f35b6100cb60048036036100c69190810190610299565b61018b565b6040516100d891906105ed565b60405180910390f35b6100fb60048036036100f691908101906102de565b6101c8565b60405161010891906105b7565b60405180910390f35b60606040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101459061066f565b60405180910390fd5b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101829061064f565b60405180910390fd5b60606040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bf9061062f565b60405180910390fd5b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9061060f565b60405180910390fd5b60008083601f84011261021757600080fd5b8235905067ffffffffffffffff81111561023057600080fd5b60208301915083602082028301111561024857600080fd5b9250929050565b60008083601f84011261026157600080fd5b8235905067ffffffffffffffff81111561027a57600080fd5b60208301915083600182028301111561029257600080fd5b9250929050565b600080602083850312156102ac57600080fd5b600083013567ffffffffffffffff8111156102c657600080fd5b6102d28582860161024f565b92509250509250929050565b600080600080604085870312156102f457600080fd5b600085013567ffffffffffffffff81111561030e57600080fd5b61031a8782880161024f565b9450945050602085013567ffffffffffffffff81111561033957600080fd5b61034587828801610205565b925092505092959194509250565b6000806000806040858703121561036957600080fd5b600085013567ffffffffffffffff81111561038357600080fd5b61038f8782880161024f565b9450945050602085013567ffffffffffffffff8111156103ae57600080fd5b6103ba8782880161024f565b925092505092959194509250565b6103d1816106bc565b82525050565b6103e0816106ce565b82525050565b60006103f18261068f565b6103fb818561069a565b935061040b8185602086016106fa565b6104148161072d565b840191505092915050565b600061042c603a836106ab565b91507f546865206765745475726e54616b6572206d6574686f6420686173206e6f206960008301527f6d706c656d656e746174696f6e20666f722074686973204170700000000000006020830152604082019050919050565b6000610492603c836106ab565b91507f54686520636f6d707574654f7574636f6d65206d6574686f6420686173206e6f60008301527f20696d706c656d656e746174696f6e20666f72207468697320417070000000006020830152604082019050919050565b60006104f8603d836106ab565b91507f54686520697353746174655465726d696e616c206d6574686f6420686173206e60008301527f6f20696d706c656d656e746174696f6e20666f722074686973204170700000006020830152604082019050919050565b600061055e6039836106ab565b91507f546865206170706c79416374696f6e206d6574686f6420686173206e6f20696d60008301527f706c656d656e746174696f6e20666f72207468697320417070000000000000006020830152604082019050919050565b60006020820190506105cc60008301846103c8565b92915050565b60006020820190506105e760008301846103d7565b92915050565b6000602082019050818103600083015261060781846103e6565b905092915050565b600060208201905081810360008301526106288161041f565b9050919050565b6000602082019050818103600083015261064881610485565b9050919050565b60006020820190508181036000830152610668816104eb565b9050919050565b6000602082019050818103600083015261068881610551565b9050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006106c7826106da565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156107185780820151818401526020810190506106fd565b83811115610727576000848401525b50505050565b6000601f19601f830116905091905056fea365627a7a7230582090677c7805c9aecdf2feab99a8dc4f09a895ff72996b9627b6d37df94c35b6706c6578706572696d656e74616cf564736f6c634300050a0040",opcodes:"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x781 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51C2E541 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x59E537C1 EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0x67C40CC4 EQ PUSH2 0xB1 JUMPI DUP1 PUSH4 0xCE963AFD EQ PUSH2 0xE1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x66 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x353 JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x78 SWAP2 SWAP1 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x96 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x299 JUMP JUMPDEST PUSH2 0x14E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA8 SWAP2 SWAP1 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0xC6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x299 JUMP JUMPDEST PUSH2 0x18B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD8 SWAP2 SWAP1 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0xF6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2DE JUMP JUMPDEST PUSH2 0x1C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x108 SWAP2 SWAP1 PUSH2 0x5B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x145 SWAP1 PUSH2 0x66F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x182 SWAP1 PUSH2 0x64F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BF SWAP1 PUSH2 0x62F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FC SWAP1 PUSH2 0x60F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x292 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D2 DUP6 DUP3 DUP7 ADD PUSH2 0x24F JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x30E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x31A DUP8 DUP3 DUP9 ADD PUSH2 0x24F JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x339 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x345 DUP8 DUP3 DUP9 ADD PUSH2 0x205 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x369 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38F DUP8 DUP3 DUP9 ADD PUSH2 0x24F JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3BA DUP8 DUP3 DUP9 ADD PUSH2 0x24F JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x3D1 DUP2 PUSH2 0x6BC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x3E0 DUP2 PUSH2 0x6CE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F1 DUP3 PUSH2 0x68F JUMP JUMPDEST PUSH2 0x3FB DUP2 DUP6 PUSH2 0x69A JUMP JUMPDEST SWAP4 POP PUSH2 0x40B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x6FA JUMP JUMPDEST PUSH2 0x414 DUP2 PUSH2 0x72D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42C PUSH1 0x3A DUP4 PUSH2 0x6AB JUMP JUMPDEST SWAP2 POP PUSH32 0x546865206765745475726E54616B6572206D6574686F6420686173206E6F2069 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6D706C656D656E746174696F6E20666F72207468697320417070000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x492 PUSH1 0x3C DUP4 PUSH2 0x6AB JUMP JUMPDEST SWAP2 POP PUSH32 0x54686520636F6D707574654F7574636F6D65206D6574686F6420686173206E6F PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x20696D706C656D656E746174696F6E20666F7220746869732041707000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F8 PUSH1 0x3D DUP4 PUSH2 0x6AB JUMP JUMPDEST SWAP2 POP PUSH32 0x54686520697353746174655465726D696E616C206D6574686F6420686173206E PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6F20696D706C656D656E746174696F6E20666F72207468697320417070000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x55E PUSH1 0x39 DUP4 PUSH2 0x6AB JUMP JUMPDEST SWAP2 POP PUSH32 0x546865206170706C79416374696F6E206D6574686F6420686173206E6F20696D PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x706C656D656E746174696F6E20666F7220746869732041707000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5CC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5E7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3D7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x607 DUP2 DUP5 PUSH2 0x3E6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x628 DUP2 PUSH2 0x41F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x648 DUP2 PUSH2 0x485 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x668 DUP2 PUSH2 0x4EB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x688 DUP2 PUSH2 0x551 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6C7 DUP3 PUSH2 0x6DA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x718 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x6FD JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x727 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG3 PUSH6 0x627A7A723058 KECCAK256 SWAP1 PUSH8 0x7C7805C9AECDF2FE 0xab SWAP10 0xa8 0xdc 0x4f MULMOD 0xa8 SWAP6 SELFDESTRUCT PUSH19 0x996B9627B6D37DF94C35B6706C657870657269 PUSH14 0x656E74616CF564736F6C63430005 EXP STOP BLOCKHASH ",sourceMap:"62:750:7:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;62:750:7;;;;;;;"},deployedBytecode:{linkReferences:{},object:"608060405234801561001057600080fd5b506004361061004c5760003560e01c806351c2e5411461005157806359e537c11461008157806367c40cc4146100b1578063ce963afd146100e1575b600080fd5b61006b60048036036100669190810190610353565b610111565b60405161007891906105ed565b60405180910390f35b61009b60048036036100969190810190610299565b61014e565b6040516100a891906105d2565b60405180910390f35b6100cb60048036036100c69190810190610299565b61018b565b6040516100d891906105ed565b60405180910390f35b6100fb60048036036100f691908101906102de565b6101c8565b60405161010891906105b7565b60405180910390f35b60606040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101459061066f565b60405180910390fd5b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101829061064f565b60405180910390fd5b60606040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bf9061062f565b60405180910390fd5b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9061060f565b60405180910390fd5b60008083601f84011261021757600080fd5b8235905067ffffffffffffffff81111561023057600080fd5b60208301915083602082028301111561024857600080fd5b9250929050565b60008083601f84011261026157600080fd5b8235905067ffffffffffffffff81111561027a57600080fd5b60208301915083600182028301111561029257600080fd5b9250929050565b600080602083850312156102ac57600080fd5b600083013567ffffffffffffffff8111156102c657600080fd5b6102d28582860161024f565b92509250509250929050565b600080600080604085870312156102f457600080fd5b600085013567ffffffffffffffff81111561030e57600080fd5b61031a8782880161024f565b9450945050602085013567ffffffffffffffff81111561033957600080fd5b61034587828801610205565b925092505092959194509250565b6000806000806040858703121561036957600080fd5b600085013567ffffffffffffffff81111561038357600080fd5b61038f8782880161024f565b9450945050602085013567ffffffffffffffff8111156103ae57600080fd5b6103ba8782880161024f565b925092505092959194509250565b6103d1816106bc565b82525050565b6103e0816106ce565b82525050565b60006103f18261068f565b6103fb818561069a565b935061040b8185602086016106fa565b6104148161072d565b840191505092915050565b600061042c603a836106ab565b91507f546865206765745475726e54616b6572206d6574686f6420686173206e6f206960008301527f6d706c656d656e746174696f6e20666f722074686973204170700000000000006020830152604082019050919050565b6000610492603c836106ab565b91507f54686520636f6d707574654f7574636f6d65206d6574686f6420686173206e6f60008301527f20696d706c656d656e746174696f6e20666f72207468697320417070000000006020830152604082019050919050565b60006104f8603d836106ab565b91507f54686520697353746174655465726d696e616c206d6574686f6420686173206e60008301527f6f20696d706c656d656e746174696f6e20666f722074686973204170700000006020830152604082019050919050565b600061055e6039836106ab565b91507f546865206170706c79416374696f6e206d6574686f6420686173206e6f20696d60008301527f706c656d656e746174696f6e20666f72207468697320417070000000000000006020830152604082019050919050565b60006020820190506105cc60008301846103c8565b92915050565b60006020820190506105e760008301846103d7565b92915050565b6000602082019050818103600083015261060781846103e6565b905092915050565b600060208201905081810360008301526106288161041f565b9050919050565b6000602082019050818103600083015261064881610485565b9050919050565b60006020820190508181036000830152610668816104eb565b9050919050565b6000602082019050818103600083015261068881610551565b9050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006106c7826106da565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156107185780820151818401526020810190506106fd565b83811115610727576000848401525b50505050565b6000601f19601f830116905091905056fea365627a7a7230582090677c7805c9aecdf2feab99a8dc4f09a895ff72996b9627b6d37df94c35b6706c6578706572696d656e74616cf564736f6c634300050a0040",opcodes:"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51C2E541 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x59E537C1 EQ PUSH2 0x81 JUMPI DUP1 PUSH4 0x67C40CC4 EQ PUSH2 0xB1 JUMPI DUP1 PUSH4 0xCE963AFD EQ PUSH2 0xE1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x66 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x353 JUMP JUMPDEST PUSH2 0x111 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x78 SWAP2 SWAP1 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x9B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x96 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x299 JUMP JUMPDEST PUSH2 0x14E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xA8 SWAP2 SWAP1 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xCB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0xC6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x299 JUMP JUMPDEST PUSH2 0x18B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD8 SWAP2 SWAP1 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFB PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0xF6 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2DE JUMP JUMPDEST PUSH2 0x1C8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x108 SWAP2 SWAP1 PUSH2 0x5B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x145 SWAP1 PUSH2 0x66F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x182 SWAP1 PUSH2 0x64F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BF SWAP1 PUSH2 0x62F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1FC SWAP1 PUSH2 0x60F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x217 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x230 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x248 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x292 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2D2 DUP6 DUP3 DUP7 ADD PUSH2 0x24F JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x30E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x31A DUP8 DUP3 DUP9 ADD PUSH2 0x24F JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x339 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x345 DUP8 DUP3 DUP9 ADD PUSH2 0x205 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x369 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38F DUP8 DUP3 DUP9 ADD PUSH2 0x24F JUMP JUMPDEST SWAP5 POP SWAP5 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3BA DUP8 DUP3 DUP9 ADD PUSH2 0x24F JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH2 0x3D1 DUP2 PUSH2 0x6BC JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x3E0 DUP2 PUSH2 0x6CE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F1 DUP3 PUSH2 0x68F JUMP JUMPDEST PUSH2 0x3FB DUP2 DUP6 PUSH2 0x69A JUMP JUMPDEST SWAP4 POP PUSH2 0x40B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x6FA JUMP JUMPDEST PUSH2 0x414 DUP2 PUSH2 0x72D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42C PUSH1 0x3A DUP4 PUSH2 0x6AB JUMP JUMPDEST SWAP2 POP PUSH32 0x546865206765745475726E54616B6572206D6574686F6420686173206E6F2069 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6D706C656D656E746174696F6E20666F72207468697320417070000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x492 PUSH1 0x3C DUP4 PUSH2 0x6AB JUMP JUMPDEST SWAP2 POP PUSH32 0x54686520636F6D707574654F7574636F6D65206D6574686F6420686173206E6F PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x20696D706C656D656E746174696F6E20666F7220746869732041707000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4F8 PUSH1 0x3D DUP4 PUSH2 0x6AB JUMP JUMPDEST SWAP2 POP PUSH32 0x54686520697353746174655465726D696E616C206D6574686F6420686173206E PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6F20696D706C656D656E746174696F6E20666F72207468697320417070000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x55E PUSH1 0x39 DUP4 PUSH2 0x6AB JUMP JUMPDEST SWAP2 POP PUSH32 0x546865206170706C79416374696F6E206D6574686F6420686173206E6F20696D PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x706C656D656E746174696F6E20666F7220746869732041707000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5CC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5E7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x3D7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x607 DUP2 DUP5 PUSH2 0x3E6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x628 DUP2 PUSH2 0x41F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x648 DUP2 PUSH2 0x485 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x668 DUP2 PUSH2 0x4EB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x688 DUP2 PUSH2 0x551 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6C7 DUP3 PUSH2 0x6DA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x718 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x6FD JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x727 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG3 PUSH6 0x627A7A723058 KECCAK256 SWAP1 PUSH8 0x7C7805C9AECDF2FE 0xab SWAP10 0xa8 0xdc 0x4f MULMOD 0xa8 SWAP6 SELFDESTRUCT PUSH19 0x996B9627B6D37DF94C35B6706C657870657269 PUSH14 0x656E74616CF564736F6C63430005 EXP STOP BLOCKHASH ",sourceMap:"62:750:7:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;62:750:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;451:182;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;94:166;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;637:172;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;264:183;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;451:182;539:12;561:67;;;;;;;;;;;;;;;;;;;94:166;170:4;184:71;;;;;;;;;;;;;;;;;;;637:172;712:12;734:70;;;;;;;;;;;;;;;;;;;264:183;357:7;374:68;;;;;;;;;;;;;;;;;;;23:352:-1;;;153:3;146:4;138:6;134:17;130:27;120:2;;171:1;168;161:12;120:2;204:6;191:20;181:30;;231:18;223:6;220:30;217:2;;;263:1;260;253:12;217:2;297:4;289:6;285:17;273:29;;348:3;340:4;332:6;328:17;318:8;314:32;311:41;308:2;;;365:1;362;355:12;308:2;113:262;;;;;;397:335;;;511:3;504:4;496:6;492:17;488:27;478:2;;529:1;526;519:12;478:2;562:6;549:20;539:30;;589:18;581:6;578:30;575:2;;;621:1;618;611:12;575:2;655:4;647:6;643:17;631:29;;705:3;698;690:6;686:16;676:8;672:31;669:40;666:2;;;722:1;719;712:12;666:2;471:261;;;;;;740:365;;;863:2;851:9;842:7;838:23;834:32;831:2;;;879:1;876;869:12;831:2;942:1;931:9;927:17;914:31;965:18;957:6;954:30;951:2;;;997:1;994;987:12;951:2;1025:64;1081:7;1072:6;1061:9;1057:22;1025:64;;;1015:74;;;;893:202;825:280;;;;;;1112:646;;;;;1287:2;1275:9;1266:7;1262:23;1258:32;1255:2;;;1303:1;1300;1293:12;1255:2;1366:1;1355:9;1351:17;1338:31;1389:18;1381:6;1378:30;1375:2;;;1421:1;1418;1411:12;1375:2;1449:64;1505:7;1496:6;1485:9;1481:22;1449:64;;;1439:74;;;;1317:202;1578:2;1567:9;1563:18;1550:32;1602:18;1594:6;1591:30;1588:2;;;1634:1;1631;1624:12;1588:2;1662:80;1734:7;1725:6;1714:9;1710:22;1662:80;;;1652:90;;;;1529:219;1249:509;;;;;;;;1765:614;;;;;1924:2;1912:9;1903:7;1899:23;1895:32;1892:2;;;1940:1;1937;1930:12;1892:2;2003:1;1992:9;1988:17;1975:31;2026:18;2018:6;2015:30;2012:2;;;2058:1;2055;2048:12;2012:2;2086:64;2142:7;2133:6;2122:9;2118:22;2086:64;;;2076:74;;;;1954:202;2215:2;2204:9;2200:18;2187:32;2239:18;2231:6;2228:30;2225:2;;;2271:1;2268;2261:12;2225:2;2299:64;2355:7;2346:6;2335:9;2331:22;2299:64;;;2289:74;;;;2166:203;1886:493;;;;;;;;2386:113;2469:24;2487:5;2469:24;;;2464:3;2457:37;2451:48;;;2506:104;2583:21;2598:5;2583:21;;;2578:3;2571:34;2565:45;;;2617:343;;2727:38;2759:5;2727:38;;;2777:70;2840:6;2835:3;2777:70;;;2770:77;;2852:52;2897:6;2892:3;2885:4;2878:5;2874:16;2852:52;;;2925:29;2947:6;2925:29;;;2920:3;2916:39;2909:46;;2707:253;;;;;;2968:465;;3128:67;3192:2;3187:3;3128:67;;;3121:74;;3228:66;3224:1;3219:3;3215:11;3208:87;3329:66;3324:2;3319:3;3315:12;3308:88;3424:2;3419:3;3415:12;3408:19;;3114:319;;;;3442:465;;3602:67;3666:2;3661:3;3602:67;;;3595:74;;3702:66;3698:1;3693:3;3689:11;3682:87;3803:66;3798:2;3793:3;3789:12;3782:88;3898:2;3893:3;3889:12;3882:19;;3588:319;;;;3916:465;;4076:67;4140:2;4135:3;4076:67;;;4069:74;;4176:66;4172:1;4167:3;4163:11;4156:87;4277:66;4272:2;4267:3;4263:12;4256:88;4372:2;4367:3;4363:12;4356:19;;4062:319;;;;4390:465;;4550:67;4614:2;4609:3;4550:67;;;4543:74;;4650:66;4646:1;4641:3;4637:11;4630:87;4751:66;4746:2;4741:3;4737:12;4730:88;4846:2;4841:3;4837:12;4830:19;;4536:319;;;;4863:213;;4981:2;4970:9;4966:18;4958:26;;4995:71;5063:1;5052:9;5048:17;5039:6;4995:71;;;4952:124;;;;;5083:201;;5195:2;5184:9;5180:18;5172:26;;5209:65;5271:1;5260:9;5256:17;5247:6;5209:65;;;5166:118;;;;;5291:297;;5427:2;5416:9;5412:18;5404:26;;5477:9;5471:4;5467:20;5463:1;5452:9;5448:17;5441:47;5502:76;5573:4;5564:6;5502:76;;;5494:84;;5398:190;;;;;5595:407;;5786:2;5775:9;5771:18;5763:26;;5836:9;5830:4;5826:20;5822:1;5811:9;5807:17;5800:47;5861:131;5987:4;5861:131;;;5853:139;;5757:245;;;;6009:407;;6200:2;6189:9;6185:18;6177:26;;6250:9;6244:4;6240:20;6236:1;6225:9;6221:17;6214:47;6275:131;6401:4;6275:131;;;6267:139;;6171:245;;;;6423:407;;6614:2;6603:9;6599:18;6591:26;;6664:9;6658:4;6654:20;6650:1;6639:9;6635:17;6628:47;6689:131;6815:4;6689:131;;;6681:139;;6585:245;;;;6837:407;;7028:2;7017:9;7013:18;7005:26;;7078:9;7072:4;7068:20;7064:1;7053:9;7049:17;7042:47;7103:131;7229:4;7103:131;;;7095:139;;6999:245;;;;7251:121;;7344:5;7338:12;7328:22;;7309:63;;;;7380:162;;7494:6;7489:3;7482:19;7531:4;7526:3;7522:14;7507:29;;7475:67;;;;;7551:163;;7666:6;7661:3;7654:19;7703:4;7698:3;7694:14;7679:29;;7647:67;;;;;7722:91;;7784:24;7802:5;7784:24;;;7773:35;;7767:46;;;;7820:85;;7893:5;7886:13;7879:21;7868:32;;7862:43;;;;7912:121;;7985:42;7978:5;7974:54;7963:65;;7957:76;;;;8041:268;8106:1;8113:101;8127:6;8124:1;8121:13;8113:101;;;8203:1;8198:3;8194:11;8188:18;8184:1;8179:3;8175:11;8168:39;8149:2;8146:1;8142:10;8137:15;;8113:101;;;8229:6;8226:1;8223:13;8220:2;;;8294:1;8285:6;8280:3;8276:16;8269:27;8220:2;8090:219;;;;;8317:97;;8405:2;8401:7;8396:2;8389:5;8385:14;8381:28;8371:38;;8365:49;;;"}};var bytecode="608060405234801561001057600080fd5b50610781806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806351c2e5411461005157806359e537c11461008157806367c40cc4146100b1578063ce963afd146100e1575b600080fd5b61006b60048036036100669190810190610353565b610111565b60405161007891906105ed565b60405180910390f35b61009b60048036036100969190810190610299565b61014e565b6040516100a891906105d2565b60405180910390f35b6100cb60048036036100c69190810190610299565b61018b565b6040516100d891906105ed565b60405180910390f35b6100fb60048036036100f691908101906102de565b6101c8565b60405161010891906105b7565b60405180910390f35b60606040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101459061066f565b60405180910390fd5b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101829061064f565b60405180910390fd5b60606040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bf9061062f565b60405180910390fd5b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fc9061060f565b60405180910390fd5b60008083601f84011261021757600080fd5b8235905067ffffffffffffffff81111561023057600080fd5b60208301915083602082028301111561024857600080fd5b9250929050565b60008083601f84011261026157600080fd5b8235905067ffffffffffffffff81111561027a57600080fd5b60208301915083600182028301111561029257600080fd5b9250929050565b600080602083850312156102ac57600080fd5b600083013567ffffffffffffffff8111156102c657600080fd5b6102d28582860161024f565b92509250509250929050565b600080600080604085870312156102f457600080fd5b600085013567ffffffffffffffff81111561030e57600080fd5b61031a8782880161024f565b9450945050602085013567ffffffffffffffff81111561033957600080fd5b61034587828801610205565b925092505092959194509250565b6000806000806040858703121561036957600080fd5b600085013567ffffffffffffffff81111561038357600080fd5b61038f8782880161024f565b9450945050602085013567ffffffffffffffff8111156103ae57600080fd5b6103ba8782880161024f565b925092505092959194509250565b6103d1816106bc565b82525050565b6103e0816106ce565b82525050565b60006103f18261068f565b6103fb818561069a565b935061040b8185602086016106fa565b6104148161072d565b840191505092915050565b600061042c603a836106ab565b91507f546865206765745475726e54616b6572206d6574686f6420686173206e6f206960008301527f6d706c656d656e746174696f6e20666f722074686973204170700000000000006020830152604082019050919050565b6000610492603c836106ab565b91507f54686520636f6d707574654f7574636f6d65206d6574686f6420686173206e6f60008301527f20696d706c656d656e746174696f6e20666f72207468697320417070000000006020830152604082019050919050565b60006104f8603d836106ab565b91507f54686520697353746174655465726d696e616c206d6574686f6420686173206e60008301527f6f20696d706c656d656e746174696f6e20666f722074686973204170700000006020830152604082019050919050565b600061055e6039836106ab565b91507f546865206170706c79416374696f6e206d6574686f6420686173206e6f20696d60008301527f706c656d656e746174696f6e20666f72207468697320417070000000000000006020830152604082019050919050565b60006020820190506105cc60008301846103c8565b92915050565b60006020820190506105e760008301846103d7565b92915050565b6000602082019050818103600083015261060781846103e6565b905092915050565b600060208201905081810360008301526106288161041f565b9050919050565b6000602082019050818103600083015261064881610485565b9050919050565b60006020820190508181036000830152610668816104eb565b9050919050565b6000602082019050818103600083015261068881610551565b9050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006106c7826106da565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156107185780820151818401526020810190506106fd565b83811115610727576000848401525b50505050565b6000601f19601f830116905091905056fea365627a7a7230582090677c7805c9aecdf2feab99a8dc4f09a895ff72996b9627b6d37df94c35b6706c6578706572696d656e74616cf564736f6c634300050a0040";var CounterfactualApp = {abi:abi,evm:evm,"interface":[{constant:true,inputs:[{name:"",type:"bytes"},{name:"",type:"bytes"}],name:"applyAction",outputs:[{name:"",type:"bytes"}],payable:false,stateMutability:"pure",type:"function"},{constant:true,inputs:[{name:"",type:"bytes"}],name:"isStateTerminal",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"pure",type:"function"},{constant:true,inputs:[{name:"",type:"bytes"}],name:"computeOutcome",outputs:[{name:"",type:"bytes"}],payable:false,stateMutability:"pure",type:"function"},{constant:true,inputs:[{name:"",type:"bytes"},{name:"",type:"address[]"}],name:"getTurnTaker",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"pure",type:"function"}],bytecode:bytecode};

    function appIdentityToHash(appIdentity) {
        return utils.keccak256(utils.defaultAbiCoder.encode(["uint256", "address[]"], [appIdentity.channelNonce, appIdentity.participants]));
    }

    class AppInstance {
        constructor(multisigAddress, participants, defaultTimeout, appInterface, isVirtualApp, appSeqNo, latestState, latestVersionNumber, latestTimeout, outcomeType, twoPartyOutcomeInterpreterParams, coinTransferInterpreterParams) {
            this.multisigAddress = multisigAddress;
            this.participants = participants;
            this.defaultTimeout = defaultTimeout;
            this.appInterface = appInterface;
            this.isVirtualApp = isVirtualApp;
            this.appSeqNo = appSeqNo;
            this.latestState = latestState;
            this.latestVersionNumber = latestVersionNumber;
            this.latestTimeout = latestTimeout;
            this.outcomeType = outcomeType;
            this.twoPartyOutcomeInterpreterParams = twoPartyOutcomeInterpreterParams;
            this.coinTransferInterpreterParams = coinTransferInterpreterParams;
        }
        static fromJson(json) {
            const serialized = JSON.parse(JSON.stringify(json), (key, val) => (val["_hex"] ? utils.bigNumberify(val) : val));
            return new AppInstance(serialized.multisigAddress, serialized.participants, serialized.defaultTimeout, serialized.appInterface, serialized.isVirtualApp, serialized.appSeqNo, serialized.latestState, serialized.latestVersionNumber, serialized.latestTimeout, serialized.outcomeType, serialized.twoPartyOutcomeInterpreterParams, serialized.coinTransferInterpreterParams);
        }
        toJson() {
            return JSON.parse(JSON.stringify({
                multisigAddress: this.multisigAddress,
                participants: this.participants,
                defaultTimeout: this.defaultTimeout,
                appInterface: this.appInterface,
                isVirtualApp: this.isVirtualApp,
                appSeqNo: this.appSeqNo,
                latestState: this.latestState,
                latestVersionNumber: this.latestVersionNumber,
                latestTimeout: this.latestTimeout,
                outcomeType: this.outcomeType,
                twoPartyOutcomeInterpreterParams: this.twoPartyOutcomeInterpreterParams,
                coinTransferInterpreterParams: this.coinTransferInterpreterParams,
                identityHash: this.identityHash
            }), (key, val) => (utils.BigNumber.isBigNumber(val) ? { _hex: val.toHexString() } : val));
        }
        get identityHash() {
            return appIdentityToHash(this.identity);
        }
        get identity() {
            return {
                participants: this.participants,
                appDefinition: this.appInterface.addr,
                defaultTimeout: this.defaultTimeout,
                channelNonce: this.appSeqNo
            };
        }
        get hashOfLatestState() {
            return utils.keccak256(this.encodedLatestState);
        }
        get encodedLatestState() {
            return utils.defaultAbiCoder.encode([this.appInterface.stateEncoding], [this.latestState]);
        }
        get state() {
            return this.latestState;
        }
        get versionNumber() {
            return this.latestVersionNumber;
        }
        get timeout() {
            return this.latestTimeout;
        }
        setState(newState, timeout = this.defaultTimeout) {
            try {
                utils.defaultAbiCoder.encode([this.appInterface.stateEncoding], [newState]);
            }
            catch (e) {
                console.error("Attempted to setState on an app with an invalid state object");
                throw e;
            }
            return AppInstance.fromJson(Object.assign({}, this.toJson(), { latestState: newState, latestVersionNumber: this.versionNumber + 1, latestTimeout: timeout }));
        }
        async computeOutcome(state, provider) {
            return await this.toEthersContract(provider).functions.computeOutcome(this.encodeState(state));
        }
        async computeStateTransition(action, provider) {
            const ret = {};
            const computedNextState = this.decodeAppState(await this.toEthersContract(provider).functions.applyAction(this.encodedLatestState, this.encodeAction(action)));
            for (const key in this.state) {
                ret[key] = computedNextState[key];
            }
            return ret;
        }
        encodeAction(action) {
            return utils.defaultAbiCoder.encode([this.appInterface.actionEncoding], [action]);
        }
        encodeState(state) {
            return utils.defaultAbiCoder.encode([this.appInterface.stateEncoding], [state]);
        }
        decodeAppState(encodedSolidityABIEncoderV2Type) {
            return utils.defaultAbiCoder.decode([this.appInterface.stateEncoding], encodedSolidityABIEncoderV2Type)[0];
        }
        toEthersContract(provider) {
            return new ethers.Contract(this.appInterface.addr, CounterfactualApp.abi, provider);
        }
    }
    __decorate([
        memoizeDecorator_1(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], AppInstance.prototype, "identityHash", null);
    __decorate([
        memoizeDecorator_1(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], AppInstance.prototype, "identity", null);
    __decorate([
        memoizeDecorator_1(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], AppInstance.prototype, "hashOfLatestState", null);
    __decorate([
        memoizeDecorator_1(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], AppInstance.prototype, "encodedLatestState", null);

    class AppInstanceProposal {
        constructor(proposeParams, channel, overrideId) {
            this.appDefinition = proposeParams.appDefinition;
            this.abiEncodings = proposeParams.abiEncodings;
            this.initiatorDeposit = utils.bigNumberify(proposeParams.initiatorDeposit);
            this.initiatorDepositTokenAddress =
                proposeParams.initiatorDepositTokenAddress;
            this.responderDeposit = utils.bigNumberify(proposeParams.responderDeposit);
            this.responderDepositTokenAddress =
                proposeParams.responderDepositTokenAddress;
            this.timeout = utils.bigNumberify(proposeParams.timeout);
            this.proposedByIdentifier = proposeParams.proposedByIdentifier;
            this.proposedToIdentifier = proposeParams.proposedToIdentifier;
            this.initialState = proposeParams.initialState;
            this.intermediaries = proposeParams.intermediaries;
            this.outcomeType = proposeParams.outcomeType;
            this.identityHash = overrideId || this.getIdentityHashFor(channel);
        }
        getIdentityHashFor(stateChannel) {
            return this.toAppInstanceFor(stateChannel).identityHash;
        }
        toAppInstanceFor(stateChannel) {
            return new AppInstance(stateChannel.multisigAddress, stateChannel.getNextSigningKeys(), utils.bigNumberify(this.timeout).toNumber(), Object.assign({ addr: this.appDefinition }, this.abiEncodings), (this.intermediaries || []).length > 0, stateChannel.numInstalledApps, this.initialState, 0, utils.bigNumberify(this.timeout).toNumber(), -1, undefined, undefined);
        }
        toJson() {
            return {
                identityHash: this.identityHash,
                appDefinition: this.appDefinition,
                abiEncodings: this.abiEncodings,
                initiatorDeposit: { _hex: this.initiatorDeposit.toHexString() },
                initiatorDepositTokenAddress: this.initiatorDepositTokenAddress,
                responderDeposit: { _hex: this.responderDeposit.toHexString() },
                responderDepositTokenAddress: this.responderDepositTokenAddress,
                initialState: this.initialState,
                timeout: { _hex: this.timeout.toHexString() },
                proposedByIdentifier: this.proposedByIdentifier,
                proposedToIdentifier: this.proposedToIdentifier,
                intermediaries: this.intermediaries,
                outcomeType: this.outcomeType
            };
        }
        static fromJson(json) {
            const proposeParams = {
                appDefinition: json.appDefinition,
                abiEncodings: json.abiEncodings,
                initiatorDeposit: utils.bigNumberify(json.initiatorDeposit._hex),
                initiatorDepositTokenAddress: json.initiatorDepositTokenAddress,
                responderDeposit: utils.bigNumberify(json.responderDeposit._hex),
                responderDepositTokenAddress: json.responderDepositTokenAddress,
                timeout: utils.bigNumberify(json.timeout._hex),
                initialState: json.initialState,
                proposedByIdentifier: json.proposedByIdentifier,
                proposedToIdentifier: json.proposedToIdentifier,
                intermediaries: json.intermediaries,
                outcomeType: json.outcomeType
            };
            return new AppInstanceProposal(proposeParams, undefined, json.identityHash);
        }
    }

    const freeBalanceAppStateEncoding = `
  tuple(
    address[] tokenAddresses,
    tuple(
      address to,
      uint256 amount
    )[][] balances,
    bytes32[] activeApps
  )
`;
    function getFreeBalanceAppInterface(addr) {
        return {
            addr,
            stateEncoding: freeBalanceAppStateEncoding,
            actionEncoding: undefined
        };
    }
    function flipTokenIndexedBalances(tokenIndexedBalances) {
        return Object.entries(tokenIndexedBalances).reduce((returnValueAccumulator, [tokenAddress, balances]) => (Object.assign({}, returnValueAccumulator, { [tokenAddress]: flip(balances) })), {});
    }
    function flip(coinTransferMap) {
        return Object.entries(coinTransferMap).reduce((returnValueAccumulator, [to, amount]) => (Object.assign({}, returnValueAccumulator, { [to]: constants.Zero.sub(amount) })), {});
    }
    function merge(base, increments) {
        const ret = {};
        for (const key of Object.keys(base)) {
            if (increments[key]) {
                ret[key] = base[key].add(increments[key]);
                if (ret[key].lt(constants.Zero)) {
                    throw new Error("Underflow in merge");
                }
            }
            else {
                ret[key] = base[key];
            }
        }
        for (const key of Object.keys(increments)) {
            if (!base[key]) {
                throw new Error(`mismatch ${Object.keys(base)} ${Object.keys(increments)}`);
            }
        }
        return ret;
    }

    function sortAddresses(addrs) {
        return addrs.sort((a, b) => (parseInt(a, 16) < parseInt(b, 16) ? -1 : 1));
    }
    function xkeyKthAddress(xkey, k) {
        return utils.computeAddress(xkeyKthHDNode(xkey, k).publicKey);
    }
    function xkeyKthHDNode(xkey, k) {
        return hdnode.fromExtendedKey(xkey).derivePath(`${k}`);
    }
    function xkeysToSortedKthAddresses(xkeys, k) {
        return sortAddresses(xkeys.map(xkey => xkeyKthAddress(xkey, k)));
    }

    const coinTransferInterpreterParamsStateEncoding = `
  tuple(
    uint256[] limit,
    address[] tokenAddresses
  )
`;
    var OutcomeType;
    (function (OutcomeType) {
        OutcomeType[OutcomeType["TWO_PARTY_FIXED_OUTCOME"] = 0] = "TWO_PARTY_FIXED_OUTCOME";
        OutcomeType[OutcomeType["COIN_TRANSFER_DO_NOT_USE"] = 1] = "COIN_TRANSFER_DO_NOT_USE";
        OutcomeType[OutcomeType["FREE_BALANCE_OUTCOME_TYPE"] = 2] = "FREE_BALANCE_OUTCOME_TYPE";
        OutcomeType[OutcomeType["REFUND_OUTCOME_TYPE"] = 3] = "REFUND_OUTCOME_TYPE";
        OutcomeType[OutcomeType["SINGLE_ASSET_TWO_PARTY_COIN_TRANSFER"] = 4] = "SINGLE_ASSET_TWO_PARTY_COIN_TRANSFER";
    })(OutcomeType || (OutcomeType = {}));
    var TwoPartyFixedOutcome;
    (function (TwoPartyFixedOutcome) {
        TwoPartyFixedOutcome[TwoPartyFixedOutcome["SEND_TO_ADDR_ONE"] = 0] = "SEND_TO_ADDR_ONE";
        TwoPartyFixedOutcome[TwoPartyFixedOutcome["SEND_TO_ADDR_TWO"] = 1] = "SEND_TO_ADDR_TWO";
        TwoPartyFixedOutcome[TwoPartyFixedOutcome["SPLIT_AND_SEND_TO_BOTH_ADDRS"] = 2] = "SPLIT_AND_SEND_TO_BOTH_ADDRS";
    })(TwoPartyFixedOutcome || (TwoPartyFixedOutcome = {}));
    const coinBalanceRefundStateEncoding = `
  tuple(
    address recipient,
    address multisig,
    uint256 threshold,
    address tokenAddress
  )
`;

    var Node;
    (function (Node) {
        let ErrorType;
        (function (ErrorType) {
            ErrorType["ERROR"] = "error";
        })(ErrorType = Node.ErrorType || (Node.ErrorType = {}));
        let MethodName;
        (function (MethodName) {
            MethodName["ACCEPT_STATE"] = "acceptState";
            MethodName["CREATE_CHANNEL"] = "createChannel";
            MethodName["DEPOSIT"] = "deposit";
            MethodName["GET_APP_INSTANCE_DETAILS"] = "getAppInstanceDetails";
            MethodName["GET_APP_INSTANCES"] = "getAppInstances";
            MethodName["GET_CHANNEL_ADDRESSES"] = "getChannelAddresses";
            MethodName["GET_STATE_DEPOSIT_HOLDER_ADDRESS"] = "getStateDepositHolderAddress";
            MethodName["GET_FREE_BALANCE_STATE"] = "getFreeBalanceState";
            MethodName["GET_PROPOSED_APP_INSTANCE"] = "getProposedAppInstance";
            MethodName["GET_PROPOSED_APP_INSTANCES"] = "getProposedAppInstances";
            MethodName["GET_STATE"] = "getState";
            MethodName["GET_STATE_CHANNEL"] = "getStateChannel";
            MethodName["INSTALL"] = "install";
            MethodName["INSTALL_VIRTUAL"] = "installVirtual";
            MethodName["PROPOSE_INSTALL"] = "proposeInstall";
            MethodName["PROPOSE_INSTALL_VIRTUAL"] = "proposeInstallVirtual";
            MethodName["PROPOSE_STATE"] = "proposeState";
            MethodName["REJECT_INSTALL"] = "rejectInstall";
            MethodName["REJECT_STATE"] = "rejectState";
            MethodName["UPDATE_STATE"] = "updateState";
            MethodName["TAKE_ACTION"] = "takeAction";
            MethodName["UNINSTALL"] = "uninstall";
            MethodName["UNINSTALL_VIRTUAL"] = "uninstallVirtual";
            MethodName["WITHDRAW"] = "withdraw";
        })(MethodName = Node.MethodName || (Node.MethodName = {}));
        let RpcMethodName;
        (function (RpcMethodName) {
            RpcMethodName["CREATE_CHANNEL"] = "chan_create";
            RpcMethodName["DEPOSIT"] = "chan_deposit";
            RpcMethodName["GET_APP_INSTANCE_DETAILS"] = "chan_getAppInstance";
            RpcMethodName["GET_APP_INSTANCES"] = "chan_getAppInstances";
            RpcMethodName["GET_STATE_DEPOSIT_HOLDER_ADDRESS"] = "chan_getStateDepositHolderAddress";
            RpcMethodName["GET_FREE_BALANCE_STATE"] = "chan_getFreeBalanceState";
            RpcMethodName["GET_PROPOSED_APP_INSTANCES"] = "chan_getProposedAppInstances";
            RpcMethodName["GET_STATE"] = "chan_getState";
            RpcMethodName["INSTALL"] = "chan_install";
            RpcMethodName["INSTALL_VIRTUAL"] = "chan_installVirtual";
            RpcMethodName["PROPOSE_INSTALL"] = "chan_proposeInstall";
            RpcMethodName["PROPOSE_INSTALL_VIRTUAL"] = "chan_proposeInstallVirtual";
            RpcMethodName["PROPOSE_STATE"] = "chan_proposeState";
            RpcMethodName["REJECT_INSTALL"] = "chan_rejectInstall";
            RpcMethodName["REJECT_STATE"] = "chan_rejectState";
            RpcMethodName["UPDATE_STATE"] = "chan_updateState";
            RpcMethodName["TAKE_ACTION"] = "chan_takeAction";
            RpcMethodName["UNINSTALL"] = "chan_uninstall";
            RpcMethodName["UNINSTALL_VIRTUAL"] = "chan_uninstallVirtual";
            RpcMethodName["WITHDRAW"] = "chan_withdraw";
        })(RpcMethodName = Node.RpcMethodName || (Node.RpcMethodName = {}));
        let EventName;
        (function (EventName) {
            EventName["COUNTER_DEPOSIT_CONFIRMED"] = "counterDepositConfirmed";
            EventName["CREATE_CHANNEL"] = "createChannelEvent";
            EventName["DEPOSIT_CONFIRMED"] = "depositConfirmedEvent";
            EventName["DEPOSIT_FAILED"] = "depositFailed";
            EventName["DEPOSIT_STARTED"] = "depositStartedEvent";
            EventName["INSTALL"] = "installEvent";
            EventName["INSTALL_VIRTUAL"] = "installVirtualEvent";
            EventName["PROPOSE_STATE"] = "proposeStateEvent";
            EventName["REJECT_INSTALL"] = "rejectInstallEvent";
            EventName["REJECT_STATE"] = "rejectStateEvent";
            EventName["UNINSTALL"] = "uninstallEvent";
            EventName["UNINSTALL_VIRTUAL"] = "uninstallVirtualEvent";
            EventName["UPDATE_STATE"] = "updateStateEvent";
            EventName["WITHDRAWAL_CONFIRMED"] = "withdrawalConfirmedEvent";
            EventName["WITHDRAWAL_FAILED"] = "withdrawalFailed";
            EventName["WITHDRAWAL_STARTED"] = "withdrawalStartedEvent";
            EventName["PROPOSE_INSTALL"] = "proposeInstallEvent";
            EventName["PROPOSE_INSTALL_VIRTUAL"] = "proposeInstallVirtualEvent";
            EventName["PROTOCOL_MESSAGE_EVENT"] = "protocolMessageEvent";
            EventName["WITHDRAW_EVENT"] = "withdrawEvent";
            EventName["REJECT_INSTALL_VIRTUAL"] = "rejectInstallVirtualEvent";
        })(EventName = Node.EventName || (Node.EventName = {}));
    })(Node || (Node = {}));

    const EXPECTED_CONTRACT_NAMES_IN_NETWORK_CONTEXT = [
        "ChallengeRegistry",
        "ConditionalTransactionDelegateTarget",
        "CoinBalanceRefundApp",
        "CoinTransferInterpreter",
        "IdentityApp",
        "FreeBalanceApp",
        "MinimumViableMultisig",
        "ProxyFactory",
        "TimeLockedPassThrough",
        "TwoPartyFixedOutcomeInterpreter",
        "TwoPartyFixedOutcomeFromVirtualAppInterpreter"
    ];

    const HARD_CODED_ASSUMPTIONS = {
        freeBalanceInitialStateTimeout: 172800,
        appSequenceNumberForFreeBalance: 0
    };
    const CONVENTION_FOR_ETH_TOKEN_ADDRESS = constants.AddressZero;
    function createFreeBalance(multisigAddress, userNeuteredExtendedKeys, coinBucketAddress, freeBalanceTimeout) {
        const sortedTopLevelKeys = xkeysToSortedKthAddresses(userNeuteredExtendedKeys, 0);
        const initialState = {
            activeAppsMap: {},
            balancesIndexedByToken: {
                [CONVENTION_FOR_ETH_TOKEN_ADDRESS]: [
                    { to: sortedTopLevelKeys[0], amount: constants.Zero },
                    { to: sortedTopLevelKeys[1], amount: constants.Zero }
                ]
            }
        };
        return new AppInstance(multisigAddress, sortedTopLevelKeys, freeBalanceTimeout, getFreeBalanceAppInterface(coinBucketAddress), false, HARD_CODED_ASSUMPTIONS.appSequenceNumberForFreeBalance, serializeFreeBalanceState(initialState), 0, HARD_CODED_ASSUMPTIONS.freeBalanceInitialStateTimeout, OutcomeType.FREE_BALANCE_OUTCOME_TYPE, undefined, { limit: [constants.MaxUint256], tokenAddresses: [CONVENTION_FOR_ETH_TOKEN_ADDRESS] });
    }
    function convertCoinTransfersToCoinTransfersMap(coinTransfers) {
        return (coinTransfers || []).reduce((acc, { to, amount }) => (Object.assign({}, acc, { [to]: amount })), {});
    }
    function getBalancesFromFreeBalanceAppInstance(freeBalanceAppInstance, tokenAddress) {
        const freeBalanceState = deserializeFreeBalanceState(freeBalanceAppInstance.state);
        const coinTransfers = freeBalanceState.balancesIndexedByToken[tokenAddress] || [
            { to: freeBalanceAppInstance.participants[0], amount: constants.Zero },
            { to: freeBalanceAppInstance.participants[1], amount: constants.Zero }
        ];
        return convertCoinTransfersToCoinTransfersMap(coinTransfers);
    }
    function deserializeFreeBalanceState(freeBalanceStateJSON) {
        const { activeApps, tokenAddresses, balances } = freeBalanceStateJSON;
        return {
            balancesIndexedByToken: (tokenAddresses || []).reduce((acc, tokenAddress, idx) => (Object.assign({}, acc, { [tokenAddress]: balances[idx].map(({ to, amount }) => ({
                    to,
                    amount: utils.bigNumberify(amount._hex)
                })) })), {}),
            activeAppsMap: (activeApps || []).reduce((acc, identityHash) => (Object.assign({}, acc, { [identityHash]: true })), {})
        };
    }
    function serializeFreeBalanceState(freeBalanceState) {
        return {
            activeApps: Object.keys(freeBalanceState.activeAppsMap),
            tokenAddresses: Object.keys(freeBalanceState.balancesIndexedByToken),
            balances: Object.values(freeBalanceState.balancesIndexedByToken).map(balances => balances.map(({ to, amount }) => ({
                to,
                amount: {
                    _hex: amount.toHexString()
                }
            })))
        };
    }

    const HARD_CODED_ASSUMPTIONS$1 = {
        freeBalanceDefaultTimeout: 172800
    };
    const ERRORS = {
        APPS_NOT_EMPTY: (size) => `Expected the appInstances list to be empty but size ${size}`,
        APP_DOES_NOT_EXIST: (identityHash) => `Attempted to edit an appInstance that does not exist: identity hash = ${identityHash}`,
        FREE_BALANCE_MISSING: "Cannot find ETH Free Balance App in StateChannel",
        FREE_BALANCE_IDX_CORRUPT: (idx) => `Index ${idx} used to find ETH Free Balance is broken`,
        INSUFFICIENT_FUNDS: "Attempted to install an appInstance without sufficient funds",
        MULTISIG_OWNERS_NOT_SORTED: "multisigOwners parameter of StateChannel must be sorted"
    };
    function sortAddresses$1(addrs) {
        return addrs.sort((a, b) => (parseInt(a, 16) < parseInt(b, 16) ? -1 : 1));
    }
    class StateChannel {
        constructor(multisigAddress, userNeuteredExtendedKeys, appInstances = new Map([]), singleAssetTwoPartyIntermediaryAgreements = new Map([]), freeBalanceAppInstance, monotonicNumInstalledApps = 0, createdAt = Date.now()) {
            this.multisigAddress = multisigAddress;
            this.userNeuteredExtendedKeys = userNeuteredExtendedKeys;
            this.appInstances = appInstances;
            this.singleAssetTwoPartyIntermediaryAgreements = singleAssetTwoPartyIntermediaryAgreements;
            this.freeBalanceAppInstance = freeBalanceAppInstance;
            this.monotonicNumInstalledApps = monotonicNumInstalledApps;
            this.createdAt = createdAt;
            userNeuteredExtendedKeys.forEach(xpub => {
                if (xpub.slice(0, 4) !== "xpub") {
                    throw new Error(`StateChannel constructor given invalid extended keys: ${userNeuteredExtendedKeys}`);
                }
            });
        }
        get multisigOwners() {
            return this.getSigningKeysFor(0);
        }
        get numInstalledApps() {
            return this.monotonicNumInstalledApps;
        }
        get numActiveApps() {
            return this.appInstances.size;
        }
        getAppInstance(appInstanceIdentityHash) {
            if (!this.appInstances.has(appInstanceIdentityHash)) {
                throw new Error(ERRORS.APP_DOES_NOT_EXIST(appInstanceIdentityHash));
            }
            return this.appInstances.get(appInstanceIdentityHash);
        }
        hasAppInstance(appInstanceId) {
            return this.appInstances.has(appInstanceId);
        }
        hasAppInstanceOfKind(address) {
            return (Array.from(this.appInstances.values()).filter((appInstance) => {
                return appInstance.appInterface.addr === address;
            }).length > 0);
        }
        mostRecentlyInstalledAppInstance() {
            if (this.appInstances.size === 0) {
                throw new Error("There are no installed AppInstances in this StateChannel");
            }
            return [...this.appInstances.values()].reduce((prev, current) => current.appSeqNo > prev.appSeqNo ? current : prev);
        }
        getAppInstanceOfKind(address) {
            const appInstances = Array.from(this.appInstances.values()).filter((appInstance) => {
                return appInstance.appInterface.addr === address;
            });
            if (appInstances.length !== 1) {
                throw new Error(`No AppInstance of addr ${address} exists on channel: ${this.multisigAddress}`);
            }
            return appInstances[0];
        }
        isAppInstanceInstalled(appInstanceIdentityHash) {
            return this.appInstances.has(appInstanceIdentityHash);
        }
        getSigningKeysFor(addressIndex) {
            return sortAddresses$1(this.userNeuteredExtendedKeys.map(xpub => xkeyKthAddress(xpub, addressIndex)));
        }
        getNextSigningKeys() {
            return this.getSigningKeysFor(this.monotonicNumInstalledApps);
        }
        get freeBalance() {
            if (this.freeBalanceAppInstance) {
                return this.freeBalanceAppInstance;
            }
            throw new Error("There is no free balance app instance installed in this state channel");
        }
        getMultisigOwnerAddrOf(xpub) {
            const [alice, bob] = this.multisigOwners;
            const topLevelKey = xkeyKthAddress(xpub, 0);
            if (topLevelKey !== alice && topLevelKey !== bob) {
                throw new Error(`getMultisigOwnerAddrOf received invalid xpub not in multisigOwners: ${xpub}`);
            }
            return topLevelKey;
        }
        getFreeBalanceAddrOf(xpub) {
            const [alice, bob] = this.freeBalanceAppInstance.participants;
            const topLevelKey = xkeyKthAddress(xpub, 0);
            if (topLevelKey !== alice && topLevelKey !== bob) {
                throw new Error(`getFreeBalanceAddrOf received invalid xpub without free balance account: ${xpub}`);
            }
            return topLevelKey;
        }
        addActiveAppAndIncrementFreeBalance(activeApp, tokenIndexedIncrements) {
            const json = this.freeBalance.state;
            const freeBalanceState = deserializeFreeBalanceState(json);
            for (const tokenAddress of Object.keys(tokenIndexedIncrements)) {
                freeBalanceState.balancesIndexedByToken[tokenAddress] = Object.entries(merge(getBalancesFromFreeBalanceAppInstance(this.freeBalance, tokenAddress), tokenIndexedIncrements[tokenAddress])).map(([to, amount]) => ({ to, amount }));
            }
            freeBalanceState.activeAppsMap[activeApp] = true;
            return new StateChannel(this.multisigAddress, this.userNeuteredExtendedKeys, this.appInstances, this.singleAssetTwoPartyIntermediaryAgreements, this.freeBalance.setState(serializeFreeBalanceState(freeBalanceState)), this.monotonicNumInstalledApps, this.createdAt);
        }
        removeActiveAppAndIncrementFreeBalance(activeApp, tokenIndexedIncrements) {
            const json = this.freeBalance.state;
            const freeBalanceState = deserializeFreeBalanceState(json);
            if (!freeBalanceState.activeAppsMap[activeApp]) {
                throw new Error("Cannot uninstall app that is not installed in the first place");
            }
            delete freeBalanceState.activeAppsMap[activeApp];
            for (const tokenAddress of Object.keys(tokenIndexedIncrements)) {
                freeBalanceState.balancesIndexedByToken[tokenAddress] = Object.entries(merge(getBalancesFromFreeBalanceAppInstance(this.freeBalance, tokenAddress), tokenIndexedIncrements[tokenAddress])).map(([to, amount]) => ({ to, amount }));
            }
            return new StateChannel(this.multisigAddress, this.userNeuteredExtendedKeys, this.appInstances, this.singleAssetTwoPartyIntermediaryAgreements, this.freeBalance.setState(serializeFreeBalanceState(freeBalanceState)), this.monotonicNumInstalledApps, this.createdAt);
        }
        setFreeBalance(newState) {
            return new StateChannel(this.multisigAddress, this.userNeuteredExtendedKeys, this.appInstances, this.singleAssetTwoPartyIntermediaryAgreements, this.freeBalance.setState(serializeFreeBalanceState(newState)), this.monotonicNumInstalledApps, this.createdAt);
        }
        static setupChannel(freeBalanceAppAddress, multisigAddress, userNeuteredExtendedKeys, freeBalanceTimeout) {
            return new StateChannel(multisigAddress, userNeuteredExtendedKeys, new Map([]), new Map(), createFreeBalance(multisigAddress, userNeuteredExtendedKeys, freeBalanceAppAddress, freeBalanceTimeout || HARD_CODED_ASSUMPTIONS$1.freeBalanceDefaultTimeout), 1);
        }
        static createEmptyChannel(multisigAddress, userNeuteredExtendedKeys) {
            return new StateChannel(multisigAddress, userNeuteredExtendedKeys, new Map(), new Map(), undefined, 1);
        }
        addAppInstance(appInstance) {
            if (appInstance.appSeqNo !== this.numInstalledApps) {
                throw new Error(`Tried to install app with sequence number ${appInstance.appSeqNo} into channel with ${this.numInstalledApps} active apps`);
            }
            const appInstances = new Map(this.appInstances.entries());
            appInstances.set(appInstance.identityHash, appInstance);
            return new StateChannel(this.multisigAddress, this.userNeuteredExtendedKeys, appInstances, this.singleAssetTwoPartyIntermediaryAgreements, this.freeBalanceAppInstance, this.monotonicNumInstalledApps + 1, this.createdAt);
        }
        removeAppInstance(appInstanceId) {
            const appInstances = new Map(this.appInstances.entries());
            appInstances.delete(appInstanceId);
            return new StateChannel(this.multisigAddress, this.userNeuteredExtendedKeys, appInstances, this.singleAssetTwoPartyIntermediaryAgreements, this.freeBalanceAppInstance, this.monotonicNumInstalledApps, this.createdAt);
        }
        setState(appInstanceIdentityHash, state) {
            const appInstance = this.getAppInstance(appInstanceIdentityHash);
            const appInstances = new Map(this.appInstances.entries());
            appInstances.set(appInstanceIdentityHash, appInstance.setState(state));
            return new StateChannel(this.multisigAddress, this.userNeuteredExtendedKeys, appInstances, this.singleAssetTwoPartyIntermediaryAgreements, this.freeBalanceAppInstance, this.monotonicNumInstalledApps, this.createdAt);
        }
        addSingleAssetTwoPartyIntermediaryAgreement(targetIdentityHash, agreement, decrements, tokenAddress) {
            const evaaInstances = new Map(this.singleAssetTwoPartyIntermediaryAgreements.entries());
            evaaInstances.set(targetIdentityHash, agreement);
            return new StateChannel(this.multisigAddress, this.userNeuteredExtendedKeys, this.appInstances, evaaInstances, this.freeBalanceAppInstance, this.monotonicNumInstalledApps + 1, this.createdAt).addActiveAppAndIncrementFreeBalance(targetIdentityHash, {
                [tokenAddress]: flip(decrements)
            });
        }
        removeSingleAssetTwoPartyIntermediaryAgreement(targetIdentityHash, increments, tokenAddress) {
            const singleAssetTwoPartyIntermediaryAgreements = new Map(this.singleAssetTwoPartyIntermediaryAgreements.entries());
            if (!singleAssetTwoPartyIntermediaryAgreements.delete(targetIdentityHash)) {
                throw new Error(`cannot find agreement with target hash ${targetIdentityHash}`);
            }
            return new StateChannel(this.multisigAddress, this.userNeuteredExtendedKeys, this.appInstances, singleAssetTwoPartyIntermediaryAgreements, this.freeBalanceAppInstance, this.monotonicNumInstalledApps, this.createdAt).removeActiveAppAndIncrementFreeBalance(targetIdentityHash, {
                [tokenAddress]: increments
            });
        }
        installApp(appInstance, tokenIndexedDecrements) {
            if (appInstance.appSeqNo !== this.monotonicNumInstalledApps) {
                throw new Error("AppInstance passed to installApp has incorrect appSeqNo");
            }
            else {
                const participants = this.getSigningKeysFor(appInstance.appSeqNo);
                if (!participants.every((v, idx) => v === appInstance.participants[idx])) {
                    throw new Error("AppInstance passed to installApp has incorrect participants");
                }
            }
            const appInstances = new Map(this.appInstances.entries());
            appInstances.set(appInstance.identityHash, appInstance);
            return new StateChannel(this.multisigAddress, this.userNeuteredExtendedKeys, appInstances, this.singleAssetTwoPartyIntermediaryAgreements, this.freeBalanceAppInstance, this.monotonicNumInstalledApps + 1, this.createdAt).addActiveAppAndIncrementFreeBalance(appInstance.identityHash, flipTokenIndexedBalances(tokenIndexedDecrements));
        }
        uninstallApp(appInstanceIdentityHash, tokenIndexedIncrements) {
            const appToBeUninstalled = this.getAppInstance(appInstanceIdentityHash);
            if (appToBeUninstalled.identityHash !== appInstanceIdentityHash) {
                throw new Error(`Consistency error: app stored under key ${appInstanceIdentityHash} has identityHah ${appToBeUninstalled.identityHash}`);
            }
            const appInstances = new Map(this.appInstances.entries());
            if (!appInstances.delete(appToBeUninstalled.identityHash)) {
                throw new Error(`Consistency error: managed to call get on ${appInstanceIdentityHash} but failed to call delete`);
            }
            return new StateChannel(this.multisigAddress, this.userNeuteredExtendedKeys, appInstances, this.singleAssetTwoPartyIntermediaryAgreements, this.freeBalanceAppInstance, this.monotonicNumInstalledApps, this.createdAt).removeActiveAppAndIncrementFreeBalance(appInstanceIdentityHash, tokenIndexedIncrements);
        }
        getSingleAssetTwoPartyIntermediaryAgreementFromVirtualApp(key) {
            const ret = this.singleAssetTwoPartyIntermediaryAgreements.get(key);
            if (!ret) {
                throw new Error(`Could not find any eth virtual app agreements with virtual app ${key}`);
            }
            return ret;
        }
        toJson() {
            return {
                multisigAddress: this.multisigAddress,
                userNeuteredExtendedKeys: this.userNeuteredExtendedKeys,
                appInstances: [...this.appInstances.entries()].map((appInstanceEntry) => {
                    return [appInstanceEntry[0], appInstanceEntry[1].toJson()];
                }),
                freeBalanceAppInstance: !!this.freeBalanceAppInstance
                    ? this.freeBalanceAppInstance.toJson()
                    :
                        undefined,
                monotonicNumInstalledApps: this.monotonicNumInstalledApps,
                singleAssetTwoPartyIntermediaryAgreements: [
                    ...this.singleAssetTwoPartyIntermediaryAgreements.entries()
                ].map(([key, val]) => [
                    key,
                    Object.assign({}, val, { capitalProvided: { _hex: val.capitalProvided.toHexString() } })
                ]),
                createdAt: this.createdAt
            };
        }
        static fromJson(json) {
            return new StateChannel(json.multisigAddress, json.userNeuteredExtendedKeys, new Map([...Object.values(json.appInstances || [])].map((appInstanceEntry) => {
                return [
                    appInstanceEntry[0],
                    AppInstance.fromJson(appInstanceEntry[1])
                ];
            })), new Map((json.singleAssetTwoPartyIntermediaryAgreements || []).map(([key, val]) => [
                key,
                Object.assign({}, val, { capitalProvided: utils.bigNumberify(val.capitalProvided._hex) })
            ])), json.freeBalanceAppInstance
                ? AppInstance.fromJson(json.freeBalanceAppInstance)
                : undefined, json.monotonicNumInstalledApps, json.createdAt);
        }
    }

    var abi$1=[{constant:true,inputs:[{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"data",type:"bytes"},{name:"operation",type:"uint8"}],name:"getTransactionHash",outputs:[{name:"",type:"bytes32"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"signatures",type:"bytes"},{name:"txHash",type:"bytes32"},{name:"signers",type:"address[]"}],name:"verifySignatures",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"pure",type:"function"},{constant:false,inputs:[{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"data",type:"bytes"},{name:"operation",type:"uint8"},{name:"signatures",type:"bytes"}],name:"execTransaction",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"getOwners",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"signatures",type:"bytes"},{name:"pos",type:"uint256"}],name:"signatureSplit",outputs:[{name:"v",type:"uint8"},{name:"r",type:"bytes32"},{name:"s",type:"bytes32"}],payable:false,stateMutability:"pure",type:"function"},{constant:false,inputs:[{name:"owners",type:"address[]"}],name:"setup",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"messageSignature",type:"bytes"},{name:"txHash",type:"bytes32"},{name:"pos",type:"uint256"}],name:"recoverKey",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"pure",type:"function"},{payable:true,stateMutability:"payable",type:"fallback"}];var evm$1={bytecode:{linkReferences:{},object:"608060405234801561001057600080fd5b506110e6806100206000396000f3fe6080604052600436106100705760003560e01c8063a0e67e2b1161004e578063a0e67e2b14610499578063b817dcc214610505578063bd5b853b146105ff578063d6a1f669146106c457610070565b8063300c661f1461007257806332c5d69b1461018557806365bc10d314610303575b005b34801561007e57600080fd5b5061016f6004803603608081101561009557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156100dc57600080fd5b8201836020820111156100ee57600080fd5b8035906020019184600183028401116401000000008311171561011057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff1690602001909291905050506107e0565b6040518082815260200191505060405180910390f35b34801561019157600080fd5b506102e9600480360360608110156101a857600080fd5b81019080803590602001906401000000008111156101c557600080fd5b8201836020820111156101d757600080fd5b803590602001918460018302840111640100000000831117156101f957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019064010000000081111561026657600080fd5b82018360208201111561027857600080fd5b8035906020019184602083028401116401000000008311171561029a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610972565b604051808215151515815260200191505060405180910390f35b34801561030f57600080fd5b50610497600480360360a081101561032657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561036d57600080fd5b82018360208201111561037f57600080fd5b803590602001918460018302840111640100000000831117156103a157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff1690602001909291908035906020019064010000000081111561041157600080fd5b82018360208201111561042357600080fd5b8035906020019184600183028401116401000000008311171561044557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610b2a565b005b3480156104a557600080fd5b506104ae610c5f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104f15780820151818401526020810190506104d6565b505050509050019250505060405180910390f35b34801561051157600080fd5b506105d56004803603604081101561052857600080fd5b810190808035906020019064010000000081111561054557600080fd5b82018360208201111561055757600080fd5b8035906020019184600183028401116401000000008311171561057957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610ced565b604051808460ff1660ff168152602001838152602001828152602001935050505060405180910390f35b34801561060b57600080fd5b506106c26004803603602081101561062257600080fd5b810190808035906020019064010000000081111561063f57600080fd5b82018360208201111561065157600080fd5b8035906020019184602083028401116401000000008311171561067357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610d1c565b005b3480156106d057600080fd5b5061079e600480360360608110156106e757600080fd5b810190808035906020019064010000000081111561070457600080fd5b82018360208201111561071657600080fd5b8035906020019184600183028401116401000000008311171561073857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050610db1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000601960f81b60028686868660018111156107f857fe5b60405160200180877effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260010186805480156108ad57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610863575b50508573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140184815260200183805190602001908083835b6020831061091957805182526020820191506020810190506020830392506108f6565b6001836020036101000a0380198251168184511680821785525050505050509050018260ff1660ff1660f81b81526001019650505050505050604051602081830303815290604052805190602001209050949350505050565b6000806000905060008090505b8351811015610b1d57610993868683610db1565b73ffffffffffffffffffffffffffffffffffffffff168482815181106109b557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610a46576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f496e76616c6964207369676e617475726500000000000000000000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16848281518110610a6957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1611610afa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f5369676e657273206e6f7420696e20617363656e64696e67206f72646572000081525060200191505060405180910390fd5b838181518110610b0657fe5b60200260200101519150808060010191505061097f565b5060019150509392505050565b6000610b38868686866107e0565b9050610bcb82826002805480602002602001604051908101604052809291908181526020018280548015610bc157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b77575b5050505050610972565b610c20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180611083602f913960400191505060405180910390fd5b610c2c86868686610e40565b600180600083815260200190815260200160002060006101000a81548160ff021916908315150217905550505050505050565b60606002805480602002602001604051908101604052809291908181526020018280548015610ce357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c99575b5050505050905090565b60008060008360410260208101860151925060408101860151915060ff60418201870151169350509250925092565b600060028054905014610d97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f436f6e747261637420686173206265656e20736574207570206265666f72650081525060200191505060405180910390fd5b8060029080519060200190610dad929190610fb5565b5050565b600080600080610dc18786610ced565b80935081945082955050505060018684848460405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610e2a573d6000803e3d6000fd5b5050506020604051035193505050509392505050565b60006001811115610e4d57fe5b816001811115610e5957fe5b1415610ee157610e6a848484610f83565b610edc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6578656375746543616c6c206661696c6564000000000000000000000000000081525060200191505060405180910390fd5b610f7d565b600180811115610eed57fe5b816001811115610ef957fe5b1415610f7c57610f098483610f9d565b610f7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6578656375746544656c656761746543616c6c206661696c656400000000000081525060200191505060405180910390fd5b5b5b50505050565b60008060008351602085018688600019f190509392505050565b600080600083516020850186600019f4905092915050565b82805482825590600052602060002090810192821561102e579160200282015b8281111561102d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610fd5565b5b50905061103b919061103f565b5090565b61107f91905b8082111561107b57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101611045565b5090565b9056fe496e76616c6964207369676e617475726573207375626d697474656420746f20657865635472616e73616374696f6ea265627a7a72305820c5e7099f53d3807593767e72c47d26d193e938d54a93f9857e5834b13eef693e64736f6c634300050a0032",opcodes:"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10E6 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x70 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA0E67E2B GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xA0E67E2B EQ PUSH2 0x499 JUMPI DUP1 PUSH4 0xB817DCC2 EQ PUSH2 0x505 JUMPI DUP1 PUSH4 0xBD5B853B EQ PUSH2 0x5FF JUMPI DUP1 PUSH4 0xD6A1F669 EQ PUSH2 0x6C4 JUMPI PUSH2 0x70 JUMP JUMPDEST DUP1 PUSH4 0x300C661F EQ PUSH2 0x72 JUMPI DUP1 PUSH4 0x32C5D69B EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0x65BC10D3 EQ PUSH2 0x303 JUMPI JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x7E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x29A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x972 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x497 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x36D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x445 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0xB2A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AE PUSH2 0xC5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4F1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4D6 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x511 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x528 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x545 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x557 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x579 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xCED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP5 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x60B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x622 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x63F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x673 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0xD1C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x79E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x6E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x704 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x716 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x738 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xDB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x2 DUP7 DUP7 DUP7 DUP7 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x7F8 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP8 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP7 DUP1 SLOAD DUP1 ISZERO PUSH2 0x8AD JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x863 JUMPI JUMPDEST POP POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x919 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x8F6 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP3 PUSH1 0xFF AND PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xB1D JUMPI PUSH2 0x993 DUP7 DUP7 DUP4 PUSH2 0xDB1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9B5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA46 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x496E76616C6964207369676E6174757265000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA69 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0xAFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5369676E657273206E6F7420696E20617363656E64696E67206F726465720000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xB06 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x97F JUMP JUMPDEST POP PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB38 DUP7 DUP7 DUP7 DUP7 PUSH2 0x7E0 JUMP JUMPDEST SWAP1 POP PUSH2 0xBCB DUP3 DUP3 PUSH1 0x2 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xB77 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x972 JUMP JUMPDEST PUSH2 0xC20 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1083 PUSH1 0x2F SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC2C DUP7 DUP7 DUP7 DUP7 PUSH2 0xE40 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xCE3 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xC99 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x41 MUL PUSH1 0x20 DUP2 ADD DUP7 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP2 ADD DUP7 ADD MLOAD SWAP2 POP PUSH1 0xFF PUSH1 0x41 DUP3 ADD DUP8 ADD MLOAD AND SWAP4 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP1 SLOAD SWAP1 POP EQ PUSH2 0xD97 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x436F6E747261637420686173206265656E20736574207570206265666F726500 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0xDAD SWAP3 SWAP2 SWAP1 PUSH2 0xFB5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0xDC1 DUP8 DUP7 PUSH2 0xCED JUMP JUMPDEST DUP1 SWAP4 POP DUP2 SWAP5 POP DUP3 SWAP6 POP POP POP POP PUSH1 0x1 DUP7 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE2A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xE4D JUMPI INVALID JUMPDEST DUP2 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xE59 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xEE1 JUMPI PUSH2 0xE6A DUP5 DUP5 DUP5 PUSH2 0xF83 JUMP JUMPDEST PUSH2 0xEDC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6578656375746543616C6C206661696C65640000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF7D JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0xEED JUMPI INVALID JUMPDEST DUP2 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xEF9 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xF7C JUMPI PUSH2 0xF09 DUP5 DUP4 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0xF7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6578656375746544656C656761746543616C6C206661696C6564000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 MLOAD PUSH1 0x20 DUP6 ADD DUP7 DUP9 PUSH1 0x0 NOT CALL SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 MLOAD PUSH1 0x20 DUP6 ADD DUP7 PUSH1 0x0 NOT DELEGATECALL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x102E JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x102D JUMPI DUP3 MLOAD DUP3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xFD5 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x103B SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x107F SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x107B JUMPI PUSH1 0x0 DUP2 DUP2 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x1045 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID 0x49 PUSH15 0x76616C6964207369676E6174757265 PUSH20 0x207375626D697474656420746F20657865635472 PUSH2 0x6E73 PUSH2 0x6374 PUSH10 0x6F6EA265627A7A723058 KECCAK256 0xc5 0xe7 MULMOD SWAP16 MSTORE8 0xd3 DUP1 PUSH22 0x93767E72C47D26D193E938D54A93F9857E5834B13EEF PUSH10 0x3E64736F6C634300050A STOP ORIGIN ",sourceMap:"481:3594:25:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;481:3594:25;;;;;;;"},deployedBytecode:{linkReferences:{},object:"6080604052600436106100705760003560e01c8063a0e67e2b1161004e578063a0e67e2b14610499578063b817dcc214610505578063bd5b853b146105ff578063d6a1f669146106c457610070565b8063300c661f1461007257806332c5d69b1461018557806365bc10d314610303575b005b34801561007e57600080fd5b5061016f6004803603608081101561009557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156100dc57600080fd5b8201836020820111156100ee57600080fd5b8035906020019184600183028401116401000000008311171561011057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff1690602001909291905050506107e0565b6040518082815260200191505060405180910390f35b34801561019157600080fd5b506102e9600480360360608110156101a857600080fd5b81019080803590602001906401000000008111156101c557600080fd5b8201836020820111156101d757600080fd5b803590602001918460018302840111640100000000831117156101f957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019064010000000081111561026657600080fd5b82018360208201111561027857600080fd5b8035906020019184602083028401116401000000008311171561029a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610972565b604051808215151515815260200191505060405180910390f35b34801561030f57600080fd5b50610497600480360360a081101561032657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561036d57600080fd5b82018360208201111561037f57600080fd5b803590602001918460018302840111640100000000831117156103a157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff1690602001909291908035906020019064010000000081111561041157600080fd5b82018360208201111561042357600080fd5b8035906020019184600183028401116401000000008311171561044557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610b2a565b005b3480156104a557600080fd5b506104ae610c5f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104f15780820151818401526020810190506104d6565b505050509050019250505060405180910390f35b34801561051157600080fd5b506105d56004803603604081101561052857600080fd5b810190808035906020019064010000000081111561054557600080fd5b82018360208201111561055757600080fd5b8035906020019184600183028401116401000000008311171561057957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610ced565b604051808460ff1660ff168152602001838152602001828152602001935050505060405180910390f35b34801561060b57600080fd5b506106c26004803603602081101561062257600080fd5b810190808035906020019064010000000081111561063f57600080fd5b82018360208201111561065157600080fd5b8035906020019184602083028401116401000000008311171561067357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610d1c565b005b3480156106d057600080fd5b5061079e600480360360608110156106e757600080fd5b810190808035906020019064010000000081111561070457600080fd5b82018360208201111561071657600080fd5b8035906020019184600183028401116401000000008311171561073857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050610db1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000601960f81b60028686868660018111156107f857fe5b60405160200180877effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260010186805480156108ad57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610863575b50508573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140184815260200183805190602001908083835b6020831061091957805182526020820191506020810190506020830392506108f6565b6001836020036101000a0380198251168184511680821785525050505050509050018260ff1660ff1660f81b81526001019650505050505050604051602081830303815290604052805190602001209050949350505050565b6000806000905060008090505b8351811015610b1d57610993868683610db1565b73ffffffffffffffffffffffffffffffffffffffff168482815181106109b557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610a46576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f496e76616c6964207369676e617475726500000000000000000000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16848281518110610a6957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1611610afa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f5369676e657273206e6f7420696e20617363656e64696e67206f72646572000081525060200191505060405180910390fd5b838181518110610b0657fe5b60200260200101519150808060010191505061097f565b5060019150509392505050565b6000610b38868686866107e0565b9050610bcb82826002805480602002602001604051908101604052809291908181526020018280548015610bc157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b77575b5050505050610972565b610c20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180611083602f913960400191505060405180910390fd5b610c2c86868686610e40565b600180600083815260200190815260200160002060006101000a81548160ff021916908315150217905550505050505050565b60606002805480602002602001604051908101604052809291908181526020018280548015610ce357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c99575b5050505050905090565b60008060008360410260208101860151925060408101860151915060ff60418201870151169350509250925092565b600060028054905014610d97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f436f6e747261637420686173206265656e20736574207570206265666f72650081525060200191505060405180910390fd5b8060029080519060200190610dad929190610fb5565b5050565b600080600080610dc18786610ced565b80935081945082955050505060018684848460405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610e2a573d6000803e3d6000fd5b5050506020604051035193505050509392505050565b60006001811115610e4d57fe5b816001811115610e5957fe5b1415610ee157610e6a848484610f83565b610edc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6578656375746543616c6c206661696c6564000000000000000000000000000081525060200191505060405180910390fd5b610f7d565b600180811115610eed57fe5b816001811115610ef957fe5b1415610f7c57610f098483610f9d565b610f7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6578656375746544656c656761746543616c6c206661696c656400000000000081525060200191505060405180910390fd5b5b5b50505050565b60008060008351602085018688600019f190509392505050565b600080600083516020850186600019f4905092915050565b82805482825590600052602060002090810192821561102e579160200282015b8281111561102d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610fd5565b5b50905061103b919061103f565b5090565b61107f91905b8082111561107b57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101611045565b5090565b9056fe496e76616c6964207369676e617475726573207375626d697474656420746f20657865635472616e73616374696f6ea265627a7a72305820c5e7099f53d3807593767e72c47d26d193e938d54a93f9857e5834b13eef693e64736f6c634300050a0032",opcodes:"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x70 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA0E67E2B GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xA0E67E2B EQ PUSH2 0x499 JUMPI DUP1 PUSH4 0xB817DCC2 EQ PUSH2 0x505 JUMPI DUP1 PUSH4 0xBD5B853B EQ PUSH2 0x5FF JUMPI DUP1 PUSH4 0xD6A1F669 EQ PUSH2 0x6C4 JUMPI PUSH2 0x70 JUMP JUMPDEST DUP1 PUSH4 0x300C661F EQ PUSH2 0x72 JUMPI DUP1 PUSH4 0x32C5D69B EQ PUSH2 0x185 JUMPI DUP1 PUSH4 0x65BC10D3 EQ PUSH2 0x303 JUMPI JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x16F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x80 DUP2 LT ISZERO PUSH2 0x95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x110 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x7E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x191 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x1A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x1F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x278 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x29A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x972 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x497 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0xA0 DUP2 LT ISZERO PUSH2 0x326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x36D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD PUSH1 0xFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x445 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0xB2A JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AE PUSH2 0xC5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4F1 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x4D6 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x511 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x5D5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x528 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x545 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x557 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x579 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xCED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP5 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP4 POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x60B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6C2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x622 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x63F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x651 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x20 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x673 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0xD1C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x79E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x6E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x704 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x716 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x738 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0xDB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x19 PUSH1 0xF8 SHL PUSH1 0x2 DUP7 DUP7 DUP7 DUP7 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x7F8 JUMPI INVALID JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP8 PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH31 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 MSTORE PUSH1 0x1 ADD DUP7 DUP1 SLOAD DUP1 ISZERO PUSH2 0x8AD JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x863 JUMPI JUMPDEST POP POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE PUSH1 0x14 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x919 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x8F6 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP3 PUSH1 0xFF AND PUSH1 0xFF AND PUSH1 0xF8 SHL DUP2 MSTORE PUSH1 0x1 ADD SWAP7 POP POP POP POP POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0xB1D JUMPI PUSH2 0x993 DUP7 DUP7 DUP4 PUSH2 0xDB1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x9B5 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xA46 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x11 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x496E76616C6964207369676E6174757265000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0xA69 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0xAFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x5369676E657273206E6F7420696E20617363656E64696E67206F726465720000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xB06 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x97F JUMP JUMPDEST POP PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB38 DUP7 DUP7 DUP7 DUP7 PUSH2 0x7E0 JUMP JUMPDEST SWAP1 POP PUSH2 0xBCB DUP3 DUP3 PUSH1 0x2 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xBC1 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xB77 JUMPI JUMPDEST POP POP POP POP POP PUSH2 0x972 JUMP JUMPDEST PUSH2 0xC20 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x2F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x1083 PUSH1 0x2F SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC2C DUP7 DUP7 DUP7 DUP7 PUSH2 0xE40 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xCE3 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0xC99 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x41 MUL PUSH1 0x20 DUP2 ADD DUP7 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP2 ADD DUP7 ADD MLOAD SWAP2 POP PUSH1 0xFF PUSH1 0x41 DUP3 ADD DUP8 ADD MLOAD AND SWAP4 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP1 SLOAD SWAP1 POP EQ PUSH2 0xD97 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1F DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x436F6E747261637420686173206265656E20736574207570206265666F726500 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0xDAD SWAP3 SWAP2 SWAP1 PUSH2 0xFB5 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0xDC1 DUP8 DUP7 PUSH2 0xCED JUMP JUMPDEST DUP1 SWAP4 POP DUP2 SWAP5 POP DUP3 SWAP6 POP POP POP POP PUSH1 0x1 DUP7 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH1 0xFF AND PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE2A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xE4D JUMPI INVALID JUMPDEST DUP2 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xE59 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xEE1 JUMPI PUSH2 0xE6A DUP5 DUP5 DUP5 PUSH2 0xF83 JUMP JUMPDEST PUSH2 0xEDC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6578656375746543616C6C206661696C65640000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xF7D JUMP JUMPDEST PUSH1 0x1 DUP1 DUP2 GT ISZERO PUSH2 0xEED JUMPI INVALID JUMPDEST DUP2 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0xEF9 JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xF7C JUMPI PUSH2 0xF09 DUP5 DUP4 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0xF7B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1A DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x6578656375746544656C656761746543616C6C206661696C6564000000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 MLOAD PUSH1 0x20 DUP6 ADD DUP7 DUP9 PUSH1 0x0 NOT CALL SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 MLOAD PUSH1 0x20 DUP6 ADD DUP7 PUSH1 0x0 NOT DELEGATECALL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x102E JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x102D JUMPI DUP3 MLOAD DUP3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xFD5 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x103B SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x107F SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x107B JUMPI PUSH1 0x0 DUP2 DUP2 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x1045 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP INVALID 0x49 PUSH15 0x76616C6964207369676E6174757265 PUSH20 0x207375626D697474656420746F20657865635472 PUSH2 0x6E73 PUSH2 0x6374 PUSH10 0x6F6EA265627A7A723058 KECCAK256 0xc5 0xe7 MULMOD SWAP16 MSTORE8 0xd3 DUP1 PUSH22 0x93767E72C47D26D193E938D54A93F9857E5834B13EEF PUSH10 0x3E64736F6C634300050A STOP ORIGIN ",sourceMap:"481:3594:25:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2419:272;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2419:272:25;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;2419:272:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;2419:272:25;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2419:272:25;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;2419:272:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2419:272:25;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1242:472:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1242:472:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1242:472:14;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1242:472:14;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1242:472:14;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1242:472:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1242:472:14;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1242:472:14;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1242:472:14;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;1242:472:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1242:472:14;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1671:459:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1671:459:25;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1671:459:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1671:459:25;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1671:459:25;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1671:459:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1671:459:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1671:459:25;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1671:459:25;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1671:459:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1671:459:25;;;;;;;;;;;;;;;:::i;:::-;;2818:99;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2818:99:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;2818:99:25;;;;;;;;;;;;;;;;;1883:825:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1883:825:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1883:825:14;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1883:825:14;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1883:825:14;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1883:825:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1883:825:14;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;839:143:25;;8:9:-1;5:2;;;30:1;27;20:12;5:2;839:143:25;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;839:143:25;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;839:143:25;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;839:143:25;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;839:143:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;839:143:25;;;;;;;;;;;;;;;:::i;:::-;;733:282:14;;8:9:-1;5:2;;;30:1;27;20:12;5:2;733:282:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;733:282:14;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;733:282:14;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;733:282:14;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;733:282:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;733:282:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2419:272:25;2567:7;2630:4;2625:10;;2637:7;2646:2;2650:5;2657:4;2669:9;2663:16;;;;;;;;2608:72;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;2608:72:25;;;;;;;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2608:72:25;;;2591:95;;;;;;2584:102;;2419:272;;;;;;:::o;1242:472:14:-;1384:4;1398:18;1427:1;1398:31;;1440:9;1452:1;1440:13;;1435:258;1459:7;:14;1455:1;:18;1435:258;;;1519:33;1530:10;1542:6;1550:1;1519:10;:33::i;:::-;1505:47;;:7;1513:1;1505:10;;;;;;;;;;;;;;:47;;;1488:93;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1610:10;1597:23;;:7;1605:1;1597:10;;;;;;;;;;;;;;:23;;;1589:66;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1676:7;1684:1;1676:10;;;;;;;;;;;;;;1663:23;;1475:3;;;;;;;1435:258;;;;1705:4;1698:11;;;1242:472;;;;;:::o;1671:459:25:-;1831:23;1857:46;1876:2;1880:5;1887:4;1893:9;1857:18;:46::i;:::-;1831:72;;1925:54;1942:10;1954:15;1971:7;1925:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:16;:54::i;:::-;1910:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2049:35;2057:2;2061:5;2068:4;2074:9;2049:7;:35::i;:::-;2121:4;2091:10;:27;2102:15;2091:27;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;1671:459;;;;;;:::o;2818:99::-;2872:16;2905:7;2898:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2818:99;:::o;1883:825:14:-;1978:7;1987:9;1998;2270:3;2264:4;2260:14;2326:4;2312:12;2308:23;2296:10;2292:40;2286:47;2281:52;;2385:4;2371:12;2367:23;2355:10;2351:40;2345:47;2340:52;;2693:4;2684;2670:12;2666:23;2654:10;2650:40;2644:47;2640:58;2635:63;;2232:472;;;;;;:::o;839:143:25:-;918:1;900:7;:14;;;;:19;892:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;971:6;961:7;:16;;;;;;;;;;;;:::i;:::-;;839:143;:::o;733:282:14:-;862:7;879;892:9;907;934:37;949:16;967:3;934:14;:37::i;:::-;922:49;;;;;;;;;;;;984:26;994:6;1002:1;1005;1008;984:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;984:26:14;;;;;;;;977:33;;;;;733:282;;;;;:::o;2996:354:25:-;3138:14;3125:27;;;;;;;;:9;:27;;;;;;;;;3121:224;;;3168:28;3180:2;3184:5;3191:4;3168:11;:28::i;:::-;3160:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3121:224;;;3247:22;3234:35;;;;;;;;:9;:35;;;;;;;;;3230:115;;;3285:29;3305:2;3309:4;3285:19;:29::i;:::-;3277:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3230:115;3121:224;2996:354;;;;:::o;3498:212::-;3591:12;3698:1;3695;3688:4;3682:11;3675:4;3669;3665:15;3658:5;3654:2;3650:1;3646:6;3641:59;3630:70;;3622:84;;;;;:::o;3866:206::-;3952:12;4060:1;4057;4050:4;4044:11;4037:4;4031;4027:15;4023:2;4019:1;4015:6;4002:60;3991:71;;3983:85;;;;:::o;481:3594::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o"}};var bytecode$1="608060405234801561001057600080fd5b506110e6806100206000396000f3fe6080604052600436106100705760003560e01c8063a0e67e2b1161004e578063a0e67e2b14610499578063b817dcc214610505578063bd5b853b146105ff578063d6a1f669146106c457610070565b8063300c661f1461007257806332c5d69b1461018557806365bc10d314610303575b005b34801561007e57600080fd5b5061016f6004803603608081101561009557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156100dc57600080fd5b8201836020820111156100ee57600080fd5b8035906020019184600183028401116401000000008311171561011057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff1690602001909291905050506107e0565b6040518082815260200191505060405180910390f35b34801561019157600080fd5b506102e9600480360360608110156101a857600080fd5b81019080803590602001906401000000008111156101c557600080fd5b8201836020820111156101d757600080fd5b803590602001918460018302840111640100000000831117156101f957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019064010000000081111561026657600080fd5b82018360208201111561027857600080fd5b8035906020019184602083028401116401000000008311171561029a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610972565b604051808215151515815260200191505060405180910390f35b34801561030f57600080fd5b50610497600480360360a081101561032657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561036d57600080fd5b82018360208201111561037f57600080fd5b803590602001918460018302840111640100000000831117156103a157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803560ff1690602001909291908035906020019064010000000081111561041157600080fd5b82018360208201111561042357600080fd5b8035906020019184600183028401116401000000008311171561044557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610b2a565b005b3480156104a557600080fd5b506104ae610c5f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156104f15780820151818401526020810190506104d6565b505050509050019250505060405180910390f35b34801561051157600080fd5b506105d56004803603604081101561052857600080fd5b810190808035906020019064010000000081111561054557600080fd5b82018360208201111561055757600080fd5b8035906020019184600183028401116401000000008311171561057957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610ced565b604051808460ff1660ff168152602001838152602001828152602001935050505060405180910390f35b34801561060b57600080fd5b506106c26004803603602081101561062257600080fd5b810190808035906020019064010000000081111561063f57600080fd5b82018360208201111561065157600080fd5b8035906020019184602083028401116401000000008311171561067357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610d1c565b005b3480156106d057600080fd5b5061079e600480360360608110156106e757600080fd5b810190808035906020019064010000000081111561070457600080fd5b82018360208201111561071657600080fd5b8035906020019184600183028401116401000000008311171561073857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190505050610db1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000601960f81b60028686868660018111156107f857fe5b60405160200180877effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260010186805480156108ad57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610863575b50508573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660601b815260140184815260200183805190602001908083835b6020831061091957805182526020820191506020810190506020830392506108f6565b6001836020036101000a0380198251168184511680821785525050505050509050018260ff1660ff1660f81b81526001019650505050505050604051602081830303815290604052805190602001209050949350505050565b6000806000905060008090505b8351811015610b1d57610993868683610db1565b73ffffffffffffffffffffffffffffffffffffffff168482815181106109b557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610a46576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f496e76616c6964207369676e617475726500000000000000000000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16848281518110610a6957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1611610afa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f5369676e657273206e6f7420696e20617363656e64696e67206f72646572000081525060200191505060405180910390fd5b838181518110610b0657fe5b60200260200101519150808060010191505061097f565b5060019150509392505050565b6000610b38868686866107e0565b9050610bcb82826002805480602002602001604051908101604052809291908181526020018280548015610bc157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610b77575b5050505050610972565b610c20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180611083602f913960400191505060405180910390fd5b610c2c86868686610e40565b600180600083815260200190815260200160002060006101000a81548160ff021916908315150217905550505050505050565b60606002805480602002602001604051908101604052809291908181526020018280548015610ce357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c99575b5050505050905090565b60008060008360410260208101860151925060408101860151915060ff60418201870151169350509250925092565b600060028054905014610d97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f436f6e747261637420686173206265656e20736574207570206265666f72650081525060200191505060405180910390fd5b8060029080519060200190610dad929190610fb5565b5050565b600080600080610dc18786610ced565b80935081945082955050505060018684848460405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015610e2a573d6000803e3d6000fd5b5050506020604051035193505050509392505050565b60006001811115610e4d57fe5b816001811115610e5957fe5b1415610ee157610e6a848484610f83565b610edc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6578656375746543616c6c206661696c6564000000000000000000000000000081525060200191505060405180910390fd5b610f7d565b600180811115610eed57fe5b816001811115610ef957fe5b1415610f7c57610f098483610f9d565b610f7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f6578656375746544656c656761746543616c6c206661696c656400000000000081525060200191505060405180910390fd5b5b5b50505050565b60008060008351602085018688600019f190509392505050565b600080600083516020850186600019f4905092915050565b82805482825590600052602060002090810192821561102e579160200282015b8281111561102d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610fd5565b5b50905061103b919061103f565b5090565b61107f91905b8082111561107b57600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101611045565b5090565b9056fe496e76616c6964207369676e617475726573207375626d697474656420746f20657865635472616e73616374696f6ea265627a7a72305820c5e7099f53d3807593767e72c47d26d193e938d54a93f9857e5834b13eef693e64736f6c634300050a0032";var MinimumViableMultisig = {abi:abi$1,evm:evm$1,"interface":[{constant:true,inputs:[{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"data",type:"bytes"},{name:"operation",type:"uint8"}],name:"getTransactionHash",outputs:[{name:"",type:"bytes32"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"signatures",type:"bytes"},{name:"txHash",type:"bytes32"},{name:"signers",type:"address[]"}],name:"verifySignatures",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"pure",type:"function"},{constant:false,inputs:[{name:"to",type:"address"},{name:"value",type:"uint256"},{name:"data",type:"bytes"},{name:"operation",type:"uint8"},{name:"signatures",type:"bytes"}],name:"execTransaction",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"getOwners",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"signatures",type:"bytes"},{name:"pos",type:"uint256"}],name:"signatureSplit",outputs:[{name:"v",type:"uint8"},{name:"r",type:"bytes32"},{name:"s",type:"bytes32"}],payable:false,stateMutability:"pure",type:"function"},{constant:false,inputs:[{name:"owners",type:"address[]"}],name:"setup",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"messageSignature",type:"bytes"},{name:"txHash",type:"bytes32"},{name:"pos",type:"uint256"}],name:"recoverKey",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"pure",type:"function"},{payable:true,stateMutability:"payable",type:"fallback"}],bytecode:bytecode$1};

    var abi$2=[{inputs:[{name:"_masterCopy",type:"address"}],payable:false,stateMutability:"nonpayable",type:"constructor"},{payable:true,stateMutability:"payable",type:"fallback"}];var evm$2={bytecode:{linkReferences:{},object:"608060405234801561001057600080fd5b506040516101b43803806101b48339818101604052602081101561003357600080fd5b8101908080519060200190929190505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156100ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806101906024913960400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506077806101196000396000f3fe608060405273ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415603d573d6000fd5b3d6000f3fea265627a7a723058202b014062fac5bbf2f3a320134dac5811a29f916a0f071e16e4493bf4a28fe8a064736f6c634300050a0032496e76616c6964206d617374657220636f707920616464726573732070726f7669646564",opcodes:"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1B4 CODESIZE SUB DUP1 PUSH2 0x1B4 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x190 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH1 0x77 DUP1 PUSH2 0x119 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x0 SLOAD AND CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 DUP2 EQ ISZERO PUSH1 0x3D JUMPI RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST RETURNDATASIZE PUSH1 0x0 RETURN INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0x2b ADD BLOCKHASH PUSH3 0xFAC5BB CALLCODE RETURN LOG3 KECCAK256 SGT 0x4d 0xac PC GT LOG2 SWAP16 SWAP2 PUSH11 0xF071E16E4493BF4A28FE8 LOG0 PUSH5 0x736F6C6343 STOP SDIV EXP STOP ORIGIN 0x49 PUSH15 0x76616C6964206D617374657220636F PUSH17 0x7920616464726573732070726F76696465 PUSH5 0x0 ",sourceMap:"190:1139:23:-;;;610:161;8:9:-1;5:2;;;30:1;27;20:12;5:2;610:161:23;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;610:161:23;;;;;;;;;;;;;;;;693:1;670:25;;:11;:25;;;;662:74;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;755:11;742:10;;:24;;;;;;;;;;;;;;;;;;610:161;190:1139;;;;;;"},deployedBytecode:{linkReferences:{},object:"608060405273ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415603d573d6000fd5b3d6000f3fea265627a7a723058202b014062fac5bbf2f3a320134dac5811a29f916a0f071e16e4493bf4a28fe8a064736f6c634300050a0032",opcodes:"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x0 SLOAD AND CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 DUP2 EQ ISZERO PUSH1 0x3D JUMPI RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST RETURNDATASIZE PUSH1 0x0 RETURN INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0x2b ADD BLOCKHASH PUSH3 0xFAC5BB CALLCODE RETURN LOG3 KECCAK256 SGT 0x4d 0xac PC GT LOG2 SWAP16 SWAP2 PUSH11 0xF071E16E4493BF4A28FE8 LOG0 PUSH5 0x736F6C6343 STOP SDIV EXP STOP ORIGIN ",sourceMap:"190:1139:23:-;;;1022:42;1018:1;1012:8;1008:57;1091:14;1088:1;1085;1072:34;1180:1;1177;1161:14;1158:1;1146:10;1141:3;1128:54;1210:16;1207:1;1204;1189:38;1249:1;1240:7;1237:14;1234:2;;;1264:16;1261:1;1254:27;1234:2;1300:16;1297:1;1290:27"}};var bytecode$2="608060405234801561001057600080fd5b506040516101b43803806101b48339818101604052602081101561003357600080fd5b8101908080519060200190929190505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156100ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806101906024913960400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506077806101196000396000f3fe608060405273ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415603d573d6000fd5b3d6000f3fea265627a7a723058202b014062fac5bbf2f3a320134dac5811a29f916a0f071e16e4493bf4a28fe8a064736f6c634300050a0032496e76616c6964206d617374657220636f707920616464726573732070726f7669646564";var Proxy = {abi:abi$2,evm:evm$2,"interface":[{inputs:[{name:"_masterCopy",type:"address"}],payable:false,stateMutability:"nonpayable",type:"constructor"},{payable:true,stateMutability:"payable",type:"fallback"}],bytecode:bytecode$2};

    const APP_ALREADY_UNINSTALLED = (id) => `Cannot uninstall app ${id}, it has already been uninstalled`;
    const CANNOT_DEPOSIT = "Cannot deposit while another deposit is occurring in the channel.";
    const CANNOT_UNINSTALL_FREE_BALANCE = (multisigAddress) => `Cannot uninstall the FreeBalance of channel: ${multisigAddress}`;
    const CANNOT_WITHDRAW = "Cannot withdraw while another deposit / withdraw app is active in the channel.";
    const CHANNEL_CREATION_FAILED = "Failed to create channel. Multisignature wallet cannot be deployed properly";
    const DEPOSIT_FAILED = "Failed to send funds to the multisig contract";
    const ETH_BALANCE_REFUND_NOT_UNINSTALLED = "The ETH balance refund AppInstance is still installed when it's not supposed to be";
    const FAILED_TO_GET_ERC20_BALANCE = (tokenAddress, address) => `Failed to get the balance of address: ${address} for ERC20 token: ${tokenAddress}`;
    const IMPROPERLY_FORMATTED_STRUCT = "Improperly formatted ABIEncoderV2 struct";
    const INSUFFICIENT_ERC20_FUNDS_TO_DEPOSIT = (address, amount, balance) => `Node's default signer has ${balance} and needs ${amount} of the specified ERC20 token ${address} to deposit`;
    const INSUFFICIENT_FUNDS_TO_WITHDRAW = (address, amount, balance) => {
        if (address === CONVENTION_FOR_ETH_TOKEN_ADDRESS) {
            return `Node has ${balance} and needs ${amount} ETH to withdraw`;
        }
        return `Node has ${balance} and needs ${amount} of token ${address} to withdraw`;
    };
    const INSUFFICIENT_FUNDS_IN_FREE_BALANCE_FOR_ASSET = (publicIdentifier, multisigAddress, tokenAddress, balance, allocationAmount) => `Node with public identifier ${publicIdentifier} has insufficient funds in channel ${multisigAddress}
  for token ${tokenAddress} to allocate towards an AppInstance. Current free balance for token is ${balance},
  attempted allocation amount: ${allocationAmount} `;
    const INSUFFICIENT_FUNDS = "Node's default signer does not have enough funds for this action";
    const INVALID_ACTION = "Invalid action taken";
    const INVALID_WITHDRAW = (tokenAddress) => `Cannot withdraw the specified token (${tokenAddress}) as its balance in the channel is 0`;
    const INVALID_NETWORK_NAME = "Invalid network name provided for initializing Node";
    const NO_ACTION_ENCODING_FOR_APP_INSTANCE = "The AppInstance does not have an Action encoding defined";
    const NO_APP_CONTRACT_ADDR = "The App Contract address is empty";
    const NO_APP_INSTANCE_FOR_GIVEN_ID = "No AppInstance exists for the given ID";
    const NO_APP_INSTANCE_FOR_TAKE_ACTION = "No AppInstanceId specified to takeAction on";
    const NO_APP_INSTANCE_ID_FOR_GET_STATE = "No string specified to get state for";
    const NO_APP_INSTANCE_ID_TO_GET_DETAILS = "No string specified to get details for";
    const NO_APP_INSTANCE_ID_TO_INSTALL = "No AppInstanceId specified to install";
    const NO_APP_INSTANCE_ID_TO_UNINSTALL = "No AppInstanceId specified to uninstall";
    const NO_CHANNEL_BETWEEN_NODES = (nodeA, nodeB) => `No channel exists between the current user ${nodeA} and the peer ${nodeB}`;
    const NO_FREE_BALANCE_EXISTS = (tokenAddress) => `No free balance exists for the specified token: ${tokenAddress}`;
    const NO_MULTISIG_FOR_APP_INSTANCE_ID = "No multisig address exists for the given appInstanceId";
    const NO_PROPOSED_APP_INSTANCE_FOR_APP_INSTANCE_ID = (id) => `No proposed AppInstance exists for the given appInstanceId: ${id}`;
    const NO_STATE_CHANNEL_FOR_MULTISIG_ADDR = (resp, query) => `Call to getStateChannel failed, response was ${resp} when searching for multisig address: ${query}`;
    const NO_TRANSACTION_HASH_FOR_MULTISIG_DEPLOYMENT = "The multisig deployment transaction does not have a hash";
    const NULL_INITIAL_STATE_FOR_PROPOSAL = "A proposed AppInstance cannot have an empty initial state";
    const STATE_OBJECT_NOT_ENCODABLE = "The state object is not encodable by the AppInstance's state encoding";
    const TWO_PARTY_OUTCOME_DIFFERENT_ASSETS = (assetA, assetB) => `For a TWO_PARTY_FIXED_OUTCOME there cannot be two kinds of tokens deposited: ${assetA} and ${assetB}`;
    const VIRTUAL_APP_INSTALLATION_FAIL = "Failed to install the virtual App Instance";
    const WITHDRAWAL_FAILED = "Failed to withdraw funds out of the multisig contract";

    function hashOfOrderedPublicIdentifiers(addresses) {
        return utils.hashMessage(addresses.sort().join(""));
    }
    async function getStateChannelWithOwners(myXpub, theirXpub, store) {
        const multisigAddress = await store.getMultisigAddressFromOwnersHash(hashOfOrderedPublicIdentifiers([myXpub, theirXpub]));
        if (!multisigAddress) {
            throw new Error(NO_CHANNEL_BETWEEN_NODES(myXpub, theirXpub));
        }
        return await store.getStateChannel(multisigAddress);
    }
    async function getPeersAddressFromChannel(myIdentifier, store, multisigAddress) {
        const stateChannel = await store.getStateChannel(multisigAddress);
        const owners = stateChannel.userNeuteredExtendedKeys;
        return owners.filter(owner => owner !== myIdentifier);
    }
    async function getPeersAddressFromAppInstanceID(myIdentifier, store, appInstanceId) {
        const multisigAddress = await store.getMultisigAddressFromAppInstance(appInstanceId);
        if (!multisigAddress) {
            throw new Error(`No multisig address found. Queried for AppInstanceId: ${appInstanceId}`);
        }
        return getPeersAddressFromChannel(myIdentifier, store, multisigAddress);
    }
    function getCounterpartyAddress(myIdentifier, appInstanceAddresses) {
        return appInstanceAddresses.filter(address => {
            return address !== myIdentifier;
        })[0];
    }
    function timeout(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    function getCreate2MultisigAddress(owners, proxyFactoryAddress, minimumViableMultisigAddress) {
        return utils.getAddress(utils.solidityKeccak256(["bytes1", "address", "uint256", "bytes32"], [
            "0xff",
            proxyFactoryAddress,
            utils.solidityKeccak256(["bytes32", "uint256"], [
                utils.keccak256(new utils.Interface(MinimumViableMultisig.abi).functions.setup.encode([
                    xkeysToSortedKthAddresses(owners, 0)
                ])),
                0
            ]),
            utils.keccak256(utils.solidityPack(["bytes", "uint256"], [`0x${Proxy.bytecode}`, minimumViableMultisigAddress]))
        ]).slice(-40));
    }
    function getFreeBalanceAddress(publicIdentifier) {
        return hdnode.fromExtendedKey(publicIdentifier).derivePath("0").address;
    }
    const isBrowser = typeof window !== "undefined" &&
        {}.toString.call(window) === "[object Window]";
    function debugLog(...messages) {
        try {
            const logPrefix = "NodeDebugLog";
            if (isBrowser) {
                if (localStorage.getItem("LOG_LEVEL") === "DEBUG") {
                    log.info(logPrefix, messages);
                    log.trace();
                }
            }
            else if (process.env.LOG_LEVEL !== undefined &&
                process.env.LOG_LEVEL === "DEBUG") {
                log.debug(logPrefix, JSON.stringify(messages, null, 4));
                log.trace();
                log.debug("\n");
            }
        }
        catch (e) {
            console.error("Failed to log: ", e);
        }
    }

    async function createProposedVirtualAppInstance(myIdentifier, store, params, network) {
        const { intermediaries, proposedToIdentifier } = params;
        const channel = await getOrCreateStateChannelThatWrapsVirtualAppInstance(myIdentifier, proposedToIdentifier, intermediaries, store, network);
        const appInstanceProposal = new AppInstanceProposal(Object.assign({}, params, { proposedByIdentifier: myIdentifier, initiatorDepositTokenAddress: params.initiatorDepositTokenAddress || CONVENTION_FOR_ETH_TOKEN_ADDRESS, responderDepositTokenAddress: params.responderDepositTokenAddress || CONVENTION_FOR_ETH_TOKEN_ADDRESS }), channel);
        await store.addVirtualAppInstanceProposal(appInstanceProposal);
        return appInstanceProposal.identityHash;
    }
    function getNextNodeAddress(thisAddress, intermediaries, responderAddress) {
        const intermediaryIndex = intermediaries.findIndex(intermediaryAddress => intermediaryAddress === thisAddress);
        if (intermediaryIndex === -1) {
            return intermediaries[0];
        }
        if (intermediaryIndex + 1 === intermediaries.length) {
            return responderAddress;
        }
        return intermediaries[intermediaryIndex + 1];
    }
    function isNodeIntermediary(thisAddress, intermediaries) {
        return intermediaries.includes(thisAddress);
    }
    async function getOrCreateStateChannelThatWrapsVirtualAppInstance(initiatorXpub, responderXpub, intermediaries, store, network) {
        let stateChannel;
        try {
            stateChannel = await getStateChannelWithOwners(initiatorXpub, responderXpub, store);
        }
        catch (e) {
            if (e
                .toString()
                .includes(NO_CHANNEL_BETWEEN_NODES(initiatorXpub, responderXpub)) &&
                intermediaries !== undefined) {
                const multisigAddress = getCreate2MultisigAddress([initiatorXpub, responderXpub], network.ProxyFactory, network.MinimumViableMultisig);
                stateChannel = StateChannel.createEmptyChannel(multisigAddress, [
                    initiatorXpub,
                    responderXpub
                ]);
                await store.saveStateChannel(stateChannel);
            }
            else {
                throw e;
            }
        }
        return stateChannel;
    }

    const NODE_EVENTS = Node.EventName;

    async function handleReceivedInstallMessage(requestHandler, receivedInstallMessage) {
        const { store } = requestHandler;
        const { data: { params: { appInstanceId } } } = receivedInstallMessage;
        if (!appInstanceId || !appInstanceId.trim()) {
            throw new Error(NO_APP_INSTANCE_ID_TO_INSTALL);
        }
        const proposal = await store.getAppInstanceProposal(appInstanceId);
        await store.saveRealizedProposedAppInstance(proposal);
        return proposal;
    }
    async function handleReceivedInstallVirtualMessage(requestHandler, receivedInstallVirtualMessage) {
        await handleReceivedInstallMessage(requestHandler, receivedInstallVirtualMessage);
    }
    async function handleReceivedProposalMessage(requestHandler, receivedProposeMessage) {
        const { publicIdentifier, store } = requestHandler;
        const { data: { params }, from: proposedByIdentifier } = receivedProposeMessage;
        const stateChannel = await getStateChannelWithOwners(publicIdentifier, proposedByIdentifier, store);
        await store.addAppInstanceProposal(stateChannel, new AppInstanceProposal(Object.assign({}, params, { proposedByIdentifier, initiatorDeposit: params.responderDeposit, initiatorDepositTokenAddress: params.responderDepositTokenAddress, responderDeposit: params.initiatorDeposit, responderDepositTokenAddress: params.initiatorDepositTokenAddress }), stateChannel));
    }
    async function handleRejectProposalMessage(requestHandler, receivedRejectProposalMessage) {
        const { store } = requestHandler;
        const { data: { appInstanceId } } = receivedRejectProposalMessage;
        await store.removeAppInstanceProposal(appInstanceId);
    }
    async function handleReceivedProposeVirtualMessage(requestHandler, receivedProposeMessage) {
        const { publicIdentifier, store, messagingService, networkContext } = requestHandler;
        const { data: { params, proposedByIdentifier } } = receivedProposeMessage;
        const { intermediaries, proposedToIdentifier, responderDeposit, responderDepositTokenAddress, initiatorDeposit, initiatorDepositTokenAddress } = params;
        const stateChannel = await getOrCreateStateChannelThatWrapsVirtualAppInstance(proposedByIdentifier, publicIdentifier, intermediaries, store, networkContext);
        await store.addVirtualAppInstanceProposal(new AppInstanceProposal(Object.assign({}, params, { proposedByIdentifier, initiatorDeposit: responderDeposit, initiatorDepositTokenAddress: responderDepositTokenAddress, responderDeposit: initiatorDeposit, responderDepositTokenAddress: initiatorDepositTokenAddress }), stateChannel));
        if (isNodeIntermediary(publicIdentifier, intermediaries)) {
            await messagingService.send(getNextNodeAddress(publicIdentifier, intermediaries, proposedToIdentifier), {
                from: publicIdentifier,
                type: NODE_EVENTS.PROPOSE_INSTALL_VIRTUAL,
                data: receivedProposeMessage.data
            });
        }
    }

    var Opcode;
    (function (Opcode) {
        Opcode[Opcode["WRITE_COMMITMENT"] = 0] = "WRITE_COMMITMENT";
        Opcode[Opcode["OP_SIGN"] = 1] = "OP_SIGN";
        Opcode[Opcode["IO_SEND"] = 2] = "IO_SEND";
        Opcode[Opcode["IO_SEND_AND_WAIT"] = 3] = "IO_SEND_AND_WAIT";
    })(Opcode || (Opcode = {}));
    var Protocol;
    (function (Protocol) {
        Protocol["Install"] = "install";
        Protocol["InstallVirtualApp"] = "install-virtual-app";
        Protocol["Setup"] = "setup";
        Protocol["TakeAction"] = "takeAction";
        Protocol["Uninstall"] = "uninstall";
        Protocol["UninstallVirtualApp"] = "uninstall-virtual-app";
        Protocol["Update"] = "update";
        Protocol["Withdraw"] = "withdraw";
    })(Protocol || (Protocol = {}));

    var abi$3=[{constant:false,inputs:[{name:"challengeRegistry",type:"address"},{name:"freeBalanceAppIdentityHash",type:"bytes32"},{name:"appIdentityHash",type:"bytes32"},{name:"interpreterAddress",type:"address"},{name:"interpreterParams",type:"bytes"}],name:"executeEffectOfInterpretedAppOutcome",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"challengeRegistry",type:"address"},{name:"freeBalanceAppIdentityHash",type:"bytes32"},{name:"coinTransferInterpreterAddress",type:"address"},{name:"coinTransferInterpreterParams",type:"bytes"}],name:"executeEffectOfFreeBalance",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"}];var evm$3={bytecode:{linkReferences:{},object:"608060405234801561001057600080fd5b506113ae806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636858b1541461003b578063ff80488814610057575b600080fd5b61005560048036036100509190810190610b66565b610073565b005b610071600480360361006c9190810190610aeb565b610379565b005b60608573ffffffffffffffffffffffffffffffffffffffff16635d1a3b82866040518263ffffffff1660e01b81526004016100ae9190610fcc565b60006040518083038186803b1580156100c657600080fd5b505afa1580156100da573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506101039190810190610aaa565b8060200190516101169190810190610bf5565b604001519050600080905060008090505b825181101561015d578583828151811061013d57fe5b6020026020010151141561015057600191505b8080600101915050610127565b508061019e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101959061101e565b60405180910390fd5b60608773ffffffffffffffffffffffffffffffffffffffff16635d1a3b82876040518263ffffffff1660e01b81526004016101d99190610fcc565b60006040518083038186803b1580156101f157600080fd5b505afa158015610205573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061022e9190810190610aaa565b9050600060608673ffffffffffffffffffffffffffffffffffffffff16838760405160240161025e929190610fe7565b6040516020818303038152906040527f8dd8fc97000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102e89190610f93565b600060405180830381855af49150503d8060008114610323576040519150601f19603f3d011682016040523d82523d6000602084013e610328565b606091505b50915091508161036d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103649061103e565b60405180910390fd5b50505050505050505050565b8373ffffffffffffffffffffffffffffffffffffffff1663069b90ff846040518263ffffffff1660e01b81526004016103b29190610fcc565b60206040518083038186803b1580156103ca57600080fd5b505afa1580156103de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104029190810190610a81565b610441576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104389061105e565b60405180910390fd5b60608473ffffffffffffffffffffffffffffffffffffffff16635d1a3b82856040518263ffffffff1660e01b815260040161047c9190610fcc565b60006040518083038186803b15801561049457600080fd5b505afa1580156104a8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506104d19190810190610aaa565b8060200190516104e49190810190610bf5565b6020015190506060816040516020016104fd9190610faa565b6040516020818303038152906040528360405160240161051e929190610fe7565b6040516020818303038152906040527f8dd8fc97000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608573ffffffffffffffffffffffffffffffffffffffff16836040516105c69190610f93565b600060405180830381855af49150503d8060008114610601576040519150601f19603f3d011682016040523d82523d6000602084013e610606565b606091505b50915091508161064b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106429061107e565b60405180910390fd5b5050505050505050565b600081359050610664816112f8565b92915050565b600081519050610679816112f8565b92915050565b600082601f83011261069057600080fd5b81516106a361069e826110cb565b61109e565b915081818352602084019350602081019050838560208402820111156106c857600080fd5b60005b838110156106f857816106de888261066a565b8452602084019350602083019250506001810190506106cb565b5050505092915050565b600082601f83011261071357600080fd5b8151610726610721826110f3565b61109e565b9150818183526020840193506020810190508360005b8381101561076c578151860161075288826107f9565b84526020840193506020830192505060018101905061073c565b5050505092915050565b600082601f83011261078757600080fd5b815161079a6107958261111b565b61109e565b915081818352602084019350602081019050838560208402820111156107bf57600080fd5b60005b838110156107ef57816107d588826108a6565b8452602084019350602083019250506001810190506107c2565b5050505092915050565b600082601f83011261080a57600080fd5b815161081d61081882611143565b61109e565b9150818183526020840193506020810190508385604084028201111561084257600080fd5b60005b8381101561087257816108588882610978565b845260208401935060408301925050600181019050610845565b5050505092915050565b60008151905061088b8161130f565b92915050565b6000813590506108a081611326565b92915050565b6000815190506108b581611326565b92915050565b600082601f8301126108cc57600080fd5b81356108df6108da8261116b565b61109e565b915080825260208301602083018583830111156108fb57600080fd5b6109068382846112a5565b50505092915050565b600082601f83011261092057600080fd5b815161093361092e8261116b565b61109e565b9150808252602083016020830185838301111561094f57600080fd5b61095a8382846112b4565b50505092915050565b6000813590506109728161133d565b92915050565b60006040828403121561098a57600080fd5b610994604061109e565b905060006109a48482850161066a565b60008301525060206109b884828501610a6c565b60208301525092915050565b6000606082840312156109d657600080fd5b6109e0606061109e565b9050600082015167ffffffffffffffff8111156109fc57600080fd5b610a088482850161067f565b600083015250602082015167ffffffffffffffff811115610a2857600080fd5b610a3484828501610702565b602083015250604082015167ffffffffffffffff811115610a5457600080fd5b610a6084828501610776565b60408301525092915050565b600081519050610a7b81611354565b92915050565b600060208284031215610a9357600080fd5b6000610aa18482850161087c565b91505092915050565b600060208284031215610abc57600080fd5b600082015167ffffffffffffffff811115610ad657600080fd5b610ae28482850161090f565b91505092915050565b60008060008060808587031215610b0157600080fd5b6000610b0f87828801610963565b9450506020610b2087828801610891565b9350506040610b3187828801610655565b925050606085013567ffffffffffffffff811115610b4e57600080fd5b610b5a878288016108bb565b91505092959194509250565b600080600080600060a08688031215610b7e57600080fd5b6000610b8c88828901610963565b9550506020610b9d88828901610891565b9450506040610bae88828901610891565b9350506060610bbf88828901610655565b925050608086013567ffffffffffffffff811115610bdc57600080fd5b610be8888289016108bb565b9150509295509295909350565b600060208284031215610c0757600080fd5b600082015167ffffffffffffffff811115610c2157600080fd5b610c2d848285016109c4565b91505092915050565b6000610c428383610ce6565b905092915050565b6000610c568383610f55565b60408301905092915050565b610c6b81611241565b82525050565b6000610c7c826111b7565b610c8681856111f2565b935083602082028501610c9885611197565b8060005b85811015610cd45784840389528151610cb58582610c36565b9450610cc0836111d8565b925060208a01995050600181019050610c9c565b50829750879550505050505092915050565b6000610cf1826111c2565b610cfb8185611203565b9350610d06836111a7565b8060005b83811015610d37578151610d1e8882610c4a565b9750610d29836111e5565b925050600181019050610d0a565b5085935050505092915050565b610d4d8161125f565b82525050565b6000610d5e826111cd565b610d688185611214565b9350610d788185602086016112b4565b610d81816112e7565b840191505092915050565b6000610d97826111cd565b610da18185611225565b9350610db18185602086016112b4565b80840191505092915050565b6000610dca602483611230565b91507f5265666572656e63656420417070496e7374616e6365206973206e6f7420667560008301527f6e646564000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610e30603883611230565b91507f457865637574696f6e206f6620657865637574654566666563744f66496e746560008301527f727072657465644170704f7574636f6d65206661696c656400000000000000006020830152604082019050919050565b6000610e96602e83611230565b91507f467265652042616c616e63652061707020696e7374616e6365206973206e6f7460008301527f2066696e616c697a6564207965740000000000000000000000000000000000006020830152604082019050919050565b6000610efc602e83611230565b91507f457865637574696f6e206f6620657865637574654566666563744f664672656560008301527f42616c616e6365206661696c65640000000000000000000000000000000000006020830152604082019050919050565b604082016000820151610f6b6000850182610c62565b506020820151610f7e6020850182610f84565b50505050565b610f8d8161129b565b82525050565b6000610f9f8284610d8c565b915081905092915050565b60006020820190508181036000830152610fc48184610c71565b905092915050565b6000602082019050610fe16000830184610d44565b92915050565b600060408201905081810360008301526110018185610d53565b905081810360208301526110158184610d53565b90509392505050565b6000602082019050818103600083015261103781610dbd565b9050919050565b6000602082019050818103600083015261105781610e23565b9050919050565b6000602082019050818103600083015261107781610e89565b9050919050565b6000602082019050818103600083015261109781610eef565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156110c157600080fd5b8060405250919050565b600067ffffffffffffffff8211156110e257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561110a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561113257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561115a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561118257600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061124c8261127b565b9050919050565b60008115159050919050565b6000819050919050565b600061127482611241565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156112d25780820151818401526020810190506112b7565b838111156112e1576000848401525b50505050565b6000601f19601f8301169050919050565b61130181611241565b811461130c57600080fd5b50565b61131881611253565b811461132357600080fd5b50565b61132f8161125f565b811461133a57600080fd5b50565b61134681611269565b811461135157600080fd5b50565b61135d8161129b565b811461136857600080fd5b5056fea365627a7a723058202524a56cadf95fb07aab30422b90e5c6cd137b7e22fa62adc0ec388d230936806c6578706572696d656e74616cf564736f6c634300050a0040",opcodes:"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13AE DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6858B154 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xFF804888 EQ PUSH2 0x57 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x55 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x50 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB66 JUMP JUMPDEST PUSH2 0x73 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x71 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x6C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xAEB JUMP JUMPDEST PUSH2 0x379 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D1A3B82 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAE SWAP2 SWAP1 PUSH2 0xFCC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x103 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xAAA JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x116 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xBF5 JUMP JUMPDEST PUSH1 0x40 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x15D JUMPI DUP6 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x13D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ ISZERO PUSH2 0x150 JUMPI PUSH1 0x1 SWAP2 POP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x127 JUMP JUMPDEST POP DUP1 PUSH2 0x19E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x195 SWAP1 PUSH2 0x101E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D1A3B82 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D9 SWAP2 SWAP1 PUSH2 0xFCC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x205 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x22E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xAAA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP8 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x25E SWAP3 SWAP2 SWAP1 PUSH2 0xFE7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0x8DD8FC9700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0x2E8 SWAP2 SWAP1 PUSH2 0xF93 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x328 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x36D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x364 SWAP1 PUSH2 0x103E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x69B90FF DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B2 SWAP2 SWAP1 PUSH2 0xFCC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3DE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x402 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA81 JUMP JUMPDEST PUSH2 0x441 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x438 SWAP1 PUSH2 0x105E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D1A3B82 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x47C SWAP2 SWAP1 PUSH2 0xFCC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x4D1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xAAA JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x4E4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xBF5 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4FD SWAP2 SWAP1 PUSH2 0xFAA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x51E SWAP3 SWAP2 SWAP1 PUSH2 0xFE7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0x8DD8FC9700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x5C6 SWAP2 SWAP1 PUSH2 0xF93 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x601 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x606 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x64B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x642 SWAP1 PUSH2 0x107E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x664 DUP2 PUSH2 0x12F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x679 DUP2 PUSH2 0x12F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x690 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6A3 PUSH2 0x69E DUP3 PUSH2 0x10CB JUMP JUMPDEST PUSH2 0x109E JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x6C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6F8 JUMPI DUP2 PUSH2 0x6DE DUP9 DUP3 PUSH2 0x66A JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x6CB JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x713 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x726 PUSH2 0x721 DUP3 PUSH2 0x10F3 JUMP JUMPDEST PUSH2 0x109E JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x76C JUMPI DUP2 MLOAD DUP7 ADD PUSH2 0x752 DUP9 DUP3 PUSH2 0x7F9 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x73C JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x787 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x79A PUSH2 0x795 DUP3 PUSH2 0x111B JUMP JUMPDEST PUSH2 0x109E JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x7BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7EF JUMPI DUP2 PUSH2 0x7D5 DUP9 DUP3 PUSH2 0x8A6 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x7C2 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x80A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x81D PUSH2 0x818 DUP3 PUSH2 0x1143 JUMP JUMPDEST PUSH2 0x109E JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x40 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x842 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x872 JUMPI DUP2 PUSH2 0x858 DUP9 DUP3 PUSH2 0x978 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x40 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x845 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x88B DUP2 PUSH2 0x130F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x8A0 DUP2 PUSH2 0x1326 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x8B5 DUP2 PUSH2 0x1326 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8DF PUSH2 0x8DA DUP3 PUSH2 0x116B JUMP JUMPDEST PUSH2 0x109E JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x8FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x906 DUP4 DUP3 DUP5 PUSH2 0x12A5 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x933 PUSH2 0x92E DUP3 PUSH2 0x116B JUMP JUMPDEST PUSH2 0x109E JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x94F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95A DUP4 DUP3 DUP5 PUSH2 0x12B4 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x972 DUP2 PUSH2 0x133D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x98A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x994 PUSH1 0x40 PUSH2 0x109E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9A4 DUP5 DUP3 DUP6 ADD PUSH2 0x66A JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x9B8 DUP5 DUP3 DUP6 ADD PUSH2 0xA6C JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9E0 PUSH1 0x60 PUSH2 0x109E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA08 DUP5 DUP3 DUP6 ADD PUSH2 0x67F JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA34 DUP5 DUP3 DUP6 ADD PUSH2 0x702 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA60 DUP5 DUP3 DUP6 ADD PUSH2 0x776 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xA7B DUP2 PUSH2 0x1354 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xAA1 DUP5 DUP3 DUP6 ADD PUSH2 0x87C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xABC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xAD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAE2 DUP5 DUP3 DUP6 ADD PUSH2 0x90F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB0F DUP8 DUP3 DUP9 ADD PUSH2 0x963 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xB20 DUP8 DUP3 DUP9 ADD PUSH2 0x891 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xB31 DUP8 DUP3 DUP9 ADD PUSH2 0x655 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5A DUP8 DUP3 DUP9 ADD PUSH2 0x8BB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xB7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB8C DUP9 DUP3 DUP10 ADD PUSH2 0x963 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0xB9D DUP9 DUP3 DUP10 ADD PUSH2 0x891 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0xBAE DUP9 DUP3 DUP10 ADD PUSH2 0x891 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0xBBF DUP9 DUP3 DUP10 ADD PUSH2 0x655 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBE8 DUP9 DUP3 DUP10 ADD PUSH2 0x8BB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC2D DUP5 DUP3 DUP6 ADD PUSH2 0x9C4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC42 DUP4 DUP4 PUSH2 0xCE6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC56 DUP4 DUP4 PUSH2 0xF55 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC6B DUP2 PUSH2 0x1241 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC7C DUP3 PUSH2 0x11B7 JUMP JUMPDEST PUSH2 0xC86 DUP2 DUP6 PUSH2 0x11F2 JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0xC98 DUP6 PUSH2 0x1197 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xCD4 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0xCB5 DUP6 DUP3 PUSH2 0xC36 JUMP JUMPDEST SWAP5 POP PUSH2 0xCC0 DUP4 PUSH2 0x11D8 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP11 ADD SWAP10 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xC9C JUMP JUMPDEST POP DUP3 SWAP8 POP DUP8 SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCF1 DUP3 PUSH2 0x11C2 JUMP JUMPDEST PUSH2 0xCFB DUP2 DUP6 PUSH2 0x1203 JUMP JUMPDEST SWAP4 POP PUSH2 0xD06 DUP4 PUSH2 0x11A7 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD37 JUMPI DUP2 MLOAD PUSH2 0xD1E DUP9 DUP3 PUSH2 0xC4A JUMP JUMPDEST SWAP8 POP PUSH2 0xD29 DUP4 PUSH2 0x11E5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xD0A JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD4D DUP2 PUSH2 0x125F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD5E DUP3 PUSH2 0x11CD JUMP JUMPDEST PUSH2 0xD68 DUP2 DUP6 PUSH2 0x1214 JUMP JUMPDEST SWAP4 POP PUSH2 0xD78 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x12B4 JUMP JUMPDEST PUSH2 0xD81 DUP2 PUSH2 0x12E7 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD97 DUP3 PUSH2 0x11CD JUMP JUMPDEST PUSH2 0xDA1 DUP2 DUP6 PUSH2 0x1225 JUMP JUMPDEST SWAP4 POP PUSH2 0xDB1 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x12B4 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDCA PUSH1 0x24 DUP4 PUSH2 0x1230 JUMP JUMPDEST SWAP2 POP PUSH32 0x5265666572656E63656420417070496E7374616E6365206973206E6F74206675 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6E64656400000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE30 PUSH1 0x38 DUP4 PUSH2 0x1230 JUMP JUMPDEST SWAP2 POP PUSH32 0x457865637574696F6E206F6620657865637574654566666563744F66496E7465 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x727072657465644170704F7574636F6D65206661696C65640000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE96 PUSH1 0x2E DUP4 PUSH2 0x1230 JUMP JUMPDEST SWAP2 POP PUSH32 0x467265652042616C616E63652061707020696E7374616E6365206973206E6F74 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x2066696E616C697A656420796574000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEFC PUSH1 0x2E DUP4 PUSH2 0x1230 JUMP JUMPDEST SWAP2 POP PUSH32 0x457865637574696F6E206F6620657865637574654566666563744F6646726565 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x42616C616E6365206661696C6564000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0xF6B PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0xC62 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xF7E PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xF84 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xF8D DUP2 PUSH2 0x129B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF9F DUP3 DUP5 PUSH2 0xD8C JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xFC4 DUP2 DUP5 PUSH2 0xC71 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFE1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD44 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1001 DUP2 DUP6 PUSH2 0xD53 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1015 DUP2 DUP5 PUSH2 0xD53 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1037 DUP2 PUSH2 0xDBD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1057 DUP2 PUSH2 0xE23 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1077 DUP2 PUSH2 0xE89 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1097 DUP2 PUSH2 0xEEF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x10C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x40 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x10E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x110A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1132 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x115A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1182 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x124C DUP3 PUSH2 0x127B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1274 DUP3 PUSH2 0x1241 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x12D2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x12B7 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x12E1 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1301 DUP2 PUSH2 0x1241 JUMP JUMPDEST DUP2 EQ PUSH2 0x130C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1318 DUP2 PUSH2 0x1253 JUMP JUMPDEST DUP2 EQ PUSH2 0x1323 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x132F DUP2 PUSH2 0x125F JUMP JUMPDEST DUP2 EQ PUSH2 0x133A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1346 DUP2 PUSH2 0x1269 JUMP JUMPDEST DUP2 EQ PUSH2 0x1351 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x135D DUP2 PUSH2 0x129B JUMP JUMPDEST DUP2 EQ PUSH2 0x1368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723058 KECCAK256 0x25 0x24 0xa5 PUSH13 0xADF95FB07AAB30422B90E5C6CD SGT PUSH28 0x7E22FA62ADC0EC388D230936806C6578706572696D656E74616CF564 PUSH20 0x6F6C634300050A00400000000000000000000000 ",sourceMap:"216:2776:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;216:2776:1;;;;;;;"},deployedBytecode:{linkReferences:{},object:"608060405234801561001057600080fd5b50600436106100365760003560e01c80636858b1541461003b578063ff80488814610057575b600080fd5b61005560048036036100509190810190610b66565b610073565b005b610071600480360361006c9190810190610aeb565b610379565b005b60608573ffffffffffffffffffffffffffffffffffffffff16635d1a3b82866040518263ffffffff1660e01b81526004016100ae9190610fcc565b60006040518083038186803b1580156100c657600080fd5b505afa1580156100da573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506101039190810190610aaa565b8060200190516101169190810190610bf5565b604001519050600080905060008090505b825181101561015d578583828151811061013d57fe5b6020026020010151141561015057600191505b8080600101915050610127565b508061019e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101959061101e565b60405180910390fd5b60608773ffffffffffffffffffffffffffffffffffffffff16635d1a3b82876040518263ffffffff1660e01b81526004016101d99190610fcc565b60006040518083038186803b1580156101f157600080fd5b505afa158015610205573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061022e9190810190610aaa565b9050600060608673ffffffffffffffffffffffffffffffffffffffff16838760405160240161025e929190610fe7565b6040516020818303038152906040527f8dd8fc97000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102e89190610f93565b600060405180830381855af49150503d8060008114610323576040519150601f19603f3d011682016040523d82523d6000602084013e610328565b606091505b50915091508161036d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103649061103e565b60405180910390fd5b50505050505050505050565b8373ffffffffffffffffffffffffffffffffffffffff1663069b90ff846040518263ffffffff1660e01b81526004016103b29190610fcc565b60206040518083038186803b1580156103ca57600080fd5b505afa1580156103de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104029190810190610a81565b610441576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104389061105e565b60405180910390fd5b60608473ffffffffffffffffffffffffffffffffffffffff16635d1a3b82856040518263ffffffff1660e01b815260040161047c9190610fcc565b60006040518083038186803b15801561049457600080fd5b505afa1580156104a8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506104d19190810190610aaa565b8060200190516104e49190810190610bf5565b6020015190506060816040516020016104fd9190610faa565b6040516020818303038152906040528360405160240161051e929190610fe7565b6040516020818303038152906040527f8dd8fc97000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600060608573ffffffffffffffffffffffffffffffffffffffff16836040516105c69190610f93565b600060405180830381855af49150503d8060008114610601576040519150601f19603f3d011682016040523d82523d6000602084013e610606565b606091505b50915091508161064b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106429061107e565b60405180910390fd5b5050505050505050565b600081359050610664816112f8565b92915050565b600081519050610679816112f8565b92915050565b600082601f83011261069057600080fd5b81516106a361069e826110cb565b61109e565b915081818352602084019350602081019050838560208402820111156106c857600080fd5b60005b838110156106f857816106de888261066a565b8452602084019350602083019250506001810190506106cb565b5050505092915050565b600082601f83011261071357600080fd5b8151610726610721826110f3565b61109e565b9150818183526020840193506020810190508360005b8381101561076c578151860161075288826107f9565b84526020840193506020830192505060018101905061073c565b5050505092915050565b600082601f83011261078757600080fd5b815161079a6107958261111b565b61109e565b915081818352602084019350602081019050838560208402820111156107bf57600080fd5b60005b838110156107ef57816107d588826108a6565b8452602084019350602083019250506001810190506107c2565b5050505092915050565b600082601f83011261080a57600080fd5b815161081d61081882611143565b61109e565b9150818183526020840193506020810190508385604084028201111561084257600080fd5b60005b8381101561087257816108588882610978565b845260208401935060408301925050600181019050610845565b5050505092915050565b60008151905061088b8161130f565b92915050565b6000813590506108a081611326565b92915050565b6000815190506108b581611326565b92915050565b600082601f8301126108cc57600080fd5b81356108df6108da8261116b565b61109e565b915080825260208301602083018583830111156108fb57600080fd5b6109068382846112a5565b50505092915050565b600082601f83011261092057600080fd5b815161093361092e8261116b565b61109e565b9150808252602083016020830185838301111561094f57600080fd5b61095a8382846112b4565b50505092915050565b6000813590506109728161133d565b92915050565b60006040828403121561098a57600080fd5b610994604061109e565b905060006109a48482850161066a565b60008301525060206109b884828501610a6c565b60208301525092915050565b6000606082840312156109d657600080fd5b6109e0606061109e565b9050600082015167ffffffffffffffff8111156109fc57600080fd5b610a088482850161067f565b600083015250602082015167ffffffffffffffff811115610a2857600080fd5b610a3484828501610702565b602083015250604082015167ffffffffffffffff811115610a5457600080fd5b610a6084828501610776565b60408301525092915050565b600081519050610a7b81611354565b92915050565b600060208284031215610a9357600080fd5b6000610aa18482850161087c565b91505092915050565b600060208284031215610abc57600080fd5b600082015167ffffffffffffffff811115610ad657600080fd5b610ae28482850161090f565b91505092915050565b60008060008060808587031215610b0157600080fd5b6000610b0f87828801610963565b9450506020610b2087828801610891565b9350506040610b3187828801610655565b925050606085013567ffffffffffffffff811115610b4e57600080fd5b610b5a878288016108bb565b91505092959194509250565b600080600080600060a08688031215610b7e57600080fd5b6000610b8c88828901610963565b9550506020610b9d88828901610891565b9450506040610bae88828901610891565b9350506060610bbf88828901610655565b925050608086013567ffffffffffffffff811115610bdc57600080fd5b610be8888289016108bb565b9150509295509295909350565b600060208284031215610c0757600080fd5b600082015167ffffffffffffffff811115610c2157600080fd5b610c2d848285016109c4565b91505092915050565b6000610c428383610ce6565b905092915050565b6000610c568383610f55565b60408301905092915050565b610c6b81611241565b82525050565b6000610c7c826111b7565b610c8681856111f2565b935083602082028501610c9885611197565b8060005b85811015610cd45784840389528151610cb58582610c36565b9450610cc0836111d8565b925060208a01995050600181019050610c9c565b50829750879550505050505092915050565b6000610cf1826111c2565b610cfb8185611203565b9350610d06836111a7565b8060005b83811015610d37578151610d1e8882610c4a565b9750610d29836111e5565b925050600181019050610d0a565b5085935050505092915050565b610d4d8161125f565b82525050565b6000610d5e826111cd565b610d688185611214565b9350610d788185602086016112b4565b610d81816112e7565b840191505092915050565b6000610d97826111cd565b610da18185611225565b9350610db18185602086016112b4565b80840191505092915050565b6000610dca602483611230565b91507f5265666572656e63656420417070496e7374616e6365206973206e6f7420667560008301527f6e646564000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000610e30603883611230565b91507f457865637574696f6e206f6620657865637574654566666563744f66496e746560008301527f727072657465644170704f7574636f6d65206661696c656400000000000000006020830152604082019050919050565b6000610e96602e83611230565b91507f467265652042616c616e63652061707020696e7374616e6365206973206e6f7460008301527f2066696e616c697a6564207965740000000000000000000000000000000000006020830152604082019050919050565b6000610efc602e83611230565b91507f457865637574696f6e206f6620657865637574654566666563744f664672656560008301527f42616c616e6365206661696c65640000000000000000000000000000000000006020830152604082019050919050565b604082016000820151610f6b6000850182610c62565b506020820151610f7e6020850182610f84565b50505050565b610f8d8161129b565b82525050565b6000610f9f8284610d8c565b915081905092915050565b60006020820190508181036000830152610fc48184610c71565b905092915050565b6000602082019050610fe16000830184610d44565b92915050565b600060408201905081810360008301526110018185610d53565b905081810360208301526110158184610d53565b90509392505050565b6000602082019050818103600083015261103781610dbd565b9050919050565b6000602082019050818103600083015261105781610e23565b9050919050565b6000602082019050818103600083015261107781610e89565b9050919050565b6000602082019050818103600083015261109781610eef565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156110c157600080fd5b8060405250919050565b600067ffffffffffffffff8211156110e257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561110a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561113257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561115a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561118257600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061124c8261127b565b9050919050565b60008115159050919050565b6000819050919050565b600061127482611241565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156112d25780820151818401526020810190506112b7565b838111156112e1576000848401525b50505050565b6000601f19601f8301169050919050565b61130181611241565b811461130c57600080fd5b50565b61131881611253565b811461132357600080fd5b50565b61132f8161125f565b811461133a57600080fd5b50565b61134681611269565b811461135157600080fd5b50565b61135d8161129b565b811461136857600080fd5b5056fea365627a7a723058202524a56cadf95fb07aab30422b90e5c6cd137b7e22fa62adc0ec388d230936806c6578706572696d656e74616cf564736f6c634300050a0040",opcodes:"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6858B154 EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0xFF804888 EQ PUSH2 0x57 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x55 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x50 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xB66 JUMP JUMPDEST PUSH2 0x73 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x71 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x6C SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xAEB JUMP JUMPDEST PUSH2 0x379 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D1A3B82 DUP7 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAE SWAP2 SWAP1 PUSH2 0xFCC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x103 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xAAA JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x116 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xBF5 JUMP JUMPDEST PUSH1 0x40 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x15D JUMPI DUP6 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x13D JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD EQ ISZERO PUSH2 0x150 JUMPI PUSH1 0x1 SWAP2 POP JUMPDEST DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x127 JUMP JUMPDEST POP DUP1 PUSH2 0x19E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x195 SWAP1 PUSH2 0x101E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D1A3B82 DUP8 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D9 SWAP2 SWAP1 PUSH2 0xFCC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x205 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x22E SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xAAA JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 DUP8 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x25E SWAP3 SWAP2 SWAP1 PUSH2 0xFE7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0x8DD8FC9700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0x2E8 SWAP2 SWAP1 PUSH2 0xF93 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x323 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x328 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x36D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x364 SWAP1 PUSH2 0x103E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x69B90FF DUP5 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3B2 SWAP2 SWAP1 PUSH2 0xFCC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3DE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x402 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xA81 JUMP JUMPDEST PUSH2 0x441 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x438 SWAP1 PUSH2 0x105E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D1A3B82 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x47C SWAP2 SWAP1 PUSH2 0xFCC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x494 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x4A8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x4D1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xAAA JUMP JUMPDEST DUP1 PUSH1 0x20 ADD SWAP1 MLOAD PUSH2 0x4E4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0xBF5 JUMP JUMPDEST PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x4FD SWAP2 SWAP1 PUSH2 0xFAA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP4 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x51E SWAP3 SWAP2 SWAP1 PUSH2 0xFE7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH32 0x8DD8FC9700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH1 0x60 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x5C6 SWAP2 SWAP1 PUSH2 0xF93 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x601 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x606 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x64B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x642 SWAP1 PUSH2 0x107E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x664 DUP2 PUSH2 0x12F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x679 DUP2 PUSH2 0x12F8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x690 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x6A3 PUSH2 0x69E DUP3 PUSH2 0x10CB JUMP JUMPDEST PUSH2 0x109E JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x6C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x6F8 JUMPI DUP2 PUSH2 0x6DE DUP9 DUP3 PUSH2 0x66A JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x6CB JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x713 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x726 PUSH2 0x721 DUP3 PUSH2 0x10F3 JUMP JUMPDEST PUSH2 0x109E JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x76C JUMPI DUP2 MLOAD DUP7 ADD PUSH2 0x752 DUP9 DUP3 PUSH2 0x7F9 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x73C JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x787 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x79A PUSH2 0x795 DUP3 PUSH2 0x111B JUMP JUMPDEST PUSH2 0x109E JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x7BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x7EF JUMPI DUP2 PUSH2 0x7D5 DUP9 DUP3 PUSH2 0x8A6 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x7C2 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x80A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x81D PUSH2 0x818 DUP3 PUSH2 0x1143 JUMP JUMPDEST PUSH2 0x109E JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x40 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x842 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x872 JUMPI DUP2 PUSH2 0x858 DUP9 DUP3 PUSH2 0x978 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x40 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x845 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x88B DUP2 PUSH2 0x130F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x8A0 DUP2 PUSH2 0x1326 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x8B5 DUP2 PUSH2 0x1326 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x8CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8DF PUSH2 0x8DA DUP3 PUSH2 0x116B JUMP JUMPDEST PUSH2 0x109E JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x8FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x906 DUP4 DUP3 DUP5 PUSH2 0x12A5 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x920 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x933 PUSH2 0x92E DUP3 PUSH2 0x116B JUMP JUMPDEST PUSH2 0x109E JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x94F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95A DUP4 DUP3 DUP5 PUSH2 0x12B4 JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x972 DUP2 PUSH2 0x133D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x98A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x994 PUSH1 0x40 PUSH2 0x109E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x9A4 DUP5 DUP3 DUP6 ADD PUSH2 0x66A JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x9B8 DUP5 DUP3 DUP6 ADD PUSH2 0xA6C JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x9D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9E0 PUSH1 0x60 PUSH2 0x109E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA08 DUP5 DUP3 DUP6 ADD PUSH2 0x67F JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA34 DUP5 DUP3 DUP6 ADD PUSH2 0x702 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA60 DUP5 DUP3 DUP6 ADD PUSH2 0x776 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xA7B DUP2 PUSH2 0x1354 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xAA1 DUP5 DUP3 DUP6 ADD PUSH2 0x87C JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xABC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xAD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xAE2 DUP5 DUP3 DUP6 ADD PUSH2 0x90F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xB01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB0F DUP8 DUP3 DUP9 ADD PUSH2 0x963 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0xB20 DUP8 DUP3 DUP9 ADD PUSH2 0x891 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0xB31 DUP8 DUP3 DUP9 ADD PUSH2 0x655 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB4E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB5A DUP8 DUP3 DUP9 ADD PUSH2 0x8BB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xB7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xB8C DUP9 DUP3 DUP10 ADD PUSH2 0x963 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 PUSH2 0xB9D DUP9 DUP3 DUP10 ADD PUSH2 0x891 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 PUSH2 0xBAE DUP9 DUP3 DUP10 ADD PUSH2 0x891 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 PUSH2 0xBBF DUP9 DUP3 DUP10 ADD PUSH2 0x655 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBE8 DUP9 DUP3 DUP10 ADD PUSH2 0x8BB JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC2D DUP5 DUP3 DUP6 ADD PUSH2 0x9C4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC42 DUP4 DUP4 PUSH2 0xCE6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC56 DUP4 DUP4 PUSH2 0xF55 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xC6B DUP2 PUSH2 0x1241 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC7C DUP3 PUSH2 0x11B7 JUMP JUMPDEST PUSH2 0xC86 DUP2 DUP6 PUSH2 0x11F2 JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x20 DUP3 MUL DUP6 ADD PUSH2 0xC98 DUP6 PUSH2 0x1197 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xCD4 JUMPI DUP5 DUP5 SUB DUP10 MSTORE DUP2 MLOAD PUSH2 0xCB5 DUP6 DUP3 PUSH2 0xC36 JUMP JUMPDEST SWAP5 POP PUSH2 0xCC0 DUP4 PUSH2 0x11D8 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP11 ADD SWAP10 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xC9C JUMP JUMPDEST POP DUP3 SWAP8 POP DUP8 SWAP6 POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCF1 DUP3 PUSH2 0x11C2 JUMP JUMPDEST PUSH2 0xCFB DUP2 DUP6 PUSH2 0x1203 JUMP JUMPDEST SWAP4 POP PUSH2 0xD06 DUP4 PUSH2 0x11A7 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xD37 JUMPI DUP2 MLOAD PUSH2 0xD1E DUP9 DUP3 PUSH2 0xC4A JUMP JUMPDEST SWAP8 POP PUSH2 0xD29 DUP4 PUSH2 0x11E5 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xD0A JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xD4D DUP2 PUSH2 0x125F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD5E DUP3 PUSH2 0x11CD JUMP JUMPDEST PUSH2 0xD68 DUP2 DUP6 PUSH2 0x1214 JUMP JUMPDEST SWAP4 POP PUSH2 0xD78 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x12B4 JUMP JUMPDEST PUSH2 0xD81 DUP2 PUSH2 0x12E7 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD97 DUP3 PUSH2 0x11CD JUMP JUMPDEST PUSH2 0xDA1 DUP2 DUP6 PUSH2 0x1225 JUMP JUMPDEST SWAP4 POP PUSH2 0xDB1 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x12B4 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDCA PUSH1 0x24 DUP4 PUSH2 0x1230 JUMP JUMPDEST SWAP2 POP PUSH32 0x5265666572656E63656420417070496E7374616E6365206973206E6F74206675 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6E64656400000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE30 PUSH1 0x38 DUP4 PUSH2 0x1230 JUMP JUMPDEST SWAP2 POP PUSH32 0x457865637574696F6E206F6620657865637574654566666563744F66496E7465 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x727072657465644170704F7574636F6D65206661696C65640000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE96 PUSH1 0x2E DUP4 PUSH2 0x1230 JUMP JUMPDEST SWAP2 POP PUSH32 0x467265652042616C616E63652061707020696E7374616E6365206973206E6F74 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x2066696E616C697A656420796574000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEFC PUSH1 0x2E DUP4 PUSH2 0x1230 JUMP JUMPDEST SWAP2 POP PUSH32 0x457865637574696F6E206F6620657865637574654566666563744F6646726565 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x42616C616E6365206661696C6564000000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0xF6B PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0xC62 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0xF7E PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0xF84 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0xF8D DUP2 PUSH2 0x129B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF9F DUP3 DUP5 PUSH2 0xD8C JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xFC4 DUP2 DUP5 PUSH2 0xC71 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFE1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xD44 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1001 DUP2 DUP6 PUSH2 0xD53 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1015 DUP2 DUP5 PUSH2 0xD53 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1037 DUP2 PUSH2 0xDBD JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1057 DUP2 PUSH2 0xE23 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1077 DUP2 PUSH2 0xE89 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1097 DUP2 PUSH2 0xEEF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x10C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x40 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x10E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x110A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1132 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x115A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1182 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x124C DUP3 PUSH2 0x127B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1274 DUP3 PUSH2 0x1241 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x12D2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x12B7 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x12E1 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1301 DUP2 PUSH2 0x1241 JUMP JUMPDEST DUP2 EQ PUSH2 0x130C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1318 DUP2 PUSH2 0x1253 JUMP JUMPDEST DUP2 EQ PUSH2 0x1323 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x132F DUP2 PUSH2 0x125F JUMP JUMPDEST DUP2 EQ PUSH2 0x133A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x1346 DUP2 PUSH2 0x1269 JUMP JUMPDEST DUP2 EQ PUSH2 0x1351 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x135D DUP2 PUSH2 0x129B JUMP JUMPDEST DUP2 EQ PUSH2 0x1368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723058 KECCAK256 0x25 0x24 0xa5 PUSH13 0xADF95FB07AAB30422B90E5C6CD SGT PUSH28 0x7E22FA62ADC0EC388D230936806C6578706572696D656E74616CF564 PUSH20 0x6F6C634300050A00400000000000000000000000 ",sourceMap:"216:2776:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;216:2776:1;;;;;;;;;;;;;;;;;;;;;;;;1876:1113;;;;;;;;;;;;;;;;:::i;:::-;;746:983;;;;;;;;;;;;;;;;:::i;:::-;;1876:1113;2124:27;2172:17;:28;;;2201:26;2172:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2172:56:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2172:56:1;;;;;;39:16:-1;36:1;17:17;2:54;2172:56:1;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2172:56:1;;;;;;;;;2154:109;;;;;;;;;;;;;;:120;;;2124:150;;2281:16;2300:5;2281:24;;2317:9;2329:1;2317:13;;2312:137;2336:10;:17;2332:1;:21;2312:137;;;2389:15;2372:10;2383:1;2372:13;;;;;;;;;;;;;;:32;2368:75;;;2430:4;2416:18;;2368:75;2355:3;;;;;;;2312:137;;;;2463:11;2455:60;;;;;;;;;;;;;;;;;;;;;;2522:20;2545:17;:28;;;2574:15;2545:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2545:45:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2545:45:1;;;;;;39:16:-1;36:1;17:17;2:54;2545:45:1;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2545:45:1;;;;;;;;;2522:68;;2605:12;2674:23;2706:18;:31;;2835:7;2852:17;2745:132;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2745:132:1;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;2745:132:1;2706:177;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;2597:286:1;;;;2905:7;2890:94;;;;;;;;;;;;;;;;;;;;;;1876:1113;;;;;;;;;;:::o;746:983::-;993:17;:34;;;1028:26;993:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;993:62:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;993:62:1;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;993:62:1;;;;;;;;;978:139;;;;;;;;;;;;;;;;;;;;;;1124:42;1187:17;:28;;;1216:26;1187:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1187:56:1;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1187:56:1;;;;;;39:16:-1;36:1;17:17;2:54;1187:56:1;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1187:56:1;;;;;;;;;1169:109;;;;;;;;;;;;;;:118;;;1124:163;;1294:20;1414:7;1403:19;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1403:19:1;;;1430:29;1317:148;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1317:148:1;;;;;;;38:4:-1;29:7;25:18;67:10;61:17;96:58;199:8;192:4;186;182:15;179:29;167:10;160:49;0:215;;;1317:148:1;1294:171;;1480:12;1549:23;1581:30;:43;;1625:7;1581:52;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;1472:161:1;;;;1655:7;1640:84;;;;;;;;;;;;;;;;;;;;;;746:983;;;;;;;;:::o;5:130:-1:-;;85:6;72:20;63:29;;97:33;124:5;97:33;;;57:78;;;;;142:134;;226:6;220:13;211:22;;238:33;265:5;238:33;;;205:71;;;;;301:714;;425:3;418:4;410:6;406:17;402:27;392:2;;443:1;440;433:12;392:2;473:6;467:13;495:76;510:60;563:6;510:60;;;495:76;;;486:85;;588:5;613:6;606:5;599:21;643:4;635:6;631:17;621:27;;665:4;660:3;656:14;649:21;;718:6;765:3;757:4;749:6;745:17;740:3;736:27;733:36;730:2;;;782:1;779;772:12;730:2;807:1;792:217;817:6;814:1;811:13;792:217;;;875:3;897:48;941:3;929:10;897:48;;;892:3;885:61;969:4;964:3;960:14;953:21;;997:4;992:3;988:14;981:21;;849:160;839:1;836;832:9;827:14;;792:217;;;796:14;385:630;;;;;;;;1066:819;;1237:3;1230:4;1222:6;1218:17;1214:27;1204:2;;1255:1;1252;1245:12;1204:2;1285:6;1279:13;1307:123;1322:107;1422:6;1322:107;;;1307:123;;;1298:132;;1447:5;1472:6;1465:5;1458:21;1502:4;1494:6;1490:17;1480:27;;1524:4;1519:3;1515:14;1508:21;;1577:6;1610:1;1595:284;1620:6;1617:1;1614:13;1595:284;;;1696:3;1690:10;1682:6;1678:23;1720:95;1811:3;1799:10;1720:95;;;1715:3;1708:108;1839:4;1834:3;1830:14;1823:21;;1867:4;1862:3;1858:14;1851:21;;1652:227;1642:1;1639;1635:9;1630:14;;1595:284;;;1599:14;1197:688;;;;;;;;1911:714;;2035:3;2028:4;2020:6;2016:17;2012:27;2002:2;;2053:1;2050;2043:12;2002:2;2083:6;2077:13;2105:76;2120:60;2173:6;2120:60;;;2105:76;;;2096:85;;2198:5;2223:6;2216:5;2209:21;2253:4;2245:6;2241:17;2231:27;;2275:4;2270:3;2266:14;2259:21;;2328:6;2375:3;2367:4;2359:6;2355:17;2350:3;2346:27;2343:36;2340:2;;;2392:1;2389;2382:12;2340:2;2417:1;2402:217;2427:6;2424:1;2421:13;2402:217;;;2485:3;2507:48;2551:3;2539:10;2507:48;;;2502:3;2495:61;2579:4;2574:3;2570:14;2563:21;;2607:4;2602:3;2598:14;2591:21;;2459:160;2449:1;2446;2442:9;2437:14;;2402:217;;;2406:14;1995:630;;;;;;;;2674:792;;2824:3;2817:4;2809:6;2805:17;2801:27;2791:2;;2842:1;2839;2832:12;2791:2;2872:6;2866:13;2894:102;2909:86;2988:6;2909:86;;;2894:102;;;2885:111;;3013:5;3038:6;3031:5;3024:21;3068:4;3060:6;3056:17;3046:27;;3090:4;3085:3;3081:14;3074:21;;3143:6;3190:3;3182:4;3174:6;3170:17;3165:3;3161:27;3158:36;3155:2;;;3207:1;3204;3197:12;3155:2;3232:1;3217:243;3242:6;3239:1;3236:13;3217:243;;;3300:3;3322:74;3392:3;3380:10;3322:74;;;3317:3;3310:87;3420:4;3415:3;3411:14;3404:21;;3448:4;3443:3;3439:14;3432:21;;3274:186;3264:1;3261;3257:9;3252:14;;3217:243;;;3221:14;2784:682;;;;;;;;3474:128;;3555:6;3549:13;3540:22;;3567:30;3591:5;3567:30;;;3534:68;;;;;3609:130;;3689:6;3676:20;3667:29;;3701:33;3728:5;3701:33;;;3661:78;;;;;3746:134;;3830:6;3824:13;3815:22;;3842:33;3869:5;3842:33;;;3809:71;;;;;3888:440;;3989:3;3982:4;3974:6;3970:17;3966:27;3956:2;;4007:1;4004;3997:12;3956:2;4044:6;4031:20;4066:64;4081:48;4122:6;4081:48;;;4066:64;;;4057:73;;4150:6;4143:5;4136:21;4186:4;4178:6;4174:17;4219:4;4212:5;4208:16;4254:3;4245:6;4240:3;4236:16;4233:25;4230:2;;;4271:1;4268;4261:12;4230:2;4281:41;4315:6;4310:3;4305;4281:41;;;3949:379;;;;;;;;4337:442;;4449:3;4442:4;4434:6;4430:17;4426:27;4416:2;;4467:1;4464;4457:12;4416:2;4497:6;4491:13;4519:64;4534:48;4575:6;4534:48;;;4519:64;;;4510:73;;4603:6;4596:5;4589:21;4639:4;4631:6;4627:17;4672:4;4665:5;4661:16;4707:3;4698:6;4693:3;4689:16;4686:25;4683:2;;;4724:1;4721;4714:12;4683:2;4734:39;4766:6;4761:3;4756;4734:39;;;4409:370;;;;;;;;4787:178;;4891:6;4878:20;4869:29;;4903:57;4954:5;4903:57;;;4863:102;;;;;5009:500;;5135:4;5123:9;5118:3;5114:19;5110:30;5107:2;;;5153:1;5150;5143:12;5107:2;5171:20;5186:4;5171:20;;;5162:29;;5239:1;5270:60;5326:3;5317:6;5306:9;5302:22;5270:60;;;5264:3;5257:5;5253:15;5246:85;5201:141;5394:2;5427:60;5483:3;5474:6;5463:9;5459:22;5427:60;;;5420:4;5413:5;5409:16;5402:86;5352:147;5101:408;;;;;5586:1027;;5717:4;5705:9;5700:3;5696:19;5692:30;5689:2;;;5735:1;5732;5725:12;5689:2;5753:20;5768:4;5753:20;;;5744:29;;5854:1;5843:9;5839:17;5833:24;5877:18;5869:6;5866:30;5863:2;;;5909:1;5906;5899:12;5863:2;5943:81;6020:3;6011:6;6000:9;5996:22;5943:81;;;5937:3;5930:5;5926:15;5919:106;5783:253;6111:2;6100:9;6096:18;6090:25;6135:18;6127:6;6124:30;6121:2;;;6167:1;6164;6157:12;6121:2;6202:128;6326:3;6317:6;6306:9;6302:22;6202:128;;;6195:4;6188:5;6184:16;6177:154;6046:296;6419:2;6408:9;6404:18;6398:25;6443:18;6435:6;6432:30;6429:2;;;6475:1;6472;6465:12;6429:2;6510:81;6587:3;6578:6;6567:9;6563:22;6510:81;;;6503:4;6496:5;6492:16;6485:107;6352:251;5683:930;;;;;6620:134;;6704:6;6698:13;6689:22;;6716:33;6743:5;6716:33;;;6683:71;;;;;6761:257;;6873:2;6861:9;6852:7;6848:23;6844:32;6841:2;;;6889:1;6886;6879:12;6841:2;6924:1;6941:61;6994:7;6985:6;6974:9;6970:22;6941:61;;;6931:71;;6903:105;6835:183;;;;;7025:360;;7149:2;7137:9;7128:7;7124:23;7120:32;7117:2;;;7165:1;7162;7155:12;7117:2;7221:1;7210:9;7206:17;7200:24;7244:18;7236:6;7233:30;7230:2;;;7276:1;7273;7266:12;7230:2;7296:73;7361:7;7352:6;7341:9;7337:22;7296:73;;;7286:83;;7179:196;7111:274;;;;;7392:769;;;;;7580:3;7568:9;7559:7;7555:23;7551:33;7548:2;;;7597:1;7594;7587:12;7548:2;7632:1;7649:77;7718:7;7709:6;7698:9;7694:22;7649:77;;;7639:87;;7611:121;7763:2;7781:53;7826:7;7817:6;7806:9;7802:22;7781:53;;;7771:63;;7742:98;7871:2;7889:53;7934:7;7925:6;7914:9;7910:22;7889:53;;;7879:63;;7850:98;8007:2;7996:9;7992:18;7979:32;8031:18;8023:6;8020:30;8017:2;;;8063:1;8060;8053:12;8017:2;8083:62;8137:7;8128:6;8117:9;8113:22;8083:62;;;8073:72;;7958:193;7542:619;;;;;;;;8168:895;;;;;;8373:3;8361:9;8352:7;8348:23;8344:33;8341:2;;;8390:1;8387;8380:12;8341:2;8425:1;8442:77;8511:7;8502:6;8491:9;8487:22;8442:77;;;8432:87;;8404:121;8556:2;8574:53;8619:7;8610:6;8599:9;8595:22;8574:53;;;8564:63;;8535:98;8664:2;8682:53;8727:7;8718:6;8707:9;8703:22;8682:53;;;8672:63;;8643:98;8772:2;8790:53;8835:7;8826:6;8815:9;8811:22;8790:53;;;8780:63;;8751:98;8908:3;8897:9;8893:19;8880:33;8933:18;8925:6;8922:30;8919:2;;;8965:1;8962;8955:12;8919:2;8985:62;9039:7;9030:6;9019:9;9015:22;8985:62;;;8975:72;;8859:194;8335:728;;;;;;;;;9070:404;;9216:2;9204:9;9195:7;9191:23;9187:32;9184:2;;;9232:1;9229;9222:12;9184:2;9288:1;9277:9;9273:17;9267:24;9311:18;9303:6;9300:30;9297:2;;;9343:1;9340;9333:12;9297:2;9363:95;9450:7;9441:6;9430:9;9426:22;9363:95;;;9353:105;;9246:218;9178:296;;;;;9482:345;;9677:144;9817:3;9809:6;9677:144;;;9663:158;;9656:171;;;;;9836:281;;9975:102;10073:3;10065:6;9975:102;;;10106:4;10101:3;10097:14;10083:28;;9968:149;;;;;10125:103;10198:24;10216:5;10198:24;;;10193:3;10186:37;10180:48;;;10316:1224;;10555:101;10650:5;10555:101;;;10669:133;10795:6;10790:3;10669:133;;;10662:140;;10825:3;10867:4;10859:6;10855:17;10850:3;10846:27;10894:103;10991:5;10894:103;;;11017:7;11045:1;11030:471;11055:6;11052:1;11049:13;11030:471;;;11117:9;11111:4;11107:20;11102:3;11095:33;11162:6;11156:13;11184:158;11337:4;11322:13;11184:158;;;11176:166;;11359:107;11459:6;11359:107;;;11349:117;;11489:4;11484:3;11480:14;11473:21;;11087:414;11077:1;11074;11070:9;11065:14;;11030:471;;;11034:14;11514:4;11507:11;;11531:3;11524:10;;10534:1006;;;;;;;;;;11625:862;;11808:76;11878:5;11808:76;;;11897:102;11992:6;11987:3;11897:102;;;11890:109;;12020:78;12092:5;12020:78;;;12118:7;12146:1;12131:334;12156:6;12153:1;12150:13;12131:334;;;12223:6;12217:13;12244:115;12355:3;12340:13;12244:115;;;12237:122;;12376:82;12451:6;12376:82;;;12366:92;;12188:277;12178:1;12175;12171:9;12166:14;;12131:334;;;12135:14;12478:3;12471:10;;11787:700;;;;;;;;12495:113;12578:24;12596:5;12578:24;;;12573:3;12566:37;12560:48;;;12615:343;;12725:38;12757:5;12725:38;;;12775:70;12838:6;12833:3;12775:70;;;12768:77;;12850:52;12895:6;12890:3;12883:4;12876:5;12872:16;12850:52;;;12923:29;12945:6;12923:29;;;12918:3;12914:39;12907:46;;12705:253;;;;;;12965:356;;13093:38;13125:5;13093:38;;;13143:88;13224:6;13219:3;13143:88;;;13136:95;;13236:52;13281:6;13276:3;13269:4;13262:5;13258:16;13236:52;;;13309:6;13304:3;13300:16;13293:23;;13073:248;;;;;;13329:465;;13489:67;13553:2;13548:3;13489:67;;;13482:74;;13589:66;13585:1;13580:3;13576:11;13569:87;13690:66;13685:2;13680:3;13676:12;13669:88;13785:2;13780:3;13776:12;13769:19;;13475:319;;;;13803:465;;13963:67;14027:2;14022:3;13963:67;;;13956:74;;14063:66;14059:1;14054:3;14050:11;14043:87;14164:66;14159:2;14154:3;14150:12;14143:88;14259:2;14254:3;14250:12;14243:19;;13949:319;;;;14277:465;;14437:67;14501:2;14496:3;14437:67;;;14430:74;;14537:66;14533:1;14528:3;14524:11;14517:87;14638:66;14633:2;14628:3;14624:12;14617:88;14733:2;14728:3;14724:12;14717:19;;14423:319;;;;14751:465;;14911:67;14975:2;14970:3;14911:67;;;14904:74;;15011:66;15007:1;15002:3;14998:11;14991:87;15112:66;15107:2;15102:3;15098:12;15091:88;15207:2;15202:3;15198:12;15191:19;;14897:319;;;;15295:470;15434:4;15429:3;15425:14;15515:3;15508:5;15504:15;15498:22;15526:62;15583:3;15578;15574:13;15560:12;15526:62;;;15454:140;15669:4;15662:5;15658:16;15652:23;15681:63;15738:4;15733:3;15729:14;15715:12;15681:63;;;15604:146;15407:358;;;;15772:103;15845:24;15863:5;15845:24;;;15840:3;15833:37;15827:48;;;15882:262;;16026:93;16115:3;16106:6;16026:93;;;16019:100;;16136:3;16129:10;;16007:137;;;;;16151:549;;16413:2;16402:9;16398:18;16390:26;;16463:9;16457:4;16453:20;16449:1;16438:9;16434:17;16427:47;16488:202;16685:4;16676:6;16488:202;;;16480:210;;16384:316;;;;;16707:213;;16825:2;16814:9;16810:18;16802:26;;16839:71;16907:1;16896:9;16892:17;16883:6;16839:71;;;16796:124;;;;;16927:492;;17109:2;17098:9;17094:18;17086:26;;17159:9;17153:4;17149:20;17145:1;17134:9;17130:17;17123:47;17184:76;17255:4;17246:6;17184:76;;;17176:84;;17308:9;17302:4;17298:20;17293:2;17282:9;17278:18;17271:48;17333:76;17404:4;17395:6;17333:76;;;17325:84;;17080:339;;;;;;17426:407;;17617:2;17606:9;17602:18;17594:26;;17667:9;17661:4;17657:20;17653:1;17642:9;17638:17;17631:47;17692:131;17818:4;17692:131;;;17684:139;;17588:245;;;;17840:407;;18031:2;18020:9;18016:18;18008:26;;18081:9;18075:4;18071:20;18067:1;18056:9;18052:17;18045:47;18106:131;18232:4;18106:131;;;18098:139;;18002:245;;;;18254:407;;18445:2;18434:9;18430:18;18422:26;;18495:9;18489:4;18485:20;18481:1;18470:9;18466:17;18459:47;18520:131;18646:4;18520:131;;;18512:139;;18416:245;;;;18668:407;;18859:2;18848:9;18844:18;18836:26;;18909:9;18903:4;18899:20;18895:1;18884:9;18880:17;18873:47;18934:131;19060:4;18934:131;;;18926:139;;18830:245;;;;19082:256;;19144:2;19138:9;19128:19;;19182:4;19174:6;19170:17;19281:6;19269:10;19266:22;19245:18;19233:10;19230:34;19227:62;19224:2;;;19302:1;19299;19292:12;19224:2;19322:10;19318:2;19311:22;19122:216;;;;;19345:300;;19500:18;19492:6;19489:30;19486:2;;;19532:1;19529;19522:12;19486:2;19567:4;19559:6;19555:17;19547:25;;19630:4;19624;19620:15;19612:23;;19423:222;;;;19652:347;;19854:18;19846:6;19843:30;19840:2;;;19886:1;19883;19876:12;19840:2;19921:4;19913:6;19909:17;19901:25;;19984:4;19978;19974:15;19966:23;;19777:222;;;;20006:300;;20161:18;20153:6;20150:30;20147:2;;;20193:1;20190;20183:12;20147:2;20228:4;20220:6;20216:17;20208:25;;20291:4;20285;20281:15;20273:23;;20084:222;;;;20313:326;;20494:18;20486:6;20483:30;20480:2;;;20526:1;20523;20516:12;20480:2;20561:4;20553:6;20549:17;20541:25;;20624:4;20618;20614:15;20606:23;;20417:222;;;;20646:321;;20789:18;20781:6;20778:30;20775:2;;;20821:1;20818;20811:12;20775:2;20888:4;20884:9;20877:4;20869:6;20865:17;20861:33;20853:41;;20952:4;20946;20942:15;20934:23;;20712:255;;;;20974:198;;21107:3;21099:11;;21145:4;21140:3;21136:14;21128:22;;21093:79;;;;21179:173;;21287:3;21279:11;;21325:4;21320:3;21316:14;21308:22;;21273:79;;;;21359:184;;21515:5;21509:12;21499:22;;21480:63;;;;21550:159;;21681:5;21675:12;21665:22;;21646:63;;;;21716:121;;21809:5;21803:12;21793:22;;21774:63;;;;21844:155;;21989:4;21984:3;21980:14;21972:22;;21966:33;;;;22006:130;;22126:4;22121:3;22117:14;22109:22;;22103:33;;;;22144:225;;22321:6;22316:3;22309:19;22358:4;22353:3;22349:14;22334:29;;22302:67;;;;;22378:194;;22524:6;22519:3;22512:19;22561:4;22556:3;22552:14;22537:29;;22505:67;;;;;22581:162;;22695:6;22690:3;22683:19;22732:4;22727:3;22723:14;22708:29;;22676:67;;;;;22752:144;;22887:3;22872:18;;22865:31;;;;;22905:163;;23020:6;23015:3;23008:19;23057:4;23052:3;23048:14;23033:29;;23001:67;;;;;23076:91;;23138:24;23156:5;23138:24;;;23127:35;;23121:46;;;;23174:85;;23247:5;23240:13;23233:21;23222:32;;23216:43;;;;23266:72;;23328:5;23317:16;;23311:27;;;;23345:115;;23431:24;23449:5;23431:24;;;23420:35;;23414:46;;;;23467:121;;23540:42;23533:5;23529:54;23518:65;;23512:76;;;;23595:72;;23657:5;23646:16;;23640:27;;;;23675:145;23756:6;23751:3;23746;23733:30;23812:1;23803:6;23798:3;23794:16;23787:27;23726:94;;;;23829:268;23894:1;23901:101;23915:6;23912:1;23909:13;23901:101;;;23991:1;23986:3;23982:11;23976:18;23972:1;23967:3;23963:11;23956:39;23937:2;23934:1;23930:10;23925:15;;23901:101;;;24017:6;24014:1;24011:13;24008:2;;;24082:1;24073:6;24068:3;24064:16;24057:27;24008:2;23878:219;;;;;24105:97;;24193:2;24189:7;24184:2;24177:5;24173:14;24169:28;24159:38;;24153:49;;;;24210:117;24279:24;24297:5;24279:24;;;24272:5;24269:35;24259:2;;24318:1;24315;24308:12;24259:2;24253:74;;24334:111;24400:21;24415:5;24400:21;;;24393:5;24390:32;24380:2;;24436:1;24433;24426:12;24380:2;24374:71;;24452:117;24521:24;24539:5;24521:24;;;24514:5;24511:35;24501:2;;24560:1;24557;24550:12;24501:2;24495:74;;24576:165;24669:48;24711:5;24669:48;;;24662:5;24659:59;24649:2;;24732:1;24729;24722:12;24649:2;24643:98;;24748:117;24817:24;24835:5;24817:24;;;24810:5;24807:35;24797:2;;24856:1;24853;24846:12;24797:2;24791:74;"}};var bytecode$3="";var ConditionalTransactionDelegateTarget = {abi:abi$3,evm:evm$3,"interface":[{constant:false,inputs:[{name:"challengeRegistry",type:"address"},{name:"freeBalanceAppIdentityHash",type:"bytes32"},{name:"appIdentityHash",type:"bytes32"},{name:"interpreterAddress",type:"address"},{name:"interpreterParams",type:"bytes"}],name:"executeEffectOfInterpretedAppOutcome",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"challengeRegistry",type:"address"},{name:"freeBalanceAppIdentityHash",type:"bytes32"},{name:"coinTransferInterpreterAddress",type:"address"},{name:"coinTransferInterpreterParams",type:"bytes"}],name:"executeEffectOfFreeBalance",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"}],bytecode:bytecode$3};

    class EthereumCommitment {
    }
    var MultisigOperation;
    (function (MultisigOperation) {
        MultisigOperation[MultisigOperation["Call"] = 0] = "Call";
        MultisigOperation[MultisigOperation["DelegateCall"] = 1] = "DelegateCall";
        MultisigOperation[MultisigOperation["Create"] = 2] = "Create";
    })(MultisigOperation || (MultisigOperation = {}));

    const { signaturesToBytesSortedBySignerAddress } = cf_js.utils;
    class MultisigCommitment extends EthereumCommitment {
        constructor(multisigAddress, multisigOwners) {
            super();
            this.multisigAddress = multisigAddress;
            this.multisigOwners = multisigOwners;
        }
        getSignedTransaction(sigs) {
            const multisigInput = this.getTransactionDetails();
            const signatureBytes = signaturesToBytesSortedBySignerAddress(this.hashToSign(), ...sigs);
            const txData = new utils.Interface(MinimumViableMultisig.abi).functions.execTransaction.encode([
                multisigInput.to,
                multisigInput.value,
                multisigInput.data,
                multisigInput.operation,
                signatureBytes
            ]);
            return { to: this.multisigAddress, value: 0, data: txData };
        }
        hashToSign() {
            const { to, value, data, operation } = this.getTransactionDetails();
            return utils.keccak256(utils.solidityPack(["bytes1", "address[]", "address", "uint256", "bytes", "uint8"], ["0x19", this.multisigOwners, to, value, data, operation]));
        }
    }

    const iface = new utils.Interface(ConditionalTransactionDelegateTarget.abi);
    class ConditionalTransaction extends MultisigCommitment {
        constructor(networkContext, multisig, multisigOwners, appIdentityHash, freeBalanceAppIdentityHash, interpreterAddr, interpreterParams) {
            super(multisig, multisigOwners);
            this.networkContext = networkContext;
            this.multisig = multisig;
            this.multisigOwners = multisigOwners;
            this.appIdentityHash = appIdentityHash;
            this.freeBalanceAppIdentityHash = freeBalanceAppIdentityHash;
            this.interpreterAddr = interpreterAddr;
            this.interpreterParams = interpreterParams;
        }
        getTransactionDetails() {
            return {
                to: this.networkContext.ConditionalTransactionDelegateTarget,
                value: 0,
                data: iface.functions.executeEffectOfInterpretedAppOutcome.encode([
                    this.networkContext.ChallengeRegistry,
                    this.freeBalanceAppIdentityHash,
                    this.appIdentityHash,
                    this.interpreterAddr,
                    this.interpreterParams
                ]),
                operation: MultisigOperation.DelegateCall
            };
        }
    }

    var abi$4=[{constant:true,inputs:[{name:"",type:"bytes32"}],name:"appOutcomes",outputs:[{name:"",type:"bytes"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"identityHash",type:"bytes32"}],name:"isStateFinalized",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{components:[{name:"channelNonce",type:"uint256"},{name:"participants",type:"address[]"},{name:"appDefinition",type:"address"},{name:"defaultTimeout",type:"uint256"}],name:"appIdentity",type:"tuple"},{name:"signatures",type:"bytes"}],name:"cancelChallenge",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"signatures",type:"bytes"},{name:"txHash",type:"bytes32"},{name:"signers",type:"address[]"}],name:"verifySignatures",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"pure",type:"function"},{constant:false,inputs:[{components:[{name:"channelNonce",type:"uint256"},{name:"participants",type:"address[]"},{name:"appDefinition",type:"address"},{name:"defaultTimeout",type:"uint256"}],name:"appIdentity",type:"tuple"},{components:[{name:"appState",type:"bytes"},{name:"versionNumber",type:"uint256"},{name:"timeout",type:"uint256"},{name:"signatures",type:"bytes"}],name:"req",type:"tuple"},{components:[{name:"encodedAction",type:"bytes"},{name:"signature",type:"bytes"},{name:"checkForTerminal",type:"bool"}],name:"action",type:"tuple"}],name:"setStateWithAction",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"identityHash",type:"bytes32"}],name:"getOutcome",outputs:[{name:"",type:"bytes"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"",type:"bytes32"}],name:"appChallenges",outputs:[{name:"status",type:"uint8"},{name:"latestSubmitter",type:"address"},{name:"appStateHash",type:"bytes32"},{name:"challengeCounter",type:"uint256"},{name:"finalizesAt",type:"uint256"},{name:"versionNumber",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{components:[{name:"channelNonce",type:"uint256"},{name:"participants",type:"address[]"},{name:"appDefinition",type:"address"},{name:"defaultTimeout",type:"uint256"}],name:"appIdentity",type:"tuple"},{components:[{name:"appStateHash",type:"bytes32"},{name:"versionNumber",type:"uint256"},{name:"timeout",type:"uint256"},{name:"signatures",type:"bytes"}],name:"req",type:"tuple"}],name:"setState",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"identityHash",type:"bytes32"}],name:"getAppChallenge",outputs:[{components:[{name:"status",type:"uint8"},{name:"latestSubmitter",type:"address"},{name:"appStateHash",type:"bytes32"},{name:"challengeCounter",type:"uint256"},{name:"finalizesAt",type:"uint256"},{name:"versionNumber",type:"uint256"}],name:"",type:"tuple"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"signatures",type:"bytes"},{name:"pos",type:"uint256"}],name:"signatureSplit",outputs:[{name:"v",type:"uint8"},{name:"r",type:"bytes32"},{name:"s",type:"bytes32"}],payable:false,stateMutability:"pure",type:"function"},{constant:false,inputs:[{components:[{name:"channelNonce",type:"uint256"},{name:"participants",type:"address[]"},{name:"appDefinition",type:"address"},{name:"defaultTimeout",type:"uint256"}],name:"appIdentity",type:"tuple"},{name:"appState",type:"bytes"},{name:"action",type:"bytes"},{name:"actionSignature",type:"bytes"},{name:"claimFinal",type:"bool"}],name:"respondToChallenge",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"messageSignature",type:"bytes"},{name:"txHash",type:"bytes32"},{name:"pos",type:"uint256"}],name:"recoverKey",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"pure",type:"function"},{constant:false,inputs:[{components:[{name:"channelNonce",type:"uint256"},{name:"participants",type:"address[]"},{name:"appDefinition",type:"address"},{name:"defaultTimeout",type:"uint256"}],name:"appIdentity",type:"tuple"},{name:"finalState",type:"bytes"}],name:"setOutcome",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{inputs:[],payable:false,stateMutability:"nonpayable",type:"constructor"}];var evm$4={bytecode:{linkReferences:{},object:"",opcodes:"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x356C DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7BE05807 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xB817DCC2 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xB817DCC2 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0xC9359A9C EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0xD6A1F669 EQ PUSH2 0x29B JUMPI DUP1 PUSH4 0xF12A3834 EQ PUSH2 0x2CB JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x7BE05807 EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0x7EDBDBA3 EQ PUSH2 0x201 JUMPI DUP1 PUSH4 0xAD2A7FCA EQ PUSH2 0x21D JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x300C879 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x69B90FF EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x2560D867 EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0x32C5D69B EQ PUSH2 0x150 JUMPI DUP1 PUSH4 0x53373162 EQ PUSH2 0x180 JUMPI DUP1 PUSH4 0x5D1A3B82 EQ PUSH2 0x19C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0xE9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1DB1 JUMP JUMPDEST PUSH2 0x2E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x119 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1DB1 JUMP JUMPDEST PUSH2 0x397 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12B SWAP2 SWAP1 PUSH2 0x2DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x149 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1F55 JUMP JUMPDEST PUSH2 0x43F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x16A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x165 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1E1B JUMP JUMPDEST PUSH2 0x5C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x177 SWAP2 SWAP1 PUSH2 0x2DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x195 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2098 JUMP JUMPDEST PUSH2 0x712 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x1B1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1DB1 JUMP JUMPDEST PUSH2 0xA23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C3 SWAP2 SWAP1 PUSH2 0x2E22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x1E1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1DB1 JUMP JUMPDEST PUSH2 0xAD8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2EB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x216 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x212F JUMP JUMPDEST PUSH2 0xB41 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x237 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x232 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1DB1 JUMP JUMPDEST PUSH2 0xD67 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x244 SWAP2 SWAP1 PUSH2 0x3173 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x267 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x262 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1F01 JUMP JUMPDEST PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x276 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x299 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x294 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1FC1 JUMP JUMPDEST PUSH2 0xE6D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x2B0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1E9A JUMP JUMPDEST PUSH2 0x11A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C2 SWAP2 SWAP1 PUSH2 0x2D85 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x2E0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1F55 JUMP JUMPDEST PUSH2 0x121B JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x38F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x364 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x38F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x372 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP1 DUP2 GT ISZERO PUSH2 0x3A5 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x3D3 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x438 JUMPI POP PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x3E7 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x415 JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0x437 JUMPI POP NUMBER PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD GT ISZERO JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44A DUP4 PUSH2 0x1370 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x46F JUMPI INVALID JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x48C JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0x49D JUMPI POP NUMBER DUP2 PUSH1 0x3 ADD SLOAD LT ISZERO JUMPDEST PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D3 SWAP1 PUSH2 0x2F33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4F6 DUP4 DUP4 PUSH1 0x1 ADD SLOAD DUP5 PUSH1 0x4 ADD SLOAD DUP9 PUSH1 0x60 ADD MLOAD PUSH2 0x13AA JUMP JUMPDEST SWAP1 POP PUSH2 0x507 DUP5 DUP3 DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x546 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x53D SWAP1 PUSH2 0x2F93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x571 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP CALLER DUP3 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x705 JUMPI PUSH2 0x5E1 DUP7 DUP7 DUP4 PUSH2 0x11A4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x603 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x661 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x658 SWAP1 PUSH2 0x2FD3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x684 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x6E2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D9 SWAP1 PUSH2 0x3073 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6EE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x5CD JUMP JUMPDEST POP PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x71D DUP5 PUSH2 0x1370 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x744 DUP3 DUP7 PUSH1 0x20 ADD MLOAD DUP7 PUSH2 0x13E9 JUMP JUMPDEST PUSH2 0x783 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x77A SWAP1 PUSH2 0x2FB3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x790 JUMPI INVALID JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x7AD JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x7F0 JUMPI POP PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x7C1 JUMPI INVALID JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x7DE JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0x7EF JUMPI POP NUMBER DUP2 PUSH1 0x3 ADD SLOAD LT ISZERO JUMPDEST JUMPDEST PUSH2 0x82F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x826 SWAP1 PUSH2 0x30F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x4 ADD SLOAD DUP5 PUSH1 0x20 ADD MLOAD GT PUSH2 0x879 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x870 SWAP1 PUSH2 0x2F73 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x88D DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP7 DUP7 PUSH2 0x1434 JUMP JUMPDEST PUSH2 0x8CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8C3 SWAP1 PUSH2 0x2F53 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH2 0x8E5 DUP7 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x14C3 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x972 JUMPI PUSH2 0x8FF DUP7 PUSH1 0x40 ADD MLOAD DUP3 PUSH2 0x155E JUMP JUMPDEST PUSH2 0x93E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x935 SWAP1 PUSH2 0x30B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST NUMBER DUP3 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x2 DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x968 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP PUSH2 0x9A8 JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD NUMBER ADD DUP3 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x9A2 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP JUMPDEST DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP3 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x20 ADD MLOAD DUP3 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP3 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER DUP3 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0xACC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAA1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xACC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAAF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 POP DUP7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB4C DUP4 PUSH2 0x1370 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xB71 JUMPI INVALID JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xB8E JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0xBD1 JUMPI POP PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xBA2 JUMPI INVALID JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xBBF JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0xBD0 JUMPI POP NUMBER DUP2 PUSH1 0x3 ADD SLOAD LT ISZERO JUMPDEST JUMPDEST PUSH2 0xC10 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC07 SWAP1 PUSH2 0x3093 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC1F DUP3 DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH2 0x15F1 JUMP JUMPDEST PUSH2 0xC5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC55 SWAP1 PUSH2 0x3033 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x4 ADD SLOAD DUP4 PUSH1 0x20 ADD MLOAD GT PUSH2 0xCA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC9F SWAP1 PUSH2 0x2F13 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x40 ADD MLOAD GT PUSH2 0xCBB JUMPI PUSH1 0x2 PUSH2 0xCBE JUMP JUMPDEST PUSH1 0x1 JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xCDD JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x0 ADD MLOAD DUP2 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x20 ADD MLOAD DUP2 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x40 ADD MLOAD NUMBER ADD DUP2 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP2 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0xD6F PUSH2 0x1794 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xDAA JUMPI INVALID JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xDB5 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x41 MUL PUSH1 0x20 DUP2 ADD DUP7 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP2 ADD DUP7 ADD MLOAD SWAP2 POP PUSH1 0xFF PUSH1 0x41 DUP3 ADD DUP8 ADD MLOAD AND SWAP4 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE78 DUP7 PUSH2 0x1370 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xE9D JUMPI INVALID JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xEBA JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0xECB JUMPI POP NUMBER DUP2 PUSH1 0x3 ADD SLOAD LT ISZERO JUMPDEST PUSH2 0xF0A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF01 SWAP1 PUSH2 0x3133 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD DUP7 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0xF57 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4E SWAP1 PUSH2 0x2FF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD DUP7 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0xFA4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF9B SWAP1 PUSH2 0x3153 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xFB9 DUP9 PUSH1 0x40 ADD MLOAD DUP10 PUSH1 0x20 ADD MLOAD DUP10 PUSH2 0x1627 JUMP JUMPDEST SWAP1 POP PUSH2 0xFCE DUP6 DUP8 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 PUSH2 0x11A4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x103B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1032 SWAP1 PUSH2 0x3013 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH2 0x104C DUP10 PUSH1 0x40 ADD MLOAD DUP10 DUP10 PUSH2 0x14C3 JUMP JUMPDEST SWAP1 POP DUP5 ISZERO PUSH2 0x1128 JUMPI PUSH2 0x1062 DUP10 PUSH1 0x40 ADD MLOAD DUP3 PUSH2 0x155E JUMP JUMPDEST PUSH2 0x10A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1098 SWAP1 PUSH2 0x3053 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP CALLER DUP4 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP NUMBER DUP4 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x2 DUP4 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x111E JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP PUSH2 0x1199 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE POP POP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x11B4 DUP8 DUP7 PUSH2 0xE3E JUMP JUMPDEST DUP1 SWAP4 POP DUP2 SWAP5 POP DUP3 SWAP6 POP POP POP POP PUSH1 0x1 DUP7 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x11E3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2DBB JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1205 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1226 DUP4 PUSH2 0x1370 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x2 DUP1 DUP2 GT ISZERO PUSH2 0x124A JUMPI INVALID JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1267 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x12A9 JUMPI POP PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x127B JUMPI INVALID JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1298 JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0x12A8 JUMPI POP DUP1 PUSH1 0x3 ADD SLOAD NUMBER GT JUMPDEST JUMPDEST PUSH2 0x12E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12DF SWAP1 PUSH2 0x3113 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x1335 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x132C SWAP1 PUSH2 0x30D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1343 DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x16BD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1369 SWAP3 SWAP2 SWAP1 PUSH2 0x17EE JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x138D SWAP3 SWAP2 SWAP1 PUSH2 0x318E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x19 PUSH1 0xF8 SHL DUP6 DUP5 DUP5 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x13C9 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D0F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1419 DUP6 DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x1402 SWAP2 SWAP1 PUSH2 0x2D6E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x13AA JUMP JUMPDEST SWAP1 POP PUSH2 0x142A DUP4 PUSH1 0x60 ADD MLOAD DUP3 DUP7 PUSH2 0x5C0 JUMP JUMPDEST SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1446 DUP7 DUP7 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x1627 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1486 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x147F DUP5 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x1468 SWAP2 SWAP1 PUSH2 0x2D6E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP9 PUSH1 0x0 ADD MLOAD DUP11 PUSH1 0x20 ADD MLOAD PUSH2 0x1755 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x51C2E541 DUP5 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1500 SWAP3 SWAP2 SWAP1 PUSH2 0x2E7B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x152C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1555 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1DDA JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x59E537C1 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1599 SWAP2 SWAP1 PUSH2 0x2E22 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x15E9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1D88 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x160C DUP6 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x13AA JUMP JUMPDEST SWAP1 POP PUSH2 0x161D DUP4 PUSH1 0x60 ADD MLOAD DUP3 DUP7 PUSH2 0x5C0 JUMP JUMPDEST SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCE963AFD DUP4 DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1664 SWAP3 SWAP2 SWAP1 PUSH2 0x2E44 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x167C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1690 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x16B4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1D5F JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x67C40CC4 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16F8 SWAP2 SWAP1 PUSH2 0x2E22 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1710 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1724 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x174D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1DDA JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x19 PUSH1 0xF8 SHL DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1774 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2CB4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x17AC JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x182F JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x185D JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x185D JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x185C JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1841 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x186A SWAP2 SWAP1 PUSH2 0x186E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1890 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x188C JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x1874 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18A2 DUP2 PUSH2 0x34CD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x18B7 DUP2 PUSH2 0x34CD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x18E1 PUSH2 0x18DC DUP3 PUSH2 0x3222 JUMP JUMPDEST PUSH2 0x31F5 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x1906 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1936 JUMPI DUP2 PUSH2 0x191C DUP9 DUP3 PUSH2 0x1893 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1909 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1964 PUSH2 0x195F DUP3 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x31F5 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x1989 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x19B9 JUMPI DUP2 PUSH2 0x199F DUP9 DUP3 PUSH2 0x1893 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x198C JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x19D2 DUP2 PUSH2 0x34E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x19E7 DUP2 PUSH2 0x34E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x19FC DUP2 PUSH2 0x34FB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A26 PUSH2 0x1A21 DUP3 PUSH2 0x3272 JUMP JUMPDEST PUSH2 0x31F5 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1A42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A4D DUP4 DUP3 DUP5 PUSH2 0x341E JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A7A PUSH2 0x1A75 DUP3 PUSH2 0x329E JUMP JUMPDEST PUSH2 0x31F5 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1A96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AA1 DUP4 DUP3 DUP5 PUSH2 0x341E JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1ABB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1ACE PUSH2 0x1AC9 DUP3 PUSH2 0x329E JUMP JUMPDEST PUSH2 0x31F5 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1AEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AF5 DUP4 DUP3 DUP5 PUSH2 0x342D JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B1A PUSH1 0x80 PUSH2 0x31F5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B2A DUP5 DUP3 DUP6 ADD PUSH2 0x1D4A JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B56 DUP5 DUP3 DUP6 ADD PUSH2 0x18BD JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1B6A DUP5 DUP3 DUP6 ADD PUSH2 0x1893 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x1B7E DUP5 DUP3 DUP6 ADD PUSH2 0x1D4A JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BA6 PUSH1 0x60 PUSH2 0x31F5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BCE DUP5 DUP3 DUP6 ADD PUSH2 0x1A02 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BFA DUP5 DUP3 DUP6 ADD PUSH2 0x1A02 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1C0E DUP5 DUP3 DUP6 ADD PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C36 PUSH1 0x80 PUSH2 0x31F5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C5E DUP5 DUP3 DUP6 ADD PUSH2 0x1A02 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x1C72 DUP5 DUP3 DUP6 ADD PUSH2 0x1D4A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1C86 DUP5 DUP3 DUP6 ADD PUSH2 0x1D4A JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1CA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CB2 DUP5 DUP3 DUP6 ADD PUSH2 0x1A02 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CDA PUSH1 0x80 PUSH2 0x31F5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1CEA DUP5 DUP3 DUP6 ADD PUSH2 0x19ED JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x1CFE DUP5 DUP3 DUP6 ADD PUSH2 0x1D4A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1D12 DUP5 DUP3 DUP6 ADD PUSH2 0x1D4A JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D3E DUP5 DUP3 DUP6 ADD PUSH2 0x1A02 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1D59 DUP2 PUSH2 0x3512 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D7F DUP5 DUP3 DUP6 ADD PUSH2 0x18A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1DA8 DUP5 DUP3 DUP6 ADD PUSH2 0x19D8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1DD1 DUP5 DUP3 DUP6 ADD PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E12 DUP5 DUP3 DUP6 ADD PUSH2 0x1AAA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1E30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E56 DUP7 DUP3 DUP8 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1E67 DUP7 DUP3 DUP8 ADD PUSH2 0x19ED JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E90 DUP7 DUP3 DUP8 ADD PUSH2 0x1940 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1EAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1EC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1ED5 DUP7 DUP3 DUP8 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1EE6 DUP7 DUP3 DUP8 ADD PUSH2 0x19ED JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1EF7 DUP7 DUP3 DUP8 ADD PUSH2 0x1D4A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F3A DUP6 DUP3 DUP7 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1F4B DUP6 DUP3 DUP7 ADD PUSH2 0x1D4A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F8E DUP6 DUP3 DUP7 ADD PUSH2 0x1AFE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1FAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FB7 DUP6 DUP3 DUP7 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1FD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1FF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FFF DUP9 DUP3 DUP10 ADD PUSH2 0x1AFE JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x201C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2028 DUP9 DUP3 DUP10 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2045 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2051 DUP9 DUP3 DUP10 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x206E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x207A DUP9 DUP3 DUP10 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x208B DUP9 DUP3 DUP10 ADD PUSH2 0x19C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x20AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x20C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20D3 DUP7 DUP3 DUP8 ADD PUSH2 0x1AFE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x20F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20FC DUP7 DUP3 DUP8 ADD PUSH2 0x1C1A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2125 DUP7 DUP3 DUP8 ADD PUSH2 0x1B8A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x215C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2168 DUP6 DUP3 DUP7 ADD PUSH2 0x1AFE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2191 DUP6 DUP3 DUP7 ADD PUSH2 0x1CBE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21A7 DUP4 DUP4 PUSH2 0x21B3 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x21BC DUP2 PUSH2 0x336E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x21CB DUP2 PUSH2 0x336E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x21E2 PUSH2 0x21DD DUP3 PUSH2 0x336E JUMP JUMPDEST PUSH2 0x3460 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21F3 DUP3 PUSH2 0x32F5 JUMP JUMPDEST PUSH2 0x21FD DUP2 DUP6 PUSH2 0x3330 JUMP JUMPDEST SWAP4 POP PUSH2 0x2208 DUP4 PUSH2 0x32DA JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2239 JUMPI DUP2 MLOAD PUSH2 0x2220 DUP9 DUP3 PUSH2 0x219B JUMP JUMPDEST SWAP8 POP PUSH2 0x222B DUP4 PUSH2 0x3323 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x220C JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2251 DUP3 PUSH2 0x32EA JUMP JUMPDEST PUSH2 0x225B DUP2 DUP6 PUSH2 0x3330 JUMP JUMPDEST SWAP4 POP PUSH2 0x2266 DUP4 PUSH2 0x32CA JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2297 JUMPI DUP2 MLOAD PUSH2 0x227E DUP9 DUP3 PUSH2 0x219B JUMP JUMPDEST SWAP8 POP PUSH2 0x2289 DUP4 PUSH2 0x3316 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x226A JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x22AD DUP2 PUSH2 0x3380 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x22C4 PUSH2 0x22BF DUP3 PUSH2 0x338C JUMP JUMPDEST PUSH2 0x3472 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x22D3 DUP2 PUSH2 0x33B8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x22E2 DUP2 PUSH2 0x33B8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x22F9 PUSH2 0x22F4 DUP3 PUSH2 0x33B8 JUMP JUMPDEST PUSH2 0x347C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230A DUP3 PUSH2 0x330B JUMP JUMPDEST PUSH2 0x2314 DUP2 DUP6 PUSH2 0x3341 JUMP JUMPDEST SWAP4 POP PUSH2 0x2324 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x342D JUMP JUMPDEST PUSH2 0x232D DUP2 PUSH2 0x34A2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2343 DUP3 PUSH2 0x330B JUMP JUMPDEST PUSH2 0x234D DUP2 DUP6 PUSH2 0x3352 JUMP JUMPDEST SWAP4 POP PUSH2 0x235D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x342D JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2374 DUP3 PUSH2 0x3300 JUMP JUMPDEST PUSH2 0x237E DUP2 DUP6 PUSH2 0x3341 JUMP JUMPDEST SWAP4 POP PUSH2 0x238E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x342D JUMP JUMPDEST PUSH2 0x2397 DUP2 PUSH2 0x34A2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23AD DUP3 PUSH2 0x3300 JUMP JUMPDEST PUSH2 0x23B7 DUP2 DUP6 PUSH2 0x3352 JUMP JUMPDEST SWAP4 POP PUSH2 0x23C7 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x342D JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x23DC DUP2 PUSH2 0x340C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x23EB DUP2 PUSH2 0x340C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23FE PUSH1 0x3D DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x547269656420746F2063616C6C207365745374617465207769746820616E206F PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x757464617465642076657273696F6E4E756D6265722076657273696F6E000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2464 PUSH1 0x43 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x63616E63656C4368616C6C656E67652063616C6C6564206F6E20617070206E6F PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x7420696E2046494E414C495A45535F41465445525F444541444C494E45207374 PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x6174650000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24F0 PUSH1 0x44 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x736574537461746557697468416374696F6E2063616C6C656420776974682061 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6374696F6E207369676E656420627920696E636F7272656374207475726E2074 PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x616B657200000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x257C PUSH1 0x31 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x736574537461746557697468416374696F6E207761732063616C6C6564207769 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x7468206F75746461746564207374617465000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25E2 PUSH1 0x12 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x496E76616C6964207369676E6174757265730000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2622 PUSH1 0x43 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x43616C6C20746F20736574537461746557697468416374696F6E20696E636C75 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x64656420696E636F72726563746C79207369676E656420737461746520757064 PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x6174650000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26AE PUSH1 0x11 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x496E76616C6964207369676E6174757265000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26EE PUSH1 0x17 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x496E76616C6964207374617465207375626D6974746564000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x272E PUSH1 0x32 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x416374696F6E206D7573742068617665206265656E207369676E656420627920 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x636F7272656374207475726E2074616B65720000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2794 PUSH1 0x39 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x43616C6C20746F20736574537461746520696E636C7564656420696E636F7272 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6563746C79207369676E65642073746174652075706461746500000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27FA PUSH1 0x2F DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x417474656D7074656420746F20636C61696D46696E616C206F6E2061206E6F6E PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x2D7465726D696E616C2073746174650000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2860 PUSH1 0x1E DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x5369676E657273206E6F7420696E20617363656E64696E67206F726465720000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28A0 PUSH1 0x3D DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x7365745374617465207761732063616C6C6564206F6E20616E20617070207468 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x61742068617320616C7265616479206265656E2066696E616C697A6564000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2906 PUSH1 0x48 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x417474656D7074656420746F20636C61696D206E6F6E2D7465726D696E616C20 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x737461746520776173207465726D696E616C20696E2073657453746174655769 PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x7468416374696F6E000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2992 PUSH1 0x3B DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x7365744F7574636F6D652063616C6C6564207769746820696E636F7272656374 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x207769746E6573732064617461206F662066696E616C53746174650000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29F8 PUSH1 0x47 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x736574537461746557697468416374696F6E207761732063616C6C6564206F6E PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x20616E2061707020746861742068617320616C7265616479206265656E206669 PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x6E616C697A656400000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A84 PUSH1 0x42 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x7365744F7574636F6D652063616E206F6E6C792062652063616C6C6564206166 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x7465722061206368616C6C656E676520686173206265656E2066696E616C697A PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x6564000000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B10 PUSH1 0x46 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x726573706F6E64546F4368616C6C656E67652063616C6C6564206F6E20617070 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x206E6F7420696E2046494E414C495A45535F41465445525F444541444C494E45 PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x2073746174650000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B9C PUSH1 0x36 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x547269656420746F2070726F67726573732061206368616C6C656E6765207769 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x7468206E6F6E2D6167726565642075706F6E2061707000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2C0B PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x23D3 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2C1E PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x21B3 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2C31 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x22CA JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2C44 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2C70 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2C57 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x2C70 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x2C6A PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x2C70 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x2C79 DUP2 PUSH2 0x33F5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2C88 DUP2 PUSH2 0x33F5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2C9F PUSH2 0x2C9A DUP3 PUSH2 0x33F5 JUMP JUMPDEST PUSH2 0x3498 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2CAE DUP2 PUSH2 0x33FF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CC0 DUP3 DUP9 PUSH2 0x22B3 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH2 0x2CD0 DUP3 DUP8 PUSH2 0x21D1 JUMP JUMPDEST PUSH1 0x14 DUP3 ADD SWAP2 POP PUSH2 0x2CE0 DUP3 DUP7 PUSH2 0x22E8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x2CF0 DUP3 DUP6 PUSH2 0x2338 JUMP JUMPDEST SWAP2 POP PUSH2 0x2CFC DUP3 DUP5 PUSH2 0x2C8E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D1B DUP3 DUP9 PUSH2 0x22B3 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH2 0x2D2B DUP3 DUP8 PUSH2 0x22E8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x2D3B DUP3 DUP7 PUSH2 0x2C8E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x2D4B DUP3 DUP6 PUSH2 0x2C8E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x2D5B DUP3 DUP5 PUSH2 0x22E8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D7A DUP3 DUP5 PUSH2 0x23A2 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2D9A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x21C2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2DB5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x22A4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2DD0 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x22D9 JUMP JUMPDEST PUSH2 0x2DDD PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2CA5 JUMP JUMPDEST PUSH2 0x2DEA PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x22D9 JUMP JUMPDEST PUSH2 0x2DF7 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x22D9 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E1A DUP2 DUP5 PUSH2 0x2369 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E3C DUP2 DUP5 PUSH2 0x22FF JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E5E DUP2 DUP6 PUSH2 0x22FF JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2E72 DUP2 DUP5 PUSH2 0x21E8 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E95 DUP2 DUP6 PUSH2 0x22FF JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2EA9 DUP2 DUP5 PUSH2 0x22FF JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x2EC7 PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x23E2 JUMP JUMPDEST PUSH2 0x2ED4 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x21C2 JUMP JUMPDEST PUSH2 0x2EE1 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x22D9 JUMP JUMPDEST PUSH2 0x2EEE PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x2C7F JUMP JUMPDEST PUSH2 0x2EFB PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x2C7F JUMP JUMPDEST PUSH2 0x2F08 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x2C7F JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F2C DUP2 PUSH2 0x23F1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F4C DUP2 PUSH2 0x2457 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F6C DUP2 PUSH2 0x24E3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F8C DUP2 PUSH2 0x256F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2FAC DUP2 PUSH2 0x25D5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2FCC DUP2 PUSH2 0x2615 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2FEC DUP2 PUSH2 0x26A1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x300C DUP2 PUSH2 0x26E1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x302C DUP2 PUSH2 0x2721 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x304C DUP2 PUSH2 0x2787 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x306C DUP2 PUSH2 0x27ED JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x308C DUP2 PUSH2 0x2853 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x30AC DUP2 PUSH2 0x2893 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x30CC DUP2 PUSH2 0x28F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x30EC DUP2 PUSH2 0x2985 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x310C DUP2 PUSH2 0x29EB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x312C DUP2 PUSH2 0x2A77 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x314C DUP2 PUSH2 0x2B03 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x316C DUP2 PUSH2 0x2B8F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x3188 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2BF5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x31A3 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2C7F JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x31B5 DUP2 DUP5 PUSH2 0x2246 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x31D3 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2CA5 JUMP JUMPDEST PUSH2 0x31E0 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x22D9 JUMP JUMPDEST PUSH2 0x31ED PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x22D9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x40 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3239 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x32B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3379 DUP3 PUSH2 0x33D5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x33D0 DUP3 PUSH2 0x34C0 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3417 DUP3 PUSH2 0x33C2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x344B JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3430 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x345A JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x346B DUP3 PUSH2 0x3486 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3491 DUP3 PUSH2 0x34B3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x34CA JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH2 0x34D6 DUP2 PUSH2 0x336E JUMP JUMPDEST DUP2 EQ PUSH2 0x34E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x34ED DUP2 PUSH2 0x3380 JUMP JUMPDEST DUP2 EQ PUSH2 0x34F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3504 DUP2 PUSH2 0x33B8 JUMP JUMPDEST DUP2 EQ PUSH2 0x350F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x351B DUP2 PUSH2 0x33F5 JUMP JUMPDEST DUP2 EQ PUSH2 0x3526 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723058 KECCAK256 GT 0xad CREATE2 0xc6 CALLCODE 0xec JUMPI 0xe8 GAS 0xd4 0xe5 PUSH3 0x22C073 BALANCE 0xb5 PUSH21 0xA34ACDC55B292E2E9A1879423BB66C657870657269 PUSH14 0x656E74616CF564736F6C63430005 EXP STOP BLOCKHASH ",sourceMap:"411:249:0:-;;;634:24;8:9:-1;5:2;;;30:1;27;20:12;5:2;634:24:0;411:249;;;;;;"},deployedBytecode:{linkReferences:{},object:"608060405234801561001057600080fd5b50600436106100cf5760003560e01c80637be058071161008c578063b817dcc211610066578063b817dcc21461024d578063c9359a9c1461027f578063d6a1f6691461029b578063f12a3834146102cb576100cf565b80637be05807146101cc5780637edbdba314610201578063ad2a7fca1461021d576100cf565b80630300c879146100d4578063069b90ff146101045780632560d8671461013457806332c5d69b1461015057806353373162146101805780635d1a3b821461019c575b600080fd5b6100ee60048036036100e99190810190611db1565b6102e7565b6040516100fb9190612e00565b60405180910390f35b61011e60048036036101199190810190611db1565b610397565b60405161012b9190612da0565b60405180910390f35b61014e60048036036101499190810190611f55565b61043f565b005b61016a60048036036101659190810190611e1b565b6105c0565b6040516101779190612da0565b60405180910390f35b61019a60048036036101959190810190612098565b610712565b005b6101b660048036036101b19190810190611db1565b610a23565b6040516101c39190612e22565b60405180910390f35b6101e660048036036101e19190810190611db1565b610ad8565b6040516101f896959493929190612eb2565b60405180910390f35b61021b6004803603610216919081019061212f565b610b41565b005b61023760048036036102329190810190611db1565b610d67565b6040516102449190613173565b60405180910390f35b61026760048036036102629190810190611f01565b610e3e565b604051610276939291906131be565b60405180910390f35b61029960048036036102949190810190611fc1565b610e6d565b005b6102b560048036036102b09190810190611e9a565b6111a4565b6040516102c29190612d85565b60405180910390f35b6102e560048036036102e09190810190611f55565b61121b565b005b60016020528060005260406000206000915090508054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561038f5780601f106103645761010080835404028352916020019161038f565b820191906000526020600020905b81548152906001019060200180831161037257829003601f168201915b505050505081565b60006002808111156103a557fe5b60008084815260200190815260200160002060000160009054906101000a900460ff1660028111156103d357fe5b14806104385750600160028111156103e757fe5b60008084815260200190815260200160002060000160009054906101000a900460ff16600281111561041557fe5b1480156104375750436000808481526020019081526020016000206003015411155b5b9050919050565b600061044a83611370565b9050600080600083815260200190815260200160002090506001600281111561046f57fe5b8160000160009054906101000a900460ff16600281111561048c57fe5b14801561049d575043816003015410155b6104dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d390612f33565b60405180910390fd5b60006104f6838360010154846004015488606001516113aa565b9050610507848287602001516105c0565b610546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053d90612f93565b60405180910390fd5b6000826003018190555060008260000160006101000a81548160ff0219169083600281111561057157fe5b0217905550338260000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6000806000905060008090505b8351811015610705576105e18686836111a4565b73ffffffffffffffffffffffffffffffffffffffff1684828151811061060357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614610661576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065890612fd3565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1684828151811061068457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16116106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d990613073565b60405180910390fd5b8381815181106106ee57fe5b6020026020010151915080806001019150506105cd565b5060019150509392505050565b600061071d84611370565b905060008060008381526020019081526020016000209050610744828660200151866113e9565b610783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077a90612fb3565b60405180910390fd5b6000600281111561079057fe5b8160000160009054906101000a900460ff1660028111156107ad57fe5b14806107f05750600160028111156107c157fe5b8160000160009054906101000a900460ff1660028111156107de57fe5b1480156107ef575043816003015410155b5b61082f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610826906130f3565b60405180910390fd5b8060040154846020015111610879576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087090612f73565b60405180910390fd5b61088d856040015186602001518686611434565b6108cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c390612f53565b60405180910390fd5b60606108e58660400151866000015186600001516114c3565b9050836040015115610972576108ff86604001518261155e565b61093e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610935906130b3565b60405180910390fd5b43826003018190555060028260000160006101000a81548160ff0219169083600281111561096857fe5b02179055506109a8565b84604001514301826003018190555060018260000160006101000a81548160ff021916908360028111156109a257fe5b02179055505b808051906020012082600101819055508460200151826004018190555060018260020160008282540192505081905550338260000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b6060600160008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610acc5780601f10610aa157610100808354040283529160200191610acc565b820191906000526020600020905b815481529060010190602001808311610aaf57829003601f168201915b50505050509050919050565b60006020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154905086565b6000610b4c83611370565b90506000806000838152602001908152602001600020905060006002811115610b7157fe5b8160000160009054906101000a900460ff166002811115610b8e57fe5b1480610bd1575060016002811115610ba257fe5b8160000160009054906101000a900460ff166002811115610bbf57fe5b148015610bd0575043816003015410155b5b610c10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0790613093565b60405180910390fd5b610c1f828560200151856115f1565b610c5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5590613033565b60405180910390fd5b8060040154836020015111610ca8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9f90612f13565b60405180910390fd5b6000836040015111610cbb576002610cbe565b60015b8160000160006101000a81548160ff02191690836002811115610cdd57fe5b0217905550826000015181600101819055508260200151816004018190555082604001514301816003018190555060018160020160008282540192505081905550338160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b610d6f611794565b6000808381526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff166002811115610daa57fe5b6002811115610db557fe5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050919050565b60008060008360410260208101860151925060408101860151915060ff60418201870151169350509250925092565b6000610e7886611370565b90506000806000838152602001908152602001600020905060016002811115610e9d57fe5b8160000160009054906101000a900460ff166002811115610eba57fe5b148015610ecb575043816003015410155b610f0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0190613133565b60405180910390fd5b8060010154868051906020012014610f57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4e90612ff3565b60405180910390fd5b8060010154868051906020012014610fa4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9b90613153565b60405180910390fd5b6000610fb98860400151896020015189611627565b9050610fce85878051906020012060006111a4565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461103b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103290613013565b60405180910390fd5b606061104c896040015189896114c3565b905084156111285761106289604001518261155e565b6110a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109890613053565b60405180910390fd5b80805190602001208360010181905550338360000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555043836003018190555060028360000160006101000a81548160ff0219169083600281111561111e57fe5b0217905550611199565b600080858152602001908152602001600020600080820160006101000a81549060ff02191690556000820160016101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160009055600482016000905550505b505050505050505050565b6000806000806111b48786610e3e565b809350819450829550505050600186848484604051600081526020016040526040516111e39493929190612dbb565b6020604051602081039080840390855afa158015611205573d6000803e3d6000fd5b5050506020604051035193505050509392505050565b600061122683611370565b90506000806000838152602001908152602001600020905060028081111561124a57fe5b8160000160009054906101000a900460ff16600281111561126757fe5b14806112a957506001600281111561127b57fe5b8160000160009054906101000a900460ff16600281111561129857fe5b1480156112a85750806003015443115b5b6112e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112df90613113565b60405180910390fd5b8060010154838051906020012014611335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132c906130d3565b60405180910390fd5b6113438460400151846116bd565b6001600084815260200190815260200160002090805190602001906113699291906117ee565b5050505050565b60008160000151826020015160405160200161138d92919061318e565b604051602081830303815290604052805190602001209050919050565b6000601960f81b858484876040516020016113c9959493929190612d0f565b604051602081830303815290604052805190602001209050949350505050565b6000806114198584600001516040516114029190612d6e565b6040518091039020856020015186604001516113aa565b905061142a836060015182866105c0565b9150509392505050565b60008061144686868660000151611627565b90506000611486846020015161147f8488600001516040516114689190612d6e565b604051809103902088600001518a60200151611755565b60006111a4565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161492505050949350505050565b60608373ffffffffffffffffffffffffffffffffffffffff166351c2e54184846040518363ffffffff1660e01b8152600401611500929190612e7b565b60006040518083038186803b15801561151857600080fd5b505afa15801561152c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506115559190810190611dda565b90509392505050565b60008273ffffffffffffffffffffffffffffffffffffffff166359e537c1836040518263ffffffff1660e01b81526004016115999190612e22565b60206040518083038186803b1580156115b157600080fd5b505afa1580156115c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115e99190810190611d88565b905092915050565b60008061160c858460000151856020015186604001516113aa565b905061161d836060015182866105c0565b9150509392505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663ce963afd83856040518363ffffffff1660e01b8152600401611664929190612e44565b60206040518083038186803b15801561167c57600080fd5b505afa158015611690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116b49190810190611d5f565b90509392505050565b60608273ffffffffffffffffffffffffffffffffffffffff166367c40cc4836040518263ffffffff1660e01b81526004016116f89190612e22565b60006040518083038186803b15801561171057600080fd5b505afa158015611724573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525061174d9190810190611dda565b905092915050565b6000601960f81b85858585604051602001611774959493929190612cb4565b604051602081830303815290604052805190602001209050949350505050565b6040518060c00160405280600060028111156117ac57fe5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681526020016000815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061182f57805160ff191683800117855561185d565b8280016001018555821561185d579182015b8281111561185c578251825591602001919060010190611841565b5b50905061186a919061186e565b5090565b61189091905b8082111561188c576000816000905550600101611874565b5090565b90565b6000813590506118a2816134cd565b92915050565b6000815190506118b7816134cd565b92915050565b600082601f8301126118ce57600080fd5b81356118e16118dc82613222565b6131f5565b9150818183526020840193506020810190508385602084028201111561190657600080fd5b60005b83811015611936578161191c8882611893565b845260208401935060208301925050600181019050611909565b5050505092915050565b600082601f83011261195157600080fd5b813561196461195f8261324a565b6131f5565b9150818183526020840193506020810190508385602084028201111561198957600080fd5b60005b838110156119b9578161199f8882611893565b84526020840193506020830192505060018101905061198c565b5050505092915050565b6000813590506119d2816134e4565b92915050565b6000815190506119e7816134e4565b92915050565b6000813590506119fc816134fb565b92915050565b600082601f830112611a1357600080fd5b8135611a26611a2182613272565b6131f5565b91508082526020830160208301858383011115611a4257600080fd5b611a4d83828461341e565b50505092915050565b600082601f830112611a6757600080fd5b8135611a7a611a758261329e565b6131f5565b91508082526020830160208301858383011115611a9657600080fd5b611aa183828461341e565b50505092915050565b600082601f830112611abb57600080fd5b8151611ace611ac98261329e565b6131f5565b91508082526020830160208301858383011115611aea57600080fd5b611af583828461342d565b50505092915050565b600060808284031215611b1057600080fd5b611b1a60806131f5565b90506000611b2a84828501611d4a565b600083015250602082013567ffffffffffffffff811115611b4a57600080fd5b611b56848285016118bd565b6020830152506040611b6a84828501611893565b6040830152506060611b7e84828501611d4a565b60608301525092915050565b600060608284031215611b9c57600080fd5b611ba660606131f5565b9050600082013567ffffffffffffffff811115611bc257600080fd5b611bce84828501611a02565b600083015250602082013567ffffffffffffffff811115611bee57600080fd5b611bfa84828501611a02565b6020830152506040611c0e848285016119c3565b60408301525092915050565b600060808284031215611c2c57600080fd5b611c3660806131f5565b9050600082013567ffffffffffffffff811115611c5257600080fd5b611c5e84828501611a02565b6000830152506020611c7284828501611d4a565b6020830152506040611c8684828501611d4a565b604083015250606082013567ffffffffffffffff811115611ca657600080fd5b611cb284828501611a02565b60608301525092915050565b600060808284031215611cd057600080fd5b611cda60806131f5565b90506000611cea848285016119ed565b6000830152506020611cfe84828501611d4a565b6020830152506040611d1284828501611d4a565b604083015250606082013567ffffffffffffffff811115611d3257600080fd5b611d3e84828501611a02565b60608301525092915050565b600081359050611d5981613512565b92915050565b600060208284031215611d7157600080fd5b6000611d7f848285016118a8565b91505092915050565b600060208284031215611d9a57600080fd5b6000611da8848285016119d8565b91505092915050565b600060208284031215611dc357600080fd5b6000611dd1848285016119ed565b91505092915050565b600060208284031215611dec57600080fd5b600082015167ffffffffffffffff811115611e0657600080fd5b611e1284828501611aaa565b91505092915050565b600080600060608486031215611e3057600080fd5b600084013567ffffffffffffffff811115611e4a57600080fd5b611e5686828701611a56565b9350506020611e67868287016119ed565b925050604084013567ffffffffffffffff811115611e8457600080fd5b611e9086828701611940565b9150509250925092565b600080600060608486031215611eaf57600080fd5b600084013567ffffffffffffffff811115611ec957600080fd5b611ed586828701611a56565b9350506020611ee6868287016119ed565b9250506040611ef786828701611d4a565b9150509250925092565b60008060408385031215611f1457600080fd5b600083013567ffffffffffffffff811115611f2e57600080fd5b611f3a85828601611a56565b9250506020611f4b85828601611d4a565b9150509250929050565b60008060408385031215611f6857600080fd5b600083013567ffffffffffffffff811115611f8257600080fd5b611f8e85828601611afe565b925050602083013567ffffffffffffffff811115611fab57600080fd5b611fb785828601611a56565b9150509250929050565b600080600080600060a08688031215611fd957600080fd5b600086013567ffffffffffffffff811115611ff357600080fd5b611fff88828901611afe565b955050602086013567ffffffffffffffff81111561201c57600080fd5b61202888828901611a56565b945050604086013567ffffffffffffffff81111561204557600080fd5b61205188828901611a56565b935050606086013567ffffffffffffffff81111561206e57600080fd5b61207a88828901611a56565b925050608061208b888289016119c3565b9150509295509295909350565b6000806000606084860312156120ad57600080fd5b600084013567ffffffffffffffff8111156120c757600080fd5b6120d386828701611afe565b935050602084013567ffffffffffffffff8111156120f057600080fd5b6120fc86828701611c1a565b925050604084013567ffffffffffffffff81111561211957600080fd5b61212586828701611b8a565b9150509250925092565b6000806040838503121561214257600080fd5b600083013567ffffffffffffffff81111561215c57600080fd5b61216885828601611afe565b925050602083013567ffffffffffffffff81111561218557600080fd5b61219185828601611cbe565b9150509250929050565b60006121a783836121b3565b60208301905092915050565b6121bc8161336e565b82525050565b6121cb8161336e565b82525050565b6121e26121dd8261336e565b613460565b82525050565b60006121f3826132f5565b6121fd8185613330565b9350612208836132da565b8060005b83811015612239578151612220888261219b565b975061222b83613323565b92505060018101905061220c565b5085935050505092915050565b6000612251826132ea565b61225b8185613330565b9350612266836132ca565b8060005b8381101561229757815161227e888261219b565b975061228983613316565b92505060018101905061226a565b5085935050505092915050565b6122ad81613380565b82525050565b6122c46122bf8261338c565b613472565b82525050565b6122d3816133b8565b82525050565b6122e2816133b8565b82525050565b6122f96122f4826133b8565b61347c565b82525050565b600061230a8261330b565b6123148185613341565b935061232481856020860161342d565b61232d816134a2565b840191505092915050565b60006123438261330b565b61234d8185613352565b935061235d81856020860161342d565b80840191505092915050565b600061237482613300565b61237e8185613341565b935061238e81856020860161342d565b612397816134a2565b840191505092915050565b60006123ad82613300565b6123b78185613352565b93506123c781856020860161342d565b80840191505092915050565b6123dc8161340c565b82525050565b6123eb8161340c565b82525050565b60006123fe603d8361335d565b91507f547269656420746f2063616c6c207365745374617465207769746820616e206f60008301527f757464617465642076657273696f6e4e756d6265722076657273696f6e0000006020830152604082019050919050565b600061246460438361335d565b91507f63616e63656c4368616c6c656e67652063616c6c6564206f6e20617070206e6f60008301527f7420696e2046494e414c495a45535f41465445525f444541444c494e4520737460208301527f61746500000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b60006124f060448361335d565b91507f736574537461746557697468416374696f6e2063616c6c65642077697468206160008301527f6374696f6e207369676e656420627920696e636f7272656374207475726e207460208301527f616b6572000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b600061257c60318361335d565b91507f736574537461746557697468416374696f6e207761732063616c6c656420776960008301527f7468206f757464617465642073746174650000000000000000000000000000006020830152604082019050919050565b60006125e260128361335d565b91507f496e76616c6964207369676e61747572657300000000000000000000000000006000830152602082019050919050565b600061262260438361335d565b91507f43616c6c20746f20736574537461746557697468416374696f6e20696e636c7560008301527f64656420696e636f72726563746c79207369676e65642073746174652075706460208301527f61746500000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b60006126ae60118361335d565b91507f496e76616c6964207369676e61747572650000000000000000000000000000006000830152602082019050919050565b60006126ee60178361335d565b91507f496e76616c6964207374617465207375626d69747465640000000000000000006000830152602082019050919050565b600061272e60328361335d565b91507f416374696f6e206d7573742068617665206265656e207369676e65642062792060008301527f636f7272656374207475726e2074616b657200000000000000000000000000006020830152604082019050919050565b600061279460398361335d565b91507f43616c6c20746f20736574537461746520696e636c7564656420696e636f727260008301527f6563746c79207369676e656420737461746520757064617465000000000000006020830152604082019050919050565b60006127fa602f8361335d565b91507f417474656d7074656420746f20636c61696d46696e616c206f6e2061206e6f6e60008301527f2d7465726d696e616c20737461746500000000000000000000000000000000006020830152604082019050919050565b6000612860601e8361335d565b91507f5369676e657273206e6f7420696e20617363656e64696e67206f7264657200006000830152602082019050919050565b60006128a0603d8361335d565b91507f7365745374617465207761732063616c6c6564206f6e20616e2061707020746860008301527f61742068617320616c7265616479206265656e2066696e616c697a65640000006020830152604082019050919050565b600061290660488361335d565b91507f417474656d7074656420746f20636c61696d206e6f6e2d7465726d696e616c2060008301527f737461746520776173207465726d696e616c20696e207365745374617465576960208301527f7468416374696f6e0000000000000000000000000000000000000000000000006040830152606082019050919050565b6000612992603b8361335d565b91507f7365744f7574636f6d652063616c6c6564207769746820696e636f727265637460008301527f207769746e6573732064617461206f662066696e616c537461746500000000006020830152604082019050919050565b60006129f860478361335d565b91507f736574537461746557697468416374696f6e207761732063616c6c6564206f6e60008301527f20616e2061707020746861742068617320616c7265616479206265656e20666960208301527f6e616c697a6564000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000612a8460428361335d565b91507f7365744f7574636f6d652063616e206f6e6c792062652063616c6c656420616660008301527f7465722061206368616c6c656e676520686173206265656e2066696e616c697a60208301527f65640000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000612b1060468361335d565b91507f726573706f6e64546f4368616c6c656e67652063616c6c6564206f6e2061707060008301527f206e6f7420696e2046494e414c495a45535f41465445525f444541444c494e4560208301527f20737461746500000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000612b9c60368361335d565b91507f547269656420746f2070726f67726573732061206368616c6c656e676520776960008301527f7468206e6f6e2d6167726565642075706f6e20617070000000000000000000006020830152604082019050919050565b60c082016000820151612c0b60008501826123d3565b506020820151612c1e60208501826121b3565b506040820151612c3160408501826122ca565b506060820151612c446060850182612c70565b506080820151612c576080850182612c70565b5060a0820151612c6a60a0850182612c70565b50505050565b612c79816133f5565b82525050565b612c88816133f5565b82525050565b612c9f612c9a826133f5565b613498565b82525050565b612cae816133ff565b82525050565b6000612cc082886122b3565b600182019150612cd082876121d1565b601482019150612ce082866122e8565b602082019150612cf08285612338565b9150612cfc8284612c8e565b6020820191508190509695505050505050565b6000612d1b82886122b3565b600182019150612d2b82876122e8565b602082019150612d3b8286612c8e565b602082019150612d4b8285612c8e565b602082019150612d5b82846122e8565b6020820191508190509695505050505050565b6000612d7a82846123a2565b915081905092915050565b6000602082019050612d9a60008301846121c2565b92915050565b6000602082019050612db560008301846122a4565b92915050565b6000608082019050612dd060008301876122d9565b612ddd6020830186612ca5565b612dea60408301856122d9565b612df760608301846122d9565b95945050505050565b60006020820190508181036000830152612e1a8184612369565b905092915050565b60006020820190508181036000830152612e3c81846122ff565b905092915050565b60006040820190508181036000830152612e5e81856122ff565b90508181036020830152612e7281846121e8565b90509392505050565b60006040820190508181036000830152612e9581856122ff565b90508181036020830152612ea981846122ff565b90509392505050565b600060c082019050612ec760008301896123e2565b612ed460208301886121c2565b612ee160408301876122d9565b612eee6060830186612c7f565b612efb6080830185612c7f565b612f0860a0830184612c7f565b979650505050505050565b60006020820190508181036000830152612f2c816123f1565b9050919050565b60006020820190508181036000830152612f4c81612457565b9050919050565b60006020820190508181036000830152612f6c816124e3565b9050919050565b60006020820190508181036000830152612f8c8161256f565b9050919050565b60006020820190508181036000830152612fac816125d5565b9050919050565b60006020820190508181036000830152612fcc81612615565b9050919050565b60006020820190508181036000830152612fec816126a1565b9050919050565b6000602082019050818103600083015261300c816126e1565b9050919050565b6000602082019050818103600083015261302c81612721565b9050919050565b6000602082019050818103600083015261304c81612787565b9050919050565b6000602082019050818103600083015261306c816127ed565b9050919050565b6000602082019050818103600083015261308c81612853565b9050919050565b600060208201905081810360008301526130ac81612893565b9050919050565b600060208201905081810360008301526130cc816128f9565b9050919050565b600060208201905081810360008301526130ec81612985565b9050919050565b6000602082019050818103600083015261310c816129eb565b9050919050565b6000602082019050818103600083015261312c81612a77565b9050919050565b6000602082019050818103600083015261314c81612b03565b9050919050565b6000602082019050818103600083015261316c81612b8f565b9050919050565b600060c0820190506131886000830184612bf5565b92915050565b60006040820190506131a36000830185612c7f565b81810360208301526131b58184612246565b90509392505050565b60006060820190506131d36000830186612ca5565b6131e060208301856122d9565b6131ed60408301846122d9565b949350505050565b6000604051905081810181811067ffffffffffffffff8211171561321857600080fd5b8060405250919050565b600067ffffffffffffffff82111561323957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561326157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561328957600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156132b557600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000613379826133d5565b9050919050565b60008115159050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b60008190506133d0826134c0565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000613417826133c2565b9050919050565b82818337600083830152505050565b60005b8381101561344b578082015181840152602081019050613430565b8381111561345a576000848401525b50505050565b600061346b82613486565b9050919050565b6000819050919050565b6000819050919050565b6000613491826134b3565b9050919050565b6000819050919050565b6000601f19601f8301169050919050565b60008160601b9050919050565b600381106134ca57fe5b50565b6134d68161336e565b81146134e157600080fd5b50565b6134ed81613380565b81146134f857600080fd5b50565b613504816133b8565b811461350f57600080fd5b50565b61351b816133f5565b811461352657600080fd5b5056fea365627a7a7230582011adf5c6f2ec57e85ad4e56222c07331b574a34acdc55b292e2e9a1879423bb66c6578706572696d656e74616cf564736f6c634300050a0040",opcodes:"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7BE05807 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xB817DCC2 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xB817DCC2 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0xC9359A9C EQ PUSH2 0x27F JUMPI DUP1 PUSH4 0xD6A1F669 EQ PUSH2 0x29B JUMPI DUP1 PUSH4 0xF12A3834 EQ PUSH2 0x2CB JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x7BE05807 EQ PUSH2 0x1CC JUMPI DUP1 PUSH4 0x7EDBDBA3 EQ PUSH2 0x201 JUMPI DUP1 PUSH4 0xAD2A7FCA EQ PUSH2 0x21D JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x300C879 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x69B90FF EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x2560D867 EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0x32C5D69B EQ PUSH2 0x150 JUMPI DUP1 PUSH4 0x53373162 EQ PUSH2 0x180 JUMPI DUP1 PUSH4 0x5D1A3B82 EQ PUSH2 0x19C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0xE9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1DB1 JUMP JUMPDEST PUSH2 0x2E7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x2E00 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x119 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1DB1 JUMP JUMPDEST PUSH2 0x397 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12B SWAP2 SWAP1 PUSH2 0x2DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x14E PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x149 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1F55 JUMP JUMPDEST PUSH2 0x43F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x16A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x165 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1E1B JUMP JUMPDEST PUSH2 0x5C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x177 SWAP2 SWAP1 PUSH2 0x2DA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19A PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x195 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x2098 JUMP JUMPDEST PUSH2 0x712 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x1B1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1DB1 JUMP JUMPDEST PUSH2 0xA23 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1C3 SWAP2 SWAP1 PUSH2 0x2E22 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E6 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x1E1 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1DB1 JUMP JUMPDEST PUSH2 0xAD8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2EB2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x21B PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x216 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x212F JUMP JUMPDEST PUSH2 0xB41 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x237 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x232 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1DB1 JUMP JUMPDEST PUSH2 0xD67 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x244 SWAP2 SWAP1 PUSH2 0x3173 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x267 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x262 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1F01 JUMP JUMPDEST PUSH2 0xE3E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x276 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x31BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x299 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x294 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1FC1 JUMP JUMPDEST PUSH2 0xE6D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2B5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x2B0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1E9A JUMP JUMPDEST PUSH2 0x11A4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2C2 SWAP2 SWAP1 PUSH2 0x2D85 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2E5 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH2 0x2E0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1F55 JUMP JUMPDEST PUSH2 0x121B JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x38F JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x364 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x38F JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x372 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP1 DUP2 GT ISZERO PUSH2 0x3A5 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x3D3 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x438 JUMPI POP PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x3E7 JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x415 JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0x437 JUMPI POP NUMBER PUSH1 0x0 DUP1 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x3 ADD SLOAD GT ISZERO JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x44A DUP4 PUSH2 0x1370 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x46F JUMPI INVALID JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x48C JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0x49D JUMPI POP NUMBER DUP2 PUSH1 0x3 ADD SLOAD LT ISZERO JUMPDEST PUSH2 0x4DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4D3 SWAP1 PUSH2 0x2F33 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x4F6 DUP4 DUP4 PUSH1 0x1 ADD SLOAD DUP5 PUSH1 0x4 ADD SLOAD DUP9 PUSH1 0x60 ADD MLOAD PUSH2 0x13AA JUMP JUMPDEST SWAP1 POP PUSH2 0x507 DUP5 DUP3 DUP8 PUSH1 0x20 ADD MLOAD PUSH2 0x5C0 JUMP JUMPDEST PUSH2 0x546 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x53D SWAP1 PUSH2 0x2F93 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x571 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP CALLER DUP3 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x0 DUP1 SWAP1 POP JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x705 JUMPI PUSH2 0x5E1 DUP7 DUP7 DUP4 PUSH2 0x11A4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x603 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x661 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x658 SWAP1 PUSH2 0x2FD3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x684 JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND GT PUSH2 0x6E2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6D9 SWAP1 PUSH2 0x3073 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0x6EE JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP2 POP DUP1 DUP1 PUSH1 0x1 ADD SWAP2 POP POP PUSH2 0x5CD JUMP JUMPDEST POP PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x71D DUP5 PUSH2 0x1370 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH2 0x744 DUP3 DUP7 PUSH1 0x20 ADD MLOAD DUP7 PUSH2 0x13E9 JUMP JUMPDEST PUSH2 0x783 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x77A SWAP1 PUSH2 0x2FB3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x790 JUMPI INVALID JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x7AD JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x7F0 JUMPI POP PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x7C1 JUMPI INVALID JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x7DE JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0x7EF JUMPI POP NUMBER DUP2 PUSH1 0x3 ADD SLOAD LT ISZERO JUMPDEST JUMPDEST PUSH2 0x82F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x826 SWAP1 PUSH2 0x30F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x4 ADD SLOAD DUP5 PUSH1 0x20 ADD MLOAD GT PUSH2 0x879 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x870 SWAP1 PUSH2 0x2F73 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x88D DUP6 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x20 ADD MLOAD DUP7 DUP7 PUSH2 0x1434 JUMP JUMPDEST PUSH2 0x8CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x8C3 SWAP1 PUSH2 0x2F53 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH2 0x8E5 DUP7 PUSH1 0x40 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x14C3 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x40 ADD MLOAD ISZERO PUSH2 0x972 JUMPI PUSH2 0x8FF DUP7 PUSH1 0x40 ADD MLOAD DUP3 PUSH2 0x155E JUMP JUMPDEST PUSH2 0x93E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x935 SWAP1 PUSH2 0x30B3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST NUMBER DUP3 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x2 DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x968 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP PUSH2 0x9A8 JUMP JUMPDEST DUP5 PUSH1 0x40 ADD MLOAD NUMBER ADD DUP3 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP3 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x9A2 JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP JUMPDEST DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP3 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x20 ADD MLOAD DUP3 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP3 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER DUP3 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0xACC JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xAA1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xACC JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xAAF JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP1 PUSH1 0x0 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD SLOAD SWAP1 DUP1 PUSH1 0x4 ADD SLOAD SWAP1 POP DUP7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB4C DUP4 PUSH2 0x1370 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xB71 JUMPI INVALID JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xB8E JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0xBD1 JUMPI POP PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xBA2 JUMPI INVALID JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xBBF JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0xBD0 JUMPI POP NUMBER DUP2 PUSH1 0x3 ADD SLOAD LT ISZERO JUMPDEST JUMPDEST PUSH2 0xC10 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC07 SWAP1 PUSH2 0x3093 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC1F DUP3 DUP6 PUSH1 0x20 ADD MLOAD DUP6 PUSH2 0x15F1 JUMP JUMPDEST PUSH2 0xC5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC55 SWAP1 PUSH2 0x3033 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x4 ADD SLOAD DUP4 PUSH1 0x20 ADD MLOAD GT PUSH2 0xCA8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC9F SWAP1 PUSH2 0x2F13 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 PUSH1 0x40 ADD MLOAD GT PUSH2 0xCBB JUMPI PUSH1 0x2 PUSH2 0xCBE JUMP JUMPDEST PUSH1 0x1 JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xCDD JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP DUP3 PUSH1 0x0 ADD MLOAD DUP2 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x20 ADD MLOAD DUP2 PUSH1 0x4 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x40 ADD MLOAD NUMBER ADD DUP2 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP2 PUSH1 0x2 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER DUP2 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0xD6F PUSH2 0x1794 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE SWAP1 DUP2 PUSH1 0x0 DUP3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xDAA JUMPI INVALID JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xDB5 JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP3 ADD PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x4 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH1 0x41 MUL PUSH1 0x20 DUP2 ADD DUP7 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP2 ADD DUP7 ADD MLOAD SWAP2 POP PUSH1 0xFF PUSH1 0x41 DUP3 ADD DUP8 ADD MLOAD AND SWAP4 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE78 DUP7 PUSH2 0x1370 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xE9D JUMPI INVALID JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0xEBA JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0xECB JUMPI POP NUMBER DUP2 PUSH1 0x3 ADD SLOAD LT ISZERO JUMPDEST PUSH2 0xF0A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF01 SWAP1 PUSH2 0x3133 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD DUP7 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0xF57 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF4E SWAP1 PUSH2 0x2FF3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD DUP7 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0xFA4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF9B SWAP1 PUSH2 0x3153 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xFB9 DUP9 PUSH1 0x40 ADD MLOAD DUP10 PUSH1 0x20 ADD MLOAD DUP10 PUSH2 0x1627 JUMP JUMPDEST SWAP1 POP PUSH2 0xFCE DUP6 DUP8 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x0 PUSH2 0x11A4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x103B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1032 SWAP1 PUSH2 0x3013 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 PUSH2 0x104C DUP10 PUSH1 0x40 ADD MLOAD DUP10 DUP10 PUSH2 0x14C3 JUMP JUMPDEST SWAP1 POP DUP5 ISZERO PUSH2 0x1128 JUMPI PUSH2 0x1062 DUP10 PUSH1 0x40 ADD MLOAD DUP3 PUSH2 0x155E JUMP JUMPDEST PUSH2 0x10A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1098 SWAP1 PUSH2 0x3053 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x1 ADD DUP2 SWAP1 SSTORE POP CALLER DUP4 PUSH1 0x0 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP NUMBER DUP4 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x2 DUP4 PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x111E JUMPI INVALID JUMPDEST MUL OR SWAP1 SSTORE POP PUSH2 0x1199 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP1 DUP3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH1 0xFF MUL NOT AND SWAP1 SSTORE PUSH1 0x0 DUP3 ADD PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE PUSH1 0x4 DUP3 ADD PUSH1 0x0 SWAP1 SSTORE POP POP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x11B4 DUP8 DUP7 PUSH2 0xE3E JUMP JUMPDEST DUP1 SWAP4 POP DUP2 SWAP5 POP DUP3 SWAP6 POP POP POP POP PUSH1 0x1 DUP7 DUP5 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x11E3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2DBB JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1205 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1226 DUP4 PUSH2 0x1370 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x2 DUP1 DUP2 GT ISZERO PUSH2 0x124A JUMPI INVALID JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1267 JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x12A9 JUMPI POP PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x127B JUMPI INVALID JUMPDEST DUP2 PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x1298 JUMPI INVALID JUMPDEST EQ DUP1 ISZERO PUSH2 0x12A8 JUMPI POP DUP1 PUSH1 0x3 ADD SLOAD NUMBER GT JUMPDEST JUMPDEST PUSH2 0x12E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12DF SWAP1 PUSH2 0x3113 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 EQ PUSH2 0x1335 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x132C SWAP1 PUSH2 0x30D3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1343 DUP5 PUSH1 0x40 ADD MLOAD DUP5 PUSH2 0x16BD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x1369 SWAP3 SWAP2 SWAP1 PUSH2 0x17EE JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD MLOAD DUP3 PUSH1 0x20 ADD MLOAD PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x138D SWAP3 SWAP2 SWAP1 PUSH2 0x318E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x19 PUSH1 0xF8 SHL DUP6 DUP5 DUP5 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x13C9 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2D0F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1419 DUP6 DUP5 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x1402 SWAP2 SWAP1 PUSH2 0x2D6E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x13AA JUMP JUMPDEST SWAP1 POP PUSH2 0x142A DUP4 PUSH1 0x60 ADD MLOAD DUP3 DUP7 PUSH2 0x5C0 JUMP JUMPDEST SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1446 DUP7 DUP7 DUP7 PUSH1 0x0 ADD MLOAD PUSH2 0x1627 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1486 DUP5 PUSH1 0x20 ADD MLOAD PUSH2 0x147F DUP5 DUP9 PUSH1 0x0 ADD MLOAD PUSH1 0x40 MLOAD PUSH2 0x1468 SWAP2 SWAP1 PUSH2 0x2D6E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP9 PUSH1 0x0 ADD MLOAD DUP11 PUSH1 0x20 ADD MLOAD PUSH2 0x1755 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11A4 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x51C2E541 DUP5 DUP5 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1500 SWAP3 SWAP2 SWAP1 PUSH2 0x2E7B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x152C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x1555 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1DDA JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x59E537C1 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1599 SWAP2 SWAP1 PUSH2 0x2E22 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x15C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x15E9 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1D88 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x160C DUP6 DUP5 PUSH1 0x0 ADD MLOAD DUP6 PUSH1 0x20 ADD MLOAD DUP7 PUSH1 0x40 ADD MLOAD PUSH2 0x13AA JUMP JUMPDEST SWAP1 POP PUSH2 0x161D DUP4 PUSH1 0x60 ADD MLOAD DUP3 DUP7 PUSH2 0x5C0 JUMP JUMPDEST SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xCE963AFD DUP4 DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1664 SWAP3 SWAP2 SWAP1 PUSH2 0x2E44 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x167C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1690 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x16B4 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1D5F JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x67C40CC4 DUP4 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x16F8 SWAP2 SWAP1 PUSH2 0x2E22 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1710 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1724 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP PUSH2 0x174D SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x1DDA JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x19 PUSH1 0xF8 SHL DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1774 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2CB4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xC0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x17AC JUMPI INVALID JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x182F JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x185D JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x185D JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x185C JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1841 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0x186A SWAP2 SWAP1 PUSH2 0x186E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x1890 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x188C JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0x1874 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18A2 DUP2 PUSH2 0x34CD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x18B7 DUP2 PUSH2 0x34CD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x18CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x18E1 PUSH2 0x18DC DUP3 PUSH2 0x3222 JUMP JUMPDEST PUSH2 0x31F5 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x1906 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1936 JUMPI DUP2 PUSH2 0x191C DUP9 DUP3 PUSH2 0x1893 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1909 JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1951 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1964 PUSH2 0x195F DUP3 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x31F5 JUMP JUMPDEST SWAP2 POP DUP2 DUP2 DUP4 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP2 ADD SWAP1 POP DUP4 DUP6 PUSH1 0x20 DUP5 MUL DUP3 ADD GT ISZERO PUSH2 0x1989 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x19B9 JUMPI DUP2 PUSH2 0x199F DUP9 DUP3 PUSH2 0x1893 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x198C JUMP JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x19D2 DUP2 PUSH2 0x34E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x19E7 DUP2 PUSH2 0x34E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x19FC DUP2 PUSH2 0x34FB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A26 PUSH2 0x1A21 DUP3 PUSH2 0x3272 JUMP JUMPDEST PUSH2 0x31F5 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1A42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A4D DUP4 DUP3 DUP5 PUSH2 0x341E JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1A67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1A7A PUSH2 0x1A75 DUP3 PUSH2 0x329E JUMP JUMPDEST PUSH2 0x31F5 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1A96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AA1 DUP4 DUP3 DUP5 PUSH2 0x341E JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1ABB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1ACE PUSH2 0x1AC9 DUP3 PUSH2 0x329E JUMP JUMPDEST PUSH2 0x31F5 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x1AEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AF5 DUP4 DUP3 DUP5 PUSH2 0x342D JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B1A PUSH1 0x80 PUSH2 0x31F5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1B2A DUP5 DUP3 DUP6 ADD PUSH2 0x1D4A JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B56 DUP5 DUP3 DUP6 ADD PUSH2 0x18BD JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1B6A DUP5 DUP3 DUP6 ADD PUSH2 0x1893 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x1B7E DUP5 DUP3 DUP6 ADD PUSH2 0x1D4A JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BA6 PUSH1 0x60 PUSH2 0x31F5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BCE DUP5 DUP3 DUP6 ADD PUSH2 0x1A02 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BFA DUP5 DUP3 DUP6 ADD PUSH2 0x1A02 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1C0E DUP5 DUP3 DUP6 ADD PUSH2 0x19C3 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C36 PUSH1 0x80 PUSH2 0x31F5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C52 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C5E DUP5 DUP3 DUP6 ADD PUSH2 0x1A02 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x1C72 DUP5 DUP3 DUP6 ADD PUSH2 0x1D4A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1C86 DUP5 DUP3 DUP6 ADD PUSH2 0x1D4A JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1CA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CB2 DUP5 DUP3 DUP6 ADD PUSH2 0x1A02 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1CD0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CDA PUSH1 0x80 PUSH2 0x31F5 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1CEA DUP5 DUP3 DUP6 ADD PUSH2 0x19ED JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x1CFE DUP5 DUP3 DUP6 ADD PUSH2 0x1D4A JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x1D12 DUP5 DUP3 DUP6 ADD PUSH2 0x1D4A JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D3E DUP5 DUP3 DUP6 ADD PUSH2 0x1A02 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1D59 DUP2 PUSH2 0x3512 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D7F DUP5 DUP3 DUP6 ADD PUSH2 0x18A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1DA8 DUP5 DUP3 DUP6 ADD PUSH2 0x19D8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1DD1 DUP5 DUP3 DUP6 ADD PUSH2 0x19ED JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E12 DUP5 DUP3 DUP6 ADD PUSH2 0x1AAA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1E30 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E56 DUP7 DUP3 DUP8 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1E67 DUP7 DUP3 DUP8 ADD PUSH2 0x19ED JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1E84 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E90 DUP7 DUP3 DUP8 ADD PUSH2 0x1940 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1EAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1EC9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1ED5 DUP7 DUP3 DUP8 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1EE6 DUP7 DUP3 DUP8 ADD PUSH2 0x19ED JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1EF7 DUP7 DUP3 DUP8 ADD PUSH2 0x1D4A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F3A DUP6 DUP3 DUP7 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1F4B DUP6 DUP3 DUP7 ADD PUSH2 0x1D4A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1F82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F8E DUP6 DUP3 DUP7 ADD PUSH2 0x1AFE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1FAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FB7 DUP6 DUP3 DUP7 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1FD9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1FF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1FFF DUP9 DUP3 DUP10 ADD PUSH2 0x1AFE JUMP JUMPDEST SWAP6 POP POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x201C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2028 DUP9 DUP3 DUP10 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2045 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2051 DUP9 DUP3 DUP10 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x206E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x207A DUP9 DUP3 DUP10 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x80 PUSH2 0x208B DUP9 DUP3 DUP10 ADD PUSH2 0x19C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x20AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x20C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20D3 DUP7 DUP3 DUP8 ADD PUSH2 0x1AFE JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x20F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x20FC DUP7 DUP3 DUP8 ADD PUSH2 0x1C1A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2125 DUP7 DUP3 DUP8 ADD PUSH2 0x1B8A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x215C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2168 DUP6 DUP3 DUP7 ADD PUSH2 0x1AFE JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2191 DUP6 DUP3 DUP7 ADD PUSH2 0x1CBE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21A7 DUP4 DUP4 PUSH2 0x21B3 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x21BC DUP2 PUSH2 0x336E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x21CB DUP2 PUSH2 0x336E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x21E2 PUSH2 0x21DD DUP3 PUSH2 0x336E JUMP JUMPDEST PUSH2 0x3460 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21F3 DUP3 PUSH2 0x32F5 JUMP JUMPDEST PUSH2 0x21FD DUP2 DUP6 PUSH2 0x3330 JUMP JUMPDEST SWAP4 POP PUSH2 0x2208 DUP4 PUSH2 0x32DA JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2239 JUMPI DUP2 MLOAD PUSH2 0x2220 DUP9 DUP3 PUSH2 0x219B JUMP JUMPDEST SWAP8 POP PUSH2 0x222B DUP4 PUSH2 0x3323 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x220C JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2251 DUP3 PUSH2 0x32EA JUMP JUMPDEST PUSH2 0x225B DUP2 DUP6 PUSH2 0x3330 JUMP JUMPDEST SWAP4 POP PUSH2 0x2266 DUP4 PUSH2 0x32CA JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2297 JUMPI DUP2 MLOAD PUSH2 0x227E DUP9 DUP3 PUSH2 0x219B JUMP JUMPDEST SWAP8 POP PUSH2 0x2289 DUP4 PUSH2 0x3316 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x226A JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x22AD DUP2 PUSH2 0x3380 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x22C4 PUSH2 0x22BF DUP3 PUSH2 0x338C JUMP JUMPDEST PUSH2 0x3472 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x22D3 DUP2 PUSH2 0x33B8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x22E2 DUP2 PUSH2 0x33B8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x22F9 PUSH2 0x22F4 DUP3 PUSH2 0x33B8 JUMP JUMPDEST PUSH2 0x347C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230A DUP3 PUSH2 0x330B JUMP JUMPDEST PUSH2 0x2314 DUP2 DUP6 PUSH2 0x3341 JUMP JUMPDEST SWAP4 POP PUSH2 0x2324 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x342D JUMP JUMPDEST PUSH2 0x232D DUP2 PUSH2 0x34A2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2343 DUP3 PUSH2 0x330B JUMP JUMPDEST PUSH2 0x234D DUP2 DUP6 PUSH2 0x3352 JUMP JUMPDEST SWAP4 POP PUSH2 0x235D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x342D JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2374 DUP3 PUSH2 0x3300 JUMP JUMPDEST PUSH2 0x237E DUP2 DUP6 PUSH2 0x3341 JUMP JUMPDEST SWAP4 POP PUSH2 0x238E DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x342D JUMP JUMPDEST PUSH2 0x2397 DUP2 PUSH2 0x34A2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23AD DUP3 PUSH2 0x3300 JUMP JUMPDEST PUSH2 0x23B7 DUP2 DUP6 PUSH2 0x3352 JUMP JUMPDEST SWAP4 POP PUSH2 0x23C7 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x342D JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x23DC DUP2 PUSH2 0x340C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x23EB DUP2 PUSH2 0x340C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23FE PUSH1 0x3D DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x547269656420746F2063616C6C207365745374617465207769746820616E206F PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x757464617465642076657273696F6E4E756D6265722076657273696F6E000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2464 PUSH1 0x43 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x63616E63656C4368616C6C656E67652063616C6C6564206F6E20617070206E6F PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x7420696E2046494E414C495A45535F41465445525F444541444C494E45207374 PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x6174650000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24F0 PUSH1 0x44 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x736574537461746557697468416374696F6E2063616C6C656420776974682061 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6374696F6E207369676E656420627920696E636F7272656374207475726E2074 PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x616B657200000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x257C PUSH1 0x31 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x736574537461746557697468416374696F6E207761732063616C6C6564207769 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x7468206F75746461746564207374617465000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25E2 PUSH1 0x12 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x496E76616C6964207369676E6174757265730000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2622 PUSH1 0x43 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x43616C6C20746F20736574537461746557697468416374696F6E20696E636C75 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x64656420696E636F72726563746C79207369676E656420737461746520757064 PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x6174650000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26AE PUSH1 0x11 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x496E76616C6964207369676E6174757265000000000000000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26EE PUSH1 0x17 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x496E76616C6964207374617465207375626D6974746564000000000000000000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x272E PUSH1 0x32 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x416374696F6E206D7573742068617665206265656E207369676E656420627920 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x636F7272656374207475726E2074616B65720000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2794 PUSH1 0x39 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x43616C6C20746F20736574537461746520696E636C7564656420696E636F7272 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x6563746C79207369676E65642073746174652075706461746500000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27FA PUSH1 0x2F DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x417474656D7074656420746F20636C61696D46696E616C206F6E2061206E6F6E PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x2D7465726D696E616C2073746174650000000000000000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2860 PUSH1 0x1E DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x5369676E657273206E6F7420696E20617363656E64696E67206F726465720000 PUSH1 0x0 DUP4 ADD MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28A0 PUSH1 0x3D DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x7365745374617465207761732063616C6C6564206F6E20616E20617070207468 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x61742068617320616C7265616479206265656E2066696E616C697A6564000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2906 PUSH1 0x48 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x417474656D7074656420746F20636C61696D206E6F6E2D7465726D696E616C20 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x737461746520776173207465726D696E616C20696E2073657453746174655769 PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x7468416374696F6E000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2992 PUSH1 0x3B DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x7365744F7574636F6D652063616C6C6564207769746820696E636F7272656374 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x207769746E6573732064617461206F662066696E616C53746174650000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29F8 PUSH1 0x47 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x736574537461746557697468416374696F6E207761732063616C6C6564206F6E PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x20616E2061707020746861742068617320616C7265616479206265656E206669 PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x6E616C697A656400000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A84 PUSH1 0x42 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x7365744F7574636F6D652063616E206F6E6C792062652063616C6C6564206166 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x7465722061206368616C6C656E676520686173206265656E2066696E616C697A PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x6564000000000000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B10 PUSH1 0x46 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x726573706F6E64546F4368616C6C656E67652063616C6C6564206F6E20617070 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x206E6F7420696E2046494E414C495A45535F41465445525F444541444C494E45 PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x2073746174650000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2B9C PUSH1 0x36 DUP4 PUSH2 0x335D JUMP JUMPDEST SWAP2 POP PUSH32 0x547269656420746F2070726F67726573732061206368616C6C656E6765207769 PUSH1 0x0 DUP4 ADD MSTORE PUSH32 0x7468206E6F6E2D6167726565642075706F6E2061707000000000000000000000 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0xC0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2C0B PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x23D3 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x2C1E PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x21B3 JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH2 0x2C31 PUSH1 0x40 DUP6 ADD DUP3 PUSH2 0x22CA JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH2 0x2C44 PUSH1 0x60 DUP6 ADD DUP3 PUSH2 0x2C70 JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH2 0x2C57 PUSH1 0x80 DUP6 ADD DUP3 PUSH2 0x2C70 JUMP JUMPDEST POP PUSH1 0xA0 DUP3 ADD MLOAD PUSH2 0x2C6A PUSH1 0xA0 DUP6 ADD DUP3 PUSH2 0x2C70 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x2C79 DUP2 PUSH2 0x33F5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2C88 DUP2 PUSH2 0x33F5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2C9F PUSH2 0x2C9A DUP3 PUSH2 0x33F5 JUMP JUMPDEST PUSH2 0x3498 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2CAE DUP2 PUSH2 0x33FF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2CC0 DUP3 DUP9 PUSH2 0x22B3 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH2 0x2CD0 DUP3 DUP8 PUSH2 0x21D1 JUMP JUMPDEST PUSH1 0x14 DUP3 ADD SWAP2 POP PUSH2 0x2CE0 DUP3 DUP7 PUSH2 0x22E8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x2CF0 DUP3 DUP6 PUSH2 0x2338 JUMP JUMPDEST SWAP2 POP PUSH2 0x2CFC DUP3 DUP5 PUSH2 0x2C8E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D1B DUP3 DUP9 PUSH2 0x22B3 JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH2 0x2D2B DUP3 DUP8 PUSH2 0x22E8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x2D3B DUP3 DUP7 PUSH2 0x2C8E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x2D4B DUP3 DUP6 PUSH2 0x2C8E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0x2D5B DUP3 DUP5 PUSH2 0x22E8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2D7A DUP3 DUP5 PUSH2 0x23A2 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2D9A PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x21C2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x2DB5 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x22A4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2DD0 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x22D9 JUMP JUMPDEST PUSH2 0x2DDD PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2CA5 JUMP JUMPDEST PUSH2 0x2DEA PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x22D9 JUMP JUMPDEST PUSH2 0x2DF7 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x22D9 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E1A DUP2 DUP5 PUSH2 0x2369 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E3C DUP2 DUP5 PUSH2 0x22FF JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E5E DUP2 DUP6 PUSH2 0x22FF JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2E72 DUP2 DUP5 PUSH2 0x21E8 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2E95 DUP2 DUP6 PUSH2 0x22FF JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x2EA9 DUP2 DUP5 PUSH2 0x22FF JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x2EC7 PUSH1 0x0 DUP4 ADD DUP10 PUSH2 0x23E2 JUMP JUMPDEST PUSH2 0x2ED4 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x21C2 JUMP JUMPDEST PUSH2 0x2EE1 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x22D9 JUMP JUMPDEST PUSH2 0x2EEE PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x2C7F JUMP JUMPDEST PUSH2 0x2EFB PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x2C7F JUMP JUMPDEST PUSH2 0x2F08 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x2C7F JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F2C DUP2 PUSH2 0x23F1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F4C DUP2 PUSH2 0x2457 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F6C DUP2 PUSH2 0x24E3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2F8C DUP2 PUSH2 0x256F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2FAC DUP2 PUSH2 0x25D5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2FCC DUP2 PUSH2 0x2615 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2FEC DUP2 PUSH2 0x26A1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x300C DUP2 PUSH2 0x26E1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x302C DUP2 PUSH2 0x2721 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x304C DUP2 PUSH2 0x2787 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x306C DUP2 PUSH2 0x27ED JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x308C DUP2 PUSH2 0x2853 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x30AC DUP2 PUSH2 0x2893 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x30CC DUP2 PUSH2 0x28F9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x30EC DUP2 PUSH2 0x2985 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x310C DUP2 PUSH2 0x29EB JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x312C DUP2 PUSH2 0x2A77 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x314C DUP2 PUSH2 0x2B03 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x316C DUP2 PUSH2 0x2B8F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x3188 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2BF5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x31A3 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2C7F JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x31B5 DUP2 DUP5 PUSH2 0x2246 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x31D3 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2CA5 JUMP JUMPDEST PUSH2 0x31E0 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x22D9 JUMP JUMPDEST PUSH2 0x31ED PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x22D9 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x3218 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x40 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3239 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x3289 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x32B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3379 DUP3 PUSH2 0x33D5 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x33D0 DUP3 PUSH2 0x34C0 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3417 DUP3 PUSH2 0x33C2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x344B JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x3430 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x345A JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x346B DUP3 PUSH2 0x3486 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3491 DUP3 PUSH2 0x34B3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x34CA JUMPI INVALID JUMPDEST POP JUMP JUMPDEST PUSH2 0x34D6 DUP2 PUSH2 0x336E JUMP JUMPDEST DUP2 EQ PUSH2 0x34E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x34ED DUP2 PUSH2 0x3380 JUMP JUMPDEST DUP2 EQ PUSH2 0x34F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x3504 DUP2 PUSH2 0x33B8 JUMP JUMPDEST DUP2 EQ PUSH2 0x350F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x351B DUP2 PUSH2 0x33F5 JUMP JUMPDEST DUP2 EQ PUSH2 0x3526 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG3 PUSH6 0x627A7A723058 KECCAK256 GT 0xad CREATE2 0xc6 CALLCODE 0xec JUMPI 0xe8 GAS 0xd4 0xe5 PUSH3 0x22C073 BALANCE 0xb5 PUSH21 0xA34ACDC55B292E2E9A1879423BB66C657870657269 PUSH14 0x656E74616CF564736F6C63430005 EXP STOP BLOCKHASH ",sourceMap:"411:249:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;411:249:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;413:45:16;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;923:466:18;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;683:1027:17;;;;;;;;;;;;;;;;:::i;:::-;;1242:472:14;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1143:1911:22;;;;;;;;;;;;;;;;:::i;:::-;;1603:136:18;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;289:73:16;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;1071:1245:21;;;;;;;;;;;;;;;;:::i;:::-;;575:169:18;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1883:825:14;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;1017:1633:19;;;;;;;;;;;;;;;;:::i;:::-;;733:282:14;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;601:738:20;;;;;;;;;;;;;;;;:::i;:::-;;413:45:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;923:466:18:-;1006:4;1091:55;1045:101;;;;;;;;:13;:27;1059:12;1045:27;;;;;;;;;;;:34;;;;;;;;;;;;:101;;;;;;;;;1035:343;;;;1234:59;1186:107;;;;;;;;:13;:27;1200:12;1186:27;;;;;;;;;;;:34;;;;;;;;;;;;:107;;;;;;;;;1174:196;;;;;1358:12;1315:13;:27;1329:12;1315:27;;;;;;;;;;;:39;;;:55;;1174:196;1035:343;1020:364;;923:466;;;:::o;683:1027:17:-;940:20;963:30;981:11;963:17;:30::i;:::-;940:53;;1000:30;1033:13;:27;1047:12;1033:27;;;;;;;;;;;1000:60;;1112:40;1092:60;;;;;;;;:9;:16;;;;;;;;;;;;:60;;;;;;;;;1082:119;;;;;1189:12;1164:9;:21;;;:37;;1082:119;1067:217;;;;;;;;;;;;;;;;;;;;;;1291:17;1311:144;1342:12;1362:9;:22;;;1392:9;:23;;;1423:11;:26;;;1311:23;:144::i;:::-;1291:164;;1477:65;1494:10;1506:9;1517:11;:24;;;1477:16;:65::i;:::-;1462:114;;;;;;;;;;;;;;;;;;;;;;1607:1;1583:9;:21;;:25;;;;1633:28;1614:9;:16;;;:47;;;;;;;;;;;;;;;;;;;;;;;;1695:10;1667:9;:25;;;:38;;;;;;;;;;;;;;;;;;683:1027;;;;;:::o;1242:472:14:-;1384:4;1398:18;1427:1;1398:31;;1440:9;1452:1;1440:13;;1435:258;1459:7;:14;1455:1;:18;1435:258;;;1519:33;1530:10;1542:6;1550:1;1519:10;:33::i;:::-;1505:47;;:7;1513:1;1505:10;;;;;;;;;;;;;;:47;;;1488:93;;;;;;;;;;;;;;;;;;;;;;1610:10;1597:23;;:7;1605:1;1597:10;;;;;;;;;;;;;;:23;;;1589:66;;;;;;;;;;;;;;;;;;;;;;1676:7;1684:1;1676:10;;;;;;;;;;;;;;1663:23;;1475:3;;;;;;;1435:258;;;;1705:4;1698:11;;;1242:472;;;;;:::o;1143:1911:22:-;1315:20;1338:30;1356:11;1338:17;:30::i;:::-;1315:53;;1375:30;1408:13;:27;1422:12;1408:27;;;;;;;;;;;1375:60;;1457:80;1493:12;1507:11;:24;;;1533:3;1457:35;:80::i;:::-;1442:178;;;;;;;;;;;;;;;;;;;;;;1662:28;1642:48;;;;;;;;:9;:16;;;;;;;;;;;;:48;;;;;;;;;:161;;;;1721:40;1701:60;;;;;;;;:9;:16;;;;;;;;;;;;:60;;;;;;;;;:101;;;;;1790:12;1765:9;:21;;;:37;;1701:101;1642:161;1627:263;;;;;;;;;;;;;;;;;;;;;;1932:9;:23;;;1912:3;:17;;;:43;1897:123;;;;;;;;;;;;;;;;;;;;;;2042:131;2077:11;:25;;;2112:11;:24;;;2146:3;2159:6;2042:25;:131::i;:::-;2027:230;;;;;;;;;;;;;;;;;;;;;;2264:21;2288:111;2320:11;:25;;;2353:3;:12;;;2373:6;:20;;;2288:24;:111::i;:::-;2264:135;;2410:6;:23;;;2406:463;;;2460:65;2489:11;:25;;;2516:8;2460:28;:65::i;:::-;2443:174;;;;;;;;;;;;;;;;;;;;;;2649:12;2625:9;:21;;:36;;;;2688;2669:9;:16;;;:55;;;;;;;;;;;;;;;;;;;;;;;;2406:463;;;2784:3;:11;;;2769:12;:26;2745:9;:21;;:50;;;;2822:40;2803:9;:16;;;:59;;;;;;;;;;;;;;;;;;;;;;;;2406:463;2910:8;2900:19;;;;;;2875:9;:22;;:44;;;;2951:3;:17;;;2925:9;:23;;:43;;;;3004:1;2974:9;:26;;;:31;;;;;;;;;;;3039:10;3011:9;:25;;;:38;;;;;;;;;;;;;;;;;;1143:1911;;;;;;:::o;1603:136:18:-;1680:12;1709:11;:25;1721:12;1709:25;;;;;;;;;;;1702:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1603:136;;;:::o;289:73:16:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1071:1245:21:-;1189:20;1212:30;1230:11;1212:17;:30::i;:::-;1189:53;;1249:30;1282:13;:27;1296:12;1282:27;;;;;;;;;;;1249:60;;1351:28;1331:48;;;;;;;;:9;:16;;;;;;;;;;;;:48;;;;;;;;;:185;;;;1419:40;1399:60;;;;;;;;:9;:16;;;;;;;;;;;;:60;;;;;;;;;:109;;;;;1496:12;1471:9;:21;;;:37;;1399:109;1331:185;1316:277;;;;;;;;;;;;;;;;;;;;;;1615:112;1660:12;1682:11;:24;;;1716:3;1615:35;:112::i;:::-;1600:200;;;;;;;;;;;;;;;;;;;;;;1842:9;:23;;;1822:3;:17;;;:43;1807:135;;;;;;;;;;;;;;;;;;;;;;1982:1;1968:3;:11;;;:15;:109;;2041:36;1968:109;;;1992:40;1968:109;1949:9;:16;;;:128;;;;;;;;;;;;;;;;;;;;;;;;2109:3;:16;;;2084:9;:22;;:41;;;;2157:3;:17;;;2131:9;:23;;:43;;;;2219:3;:11;;;2204:12;:26;2180:9;:21;;:50;;;;2266:1;2236:9;:26;;;:31;;;;;;;;;;;2301:10;2273:9;:25;;;:38;;;;;;;;;;;;;;;;;;1071:1245;;;;:::o;575:169:18:-;657:38;;:::i;:::-;712:13;:27;726:12;712:27;;;;;;;;;;;705:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;575:169;;;:::o;1883:825:14:-;1978:7;1987:9;1998;2270:3;2264:4;2260:14;2326:4;2312:12;2308:23;2296:10;2292:40;2286:47;2281:52;;2385:4;2371:12;2367:23;2355:10;2351:40;2345:47;2340:52;;2693:4;2684;2670:12;2666:23;2654:10;2650:40;2644:47;2640:58;2635:63;;2232:472;;;;;;:::o;1017:1633:19:-;1212:20;1235:30;1253:11;1235:17;:30::i;:::-;1212:53;;1272:30;1305:13;:27;1319:12;1305:27;;;;;;;;;;;1272:60;;1384:40;1364:60;;;;;;;;:9;:16;;;;;;;;;;;;:60;;;;;;;;;1354:119;;;;;1461:12;1436:9;:21;;;:37;;1354:119;1339:220;;;;;;;;;;;;;;;;;;;;;;1604:9;:22;;;1591:8;1581:19;;;;;;:45;1566:99;;;;;;;;;;;;;;;;;;;;;;1710:9;:22;;;1697:8;1687:19;;;;;;:45;1672:130;;;;;;;;;;;;;;;;;;;;;;1809:17;1829:99;1849:11;:25;;;1882:11;:24;;;1914:8;1829:12;:99::i;:::-;1809:119;;1963:62;1987:15;2014:6;2004:17;;;;;;2023:1;1963:23;:62::i;:::-;1950:75;;:9;:75;;;1935:156;;;;;;;;;;;;;;;;;;;;;;2098:24;2125:80;2144:11;:25;;;2177:8;2193:6;2125:11;:80::i;:::-;2098:107;;2216:10;2212:433;;;2253:55;2269:11;:25;;;2296:11;2253:15;:55::i;:::-;2236:139;;;;;;;;;;;;;;;;;;;;;;2418:11;2408:22;;;;;;2383:9;:22;;:47;;;;2466:10;2438:9;:25;;;:38;;;;;;;;;;;;;;;;;;2508:12;2484:9;:21;;:36;;;;2547;2528:9;:16;;;:55;;;;;;;;;;;;;;;;;;;;;;;;2212:433;;;2611:13;:27;2625:12;2611:27;;;;;;;;;;;;2604:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2212:433;1017:1633;;;;;;;;;:::o;733:282:14:-;862:7;879;892:9;907;934:37;949:16;967:3;934:14;:37::i;:::-;922:49;;;;;;;;;;;;984:26;994:6;1002:1;1005;1008;984:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;984:26:14;;;;;;;;977:33;;;;;733:282;;;;;:::o;601:738:20:-;709:20;732:30;750:11;732:17;:30::i;:::-;709:53;;769:24;796:13;:27;810:12;796:27;;;;;;;;;;;769:54;;859:36;845:50;;;;;;;;:3;:10;;;;;;;;;;;;:50;;;;;;;;;:150;;;;920:40;906:54;;;;;;;;:3;:10;;;;;;;;;;;;:54;;;;;;;;;:88;;;;;979:3;:15;;;964:12;:30;906:88;845:150;830:247;;;;;;;;;;;;;;;;;;;;;;1124:3;:16;;;1109:10;1099:21;;;;;;:41;1084:131;;;;;;;;;;;;;;;;;;;;;;1250:84;1285:11;:25;;;1318:10;1250:27;:84::i;:::-;1222:11;:25;1234:12;1222:25;;;;;;;;;;;:112;;;;;;;;;;;;:::i;:::-;;601:738;;;;:::o;668:235:16:-;789:7;841:11;:24;;;867:11;:24;;;830:62;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;830:62:16;;;813:85;;;;;;806:92;;668:235;;;:::o;1344:352::-;1516:7;1588:4;1583:10;;1603:12;1625:13;1648:7;1665:12;1557:128;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1557:128:16;;;1540:151;;;;;;1533:158;;1344:352;;;;;;:::o;3058:424:22:-;3255:4;3269:14;3286:124;3317:12;3347:3;:12;;;3337:23;;;;;;;;;;;;;;;3368:3;:17;;;3393:3;:11;;;3286:23;:124::i;:::-;3269:141;;3423:54;3440:3;:14;;;3456:6;3464:12;3423:16;:54::i;:::-;3416:61;;;3058:424;;;;;:::o;3486:599::-;3706:4;3720:17;3740:92;3773:13;3794:12;3814:3;:12;;;3740:25;:92::i;:::-;3720:112;;3839:14;3856:191;3874:6;:16;;;3898:134;3925:9;3954:3;:12;;;3944:23;;;;;;;;;;;;;;;3977:6;:20;;;4007:3;:17;;;3898;:134::i;:::-;4040:1;3856:10;:191::i;:::-;3839:208;;4074:6;4061:19;;:9;:19;;;4054:26;;;;3486:599;;;;;;:::o;1696:235:12:-;1835:12;1882:13;1864:44;;;1909:8;1919:6;1864:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1864:62:12;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1864:62:12;;;;;;39:16:-1;36:1;17:17;2:54;1864:62:12;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1864:62:12;;;;;;;;;1857:69;;1696:235;;;;;:::o;582:202::-;700:4;739:13;721:48;;;770:8;721:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;721:58:12;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;721:58:12;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;721:58:12;;;;;;;;;714:65;;582:202;;;;:::o;2320:430:21:-;2505:4;2519:14;2536:117;2567:12;2587:3;:16;;;2611:3;:17;;;2636:3;:11;;;2536:23;:117::i;:::-;2519:134;;2667:78;2691:3;:14;;;2713:6;2727:12;2667:16;:78::i;:::-;2660:85;;;2320:430;;;;;:::o;1065:255:12:-;1215:7;1257:13;1239:52;;;1292:8;1302:12;1239:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1239:76:12;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1239:76:12;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;1239:76:12;;;;;;;;;1232:83;;1065:255;;;;;:::o;2160:208::-;2277:12;2324:13;2306:47;;;2354:8;2306:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2306:57:12;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2306:57:12;;;;;;39:16:-1;36:1;17:17;2:54;2306:57:12;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2306:57:12;;;;;;;;;2299:64;;2160:208;;;;:::o;2129:345:16:-;2297:7;2369:4;2364:10;;2384:9;2403:13;2426:6;2442:13;2338:125;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2338:125:16;;;2321:148;;;;;;2314:155;;2129:345;;;;;;:::o;411:249:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:130:-1:-;;85:6;72:20;63:29;;97:33;124:5;97:33;;;57:78;;;;;142:134;;226:6;220:13;211:22;;238:33;265:5;238:33;;;205:71;;;;;301:699;;414:3;407:4;399:6;395:17;391:27;381:2;;432:1;429;422:12;381:2;469:6;456:20;491:76;506:60;559:6;506:60;;;491:76;;;482:85;;584:5;609:6;602:5;595:21;639:4;631:6;627:17;617:27;;661:4;656:3;652:14;645:21;;714:6;761:3;753:4;745:6;741:17;736:3;732:27;729:36;726:2;;;778:1;775;768:12;726:2;803:1;788:206;813:6;810:1;807:13;788:206;;;871:3;893:37;926:3;914:10;893:37;;;888:3;881:50;954:4;949:3;945:14;938:21;;982:4;977:3;973:14;966:21;;845:149;835:1;832;828:9;823:14;;788:206;;;792:14;374:626;;;;;;;;1026:707;;1143:3;1136:4;1128:6;1124:17;1120:27;1110:2;;1161:1;1158;1151:12;1110:2;1198:6;1185:20;1220:80;1235:64;1292:6;1235:64;;;1220:80;;;1211:89;;1317:5;1342:6;1335:5;1328:21;1372:4;1364:6;1360:17;1350:27;;1394:4;1389:3;1385:14;1378:21;;1447:6;1494:3;1486:4;1478:6;1474:17;1469:3;1465:27;1462:36;1459:2;;;1511:1;1508;1501:12;1459:2;1536:1;1521:206;1546:6;1543:1;1540:13;1521:206;;;1604:3;1626:37;1659:3;1647:10;1626:37;;;1621:3;1614:50;1687:4;1682:3;1678:14;1671:21;;1715:4;1710:3;1706:14;1699:21;;1578:149;1568:1;1565;1561:9;1556:14;;1521:206;;;1525:14;1103:630;;;;;;;;1741:124;;1818:6;1805:20;1796:29;;1830:30;1854:5;1830:30;;;1790:75;;;;;1872:128;;1953:6;1947:13;1938:22;;1965:30;1989:5;1965:30;;;1932:68;;;;;2007:130;;2087:6;2074:20;2065:29;;2099:33;2126:5;2099:33;;;2059:78;;;;;2145:432;;2242:3;2235:4;2227:6;2223:17;2219:27;2209:2;;2260:1;2257;2250:12;2209:2;2297:6;2284:20;2319:60;2334:44;2371:6;2334:44;;;2319:60;;;2310:69;;2399:6;2392:5;2385:21;2435:4;2427:6;2423:17;2468:4;2461:5;2457:16;2503:3;2494:6;2489:3;2485:16;2482:25;2479:2;;;2520:1;2517;2510:12;2479:2;2530:41;2564:6;2559:3;2554;2530:41;;;2202:375;;;;;;;;2586:440;;2687:3;2680:4;2672:6;2668:17;2664:27;2654:2;;2705:1;2702;2695:12;2654:2;2742:6;2729:20;2764:64;2779:48;2820:6;2779:48;;;2764:64;;;2755:73;;2848:6;2841:5;2834:21;2884:4;2876:6;2872:17;2917:4;2910:5;2906:16;2952:3;2943:6;2938:3;2934:16;2931:25;2928:2;;;2969:1;2966;2959:12;2928:2;2979:41;3013:6;3008:3;3003;2979:41;;;2647:379;;;;;;;;3035:442;;3147:3;3140:4;3132:6;3128:17;3124:27;3114:2;;3165:1;3162;3155:12;3114:2;3195:6;3189:13;3217:64;3232:48;3273:6;3232:48;;;3217:64;;;3208:73;;3301:6;3294:5;3287:21;3337:4;3329:6;3325:17;3370:4;3363:5;3359:16;3405:3;3396:6;3391:3;3387:16;3384:25;3381:2;;;3422:1;3419;3412:12;3381:2;3432:39;3464:6;3459:3;3454;3432:39;;;3107:370;;;;;;;;3529:900;;3647:4;3635:9;3630:3;3626:19;3622:30;3619:2;;;3665:1;3662;3655:12;3619:2;3683:20;3698:4;3683:20;;;3674:29;;3761:1;3792:49;3837:3;3828:6;3817:9;3813:22;3792:49;;;3786:3;3779:5;3775:15;3768:74;3713:140;3939:2;3928:9;3924:18;3911:32;3963:18;3955:6;3952:30;3949:2;;;3995:1;3992;3985:12;3949:2;4030:70;4096:3;4087:6;4076:9;4072:22;4030:70;;;4023:4;4016:5;4012:16;4005:96;3863:249;4171:2;4204:49;4249:3;4240:6;4229:9;4225:22;4204:49;;;4197:4;4190:5;4186:16;4179:75;4122:143;4325:2;4358:49;4403:3;4394:6;4383:9;4379:22;4358:49;;;4351:4;4344:5;4340:16;4333:75;4275:144;3613:816;;;;;4486:820;;4605:4;4593:9;4588:3;4584:19;4580:30;4577:2;;;4623:1;4620;4613:12;4577:2;4641:20;4656:4;4641:20;;;4632:29;;4748:1;4737:9;4733:17;4720:31;4771:18;4763:6;4760:30;4757:2;;;4803:1;4800;4793:12;4757:2;4837:54;4887:3;4878:6;4867:9;4863:22;4837:54;;;4831:3;4824:5;4820:15;4813:79;4671:232;4986:2;4975:9;4971:18;4958:32;5010:18;5002:6;4999:30;4996:2;;;5042:1;5039;5032:12;4996:2;5077:54;5127:3;5118:6;5107:9;5103:22;5077:54;;;5070:4;5063:5;5059:16;5052:80;4913:230;5205:2;5238:46;5280:3;5271:6;5260:9;5256:22;5238:46;;;5231:4;5224:5;5220:16;5213:72;5153:143;4571:735;;;;;5387:987;;5530:4;5518:9;5513:3;5509:19;5505:30;5502:2;;;5548:1;5545;5538:12;5502:2;5566:20;5581:4;5566:20;;;5557:29;;5668:1;5657:9;5653:17;5640:31;5691:18;5683:6;5680:30;5677:2;;;5723:1;5720;5713:12;5677:2;5757:54;5807:3;5798:6;5787:9;5783:22;5757:54;;;5751:3;5744:5;5740:15;5733:79;5596:227;5882:2;5915:49;5960:3;5951:6;5940:9;5936:22;5915:49;;;5908:4;5901:5;5897:16;5890:75;5833:143;6029:2;6062:49;6107:3;6098:6;6087:9;6083:22;6062:49;;;6055:4;6048:5;6044:16;6037:75;5986:137;6207:2;6196:9;6192:18;6179:32;6231:18;6223:6;6220:30;6217:2;;;6263:1;6260;6253:12;6217:2;6298:54;6348:3;6339:6;6328:9;6324:22;6298:54;;;6291:4;6284:5;6280:16;6273:80;6133:231;5496:878;;;;;6433:888;;6564:4;6552:9;6547:3;6543:19;6539:30;6536:2;;;6582:1;6579;6572:12;6536:2;6600:20;6615:4;6600:20;;;6591:29;;6678:1;6709:49;6754:3;6745:6;6734:9;6730:22;6709:49;;;6703:3;6696:5;6692:15;6685:74;6630:140;6829:2;6862:49;6907:3;6898:6;6887:9;6883:22;6862:49;;;6855:4;6848:5;6844:16;6837:75;6780:143;6976:2;7009:49;7054:3;7045:6;7034:9;7030:22;7009:49;;;7002:4;6995:5;6991:16;6984:75;6933:137;7154:2;7143:9;7139:18;7126:32;7178:18;7170:6;7167:30;7164:2;;;7210:1;7207;7200:12;7164:2;7245:54;7295:3;7286:6;7275:9;7271:22;7245:54;;;7238:4;7231:5;7227:16;7220:80;7080:231;6530:791;;;;;7328:130;;7408:6;7395:20;7386:29;;7420:33;7447:5;7420:33;;;7380:78;;;;;7465:263;;7580:2;7568:9;7559:7;7555:23;7551:32;7548:2;;;7596:1;7593;7586:12;7548:2;7631:1;7648:64;7704:7;7695:6;7684:9;7680:22;7648:64;;;7638:74;;7610:108;7542:186;;;;;7735:257;;7847:2;7835:9;7826:7;7822:23;7818:32;7815:2;;;7863:1;7860;7853:12;7815:2;7898:1;7915:61;7968:7;7959:6;7948:9;7944:22;7915:61;;;7905:71;;7877:105;7809:183;;;;;7999:241;;8103:2;8091:9;8082:7;8078:23;8074:32;8071:2;;;8119:1;8116;8109:12;8071:2;8154:1;8171:53;8216:7;8207:6;8196:9;8192:22;8171:53;;;8161:63;;8133:97;8065:175;;;;;8247:360;;8371:2;8359:9;8350:7;8346:23;8342:32;8339:2;;;8387:1;8384;8377:12;8339:2;8443:1;8432:9;8428:17;8422:24;8466:18;8458:6;8455:30;8452:2;;;8498:1;8495;8488:12;8452:2;8518:73;8583:7;8574:6;8563:9;8559:22;8518:73;;;8508:83;;8401:196;8333:274;;;;;8614:731;;;;8786:2;8774:9;8765:7;8761:23;8757:32;8754:2;;;8802:1;8799;8792:12;8754:2;8865:1;8854:9;8850:17;8837:31;8888:18;8880:6;8877:30;8874:2;;;8920:1;8917;8910:12;8874:2;8940:62;8994:7;8985:6;8974:9;8970:22;8940:62;;;8930:72;;8816:192;9039:2;9057:53;9102:7;9093:6;9082:9;9078:22;9057:53;;;9047:63;;9018:98;9175:2;9164:9;9160:18;9147:32;9199:18;9191:6;9188:30;9185:2;;;9231:1;9228;9221:12;9185:2;9251:78;9321:7;9312:6;9301:9;9297:22;9251:78;;;9241:88;;9126:209;8748:597;;;;;;9352:595;;;;9499:2;9487:9;9478:7;9474:23;9470:32;9467:2;;;9515:1;9512;9505:12;9467:2;9578:1;9567:9;9563:17;9550:31;9601:18;9593:6;9590:30;9587:2;;;9633:1;9630;9623:12;9587:2;9653:62;9707:7;9698:6;9687:9;9683:22;9653:62;;;9643:72;;9529:192;9752:2;9770:53;9815:7;9806:6;9795:9;9791:22;9770:53;;;9760:63;;9731:98;9860:2;9878:53;9923:7;9914:6;9903:9;9899:22;9878:53;;;9868:63;;9839:98;9461:486;;;;;;9954:470;;;10084:2;10072:9;10063:7;10059:23;10055:32;10052:2;;;10100:1;10097;10090:12;10052:2;10163:1;10152:9;10148:17;10135:31;10186:18;10178:6;10175:30;10172:2;;;10218:1;10215;10208:12;10172:2;10238:62;10292:7;10283:6;10272:9;10268:22;10238:62;;;10228:72;;10114:192;10337:2;10355:53;10400:7;10391:6;10380:9;10376:22;10355:53;;;10345:63;;10316:98;10046:378;;;;;;10431:614;;;10590:2;10578:9;10569:7;10565:23;10561:32;10558:2;;;10606:1;10603;10596:12;10558:2;10669:1;10658:9;10654:17;10641:31;10692:18;10684:6;10681:30;10678:2;;;10724:1;10721;10714:12;10678:2;10744:82;10818:7;10809:6;10798:9;10794:22;10744:82;;;10734:92;;10620:212;10891:2;10880:9;10876:18;10863:32;10915:18;10907:6;10904:30;10901:2;;;10947:1;10944;10937:12;10901:2;10967:62;11021:7;11012:6;11001:9;10997:22;10967:62;;;10957:72;;10842:193;10552:493;;;;;;11052:1193;;;;;;11277:3;11265:9;11256:7;11252:23;11248:33;11245:2;;;11294:1;11291;11284:12;11245:2;11357:1;11346:9;11342:17;11329:31;11380:18;11372:6;11369:30;11366:2;;;11412:1;11409;11402:12;11366:2;11432:82;11506:7;11497:6;11486:9;11482:22;11432:82;;;11422:92;;11308:212;11579:2;11568:9;11564:18;11551:32;11603:18;11595:6;11592:30;11589:2;;;11635:1;11632;11625:12;11589:2;11655:62;11709:7;11700:6;11689:9;11685:22;11655:62;;;11645:72;;11530:193;11782:2;11771:9;11767:18;11754:32;11806:18;11798:6;11795:30;11792:2;;;11838:1;11835;11828:12;11792:2;11858:62;11912:7;11903:6;11892:9;11888:22;11858:62;;;11848:72;;11733:193;11985:2;11974:9;11970:18;11957:32;12009:18;12001:6;11998:30;11995:2;;;12041:1;12038;12031:12;11995:2;12061:62;12115:7;12106:6;12095:9;12091:22;12061:62;;;12051:72;;11936:193;12160:3;12179:50;12221:7;12212:6;12201:9;12197:22;12179:50;;;12169:60;;12139:96;11239:1006;;;;;;;;;12252:975;;;;12503:2;12491:9;12482:7;12478:23;12474:32;12471:2;;;12519:1;12516;12509:12;12471:2;12582:1;12571:9;12567:17;12554:31;12605:18;12597:6;12594:30;12591:2;;;12637:1;12634;12627:12;12591:2;12657:82;12731:7;12722:6;12711:9;12707:22;12657:82;;;12647:92;;12533:212;12804:2;12793:9;12789:18;12776:32;12828:18;12820:6;12817:30;12814:2;;;12860:1;12857;12850:12;12814:2;12880:107;12979:7;12970:6;12959:9;12955:22;12880:107;;;12870:117;;12755:238;13052:2;13041:9;13037:18;13024:32;13076:18;13068:6;13065:30;13062:2;;;13108:1;13105;13098:12;13062:2;13128:83;13203:7;13194:6;13183:9;13179:22;13128:83;;;13118:93;;13003:214;12465:762;;;;;;13234:680;;;13426:2;13414:9;13405:7;13401:23;13397:32;13394:2;;;13442:1;13439;13432:12;13394:2;13505:1;13494:9;13490:17;13477:31;13528:18;13520:6;13517:30;13514:2;;;13560:1;13557;13550:12;13514:2;13580:82;13654:7;13645:6;13634:9;13630:22;13580:82;;;13570:92;;13456:212;13727:2;13716:9;13712:18;13699:32;13751:18;13743:6;13740:30;13737:2;;;13783:1;13780;13773:12;13737:2;13803:95;13890:7;13881:6;13870:9;13866:22;13803:95;;;13793:105;;13678:226;13388:526;;;;;;13922:173;;14009:46;14051:3;14043:6;14009:46;;;14084:4;14079:3;14075:14;14061:28;;14002:93;;;;;14103:103;14176:24;14194:5;14176:24;;;14171:3;14164:37;14158:48;;;14213:113;14296:24;14314:5;14296:24;;;14291:3;14284:37;14278:48;;;14333:152;14434:45;14454:24;14472:5;14454:24;;;14434:45;;;14429:3;14422:58;14416:69;;;14523:690;;14668:54;14716:5;14668:54;;;14735:86;14814:6;14809:3;14735:86;;;14728:93;;14842:56;14892:5;14842:56;;;14918:7;14946:1;14931:260;14956:6;14953:1;14950:13;14931:260;;;15023:6;15017:13;15044:63;15103:3;15088:13;15044:63;;;15037:70;;15124:60;15177:6;15124:60;;;15114:70;;14988:203;14978:1;14975;14971:9;14966:14;;14931:260;;;14935:14;15204:3;15197:10;;14647:566;;;;;;;;15252:674;;15393:50;15437:5;15393:50;;;15456:86;15535:6;15530:3;15456:86;;;15449:93;;15563:52;15609:5;15563:52;;;15635:7;15663:1;15648:256;15673:6;15670:1;15667:13;15648:256;;;15740:6;15734:13;15761:63;15820:3;15805:13;15761:63;;;15754:70;;15841:56;15890:6;15841:56;;;15831:66;;15705:199;15695:1;15692;15688:9;15683:14;;15648:256;;;15652:14;15917:3;15910:10;;15372:554;;;;;;;;15934:104;16011:21;16026:5;16011:21;;;16006:3;15999:34;15993:45;;;16045:148;16144:43;16163:23;16180:5;16163:23;;;16144:43;;;16139:3;16132:56;16126:67;;;16200:103;16273:24;16291:5;16273:24;;;16268:3;16261:37;16255:48;;;16310:113;16393:24;16411:5;16393:24;;;16388:3;16381:37;16375:48;;;16430:152;16531:45;16551:24;16569:5;16551:24;;;16531:45;;;16526:3;16519:58;16513:69;;;16589:343;;16699:38;16731:5;16699:38;;;16749:70;16812:6;16807:3;16749:70;;;16742:77;;16824:52;16869:6;16864:3;16857:4;16850:5;16846:16;16824:52;;;16897:29;16919:6;16897:29;;;16892:3;16888:39;16881:46;;16679:253;;;;;;16939:356;;17067:38;17099:5;17067:38;;;17117:88;17198:6;17193:3;17117:88;;;17110:95;;17210:52;17255:6;17250:3;17243:4;17236:5;17232:16;17210:52;;;17283:6;17278:3;17274:16;17267:23;;17047:248;;;;;;17302:335;;17408:34;17436:5;17408:34;;;17454:70;17517:6;17512:3;17454:70;;;17447:77;;17529:52;17574:6;17569:3;17562:4;17555:5;17551:16;17529:52;;;17602:29;17624:6;17602:29;;;17597:3;17593:39;17586:46;;17388:249;;;;;;17644:348;;17768:34;17796:5;17768:34;;;17814:88;17895:6;17890:3;17814:88;;;17807:95;;17907:52;17952:6;17947:3;17940:4;17933:5;17929:16;17907:52;;;17980:6;17975:3;17971:16;17964:23;;17748:244;;;;;;17999:152;18090:55;18139:5;18090:55;;;18085:3;18078:68;18072:79;;;18158:162;18259:55;18308:5;18259:55;;;18254:3;18247:68;18241:79;;;18328:465;;18488:67;18552:2;18547:3;18488:67;;;18481:74;;18588:66;18584:1;18579:3;18575:11;18568:87;18689:66;18684:2;18679:3;18675:12;18668:88;18784:2;18779:3;18775:12;18768:19;;18474:319;;;;18802:566;;18962:67;19026:2;19021:3;18962:67;;;18955:74;;19062:66;19058:1;19053:3;19049:11;19042:87;19163:66;19158:2;19153:3;19149:12;19142:88;19264:66;19259:2;19254:3;19250:12;19243:88;19359:2;19354:3;19350:12;19343:19;;18948:420;;;;19377:566;;19537:67;19601:2;19596:3;19537:67;;;19530:74;;19637:66;19633:1;19628:3;19624:11;19617:87;19738:66;19733:2;19728:3;19724:12;19717:88;19839:66;19834:2;19829:3;19825:12;19818:88;19934:2;19929:3;19925:12;19918:19;;19523:420;;;;19952:465;;20112:67;20176:2;20171:3;20112:67;;;20105:74;;20212:66;20208:1;20203:3;20199:11;20192:87;20313:66;20308:2;20303:3;20299:12;20292:88;20408:2;20403:3;20399:12;20392:19;;20098:319;;;;20426:364;;20586:67;20650:2;20645:3;20586:67;;;20579:74;;20686:66;20682:1;20677:3;20673:11;20666:87;20781:2;20776:3;20772:12;20765:19;;20572:218;;;;20799:566;;20959:67;21023:2;21018:3;20959:67;;;20952:74;;21059:66;21055:1;21050:3;21046:11;21039:87;21160:66;21155:2;21150:3;21146:12;21139:88;21261:66;21256:2;21251:3;21247:12;21240:88;21356:2;21351:3;21347:12;21340:19;;20945:420;;;;21374:364;;21534:67;21598:2;21593:3;21534:67;;;21527:74;;21634:66;21630:1;21625:3;21621:11;21614:87;21729:2;21724:3;21720:12;21713:19;;21520:218;;;;21747:364;;21907:67;21971:2;21966:3;21907:67;;;21900:74;;22007:66;22003:1;21998:3;21994:11;21987:87;22102:2;22097:3;22093:12;22086:19;;21893:218;;;;22120:465;;22280:67;22344:2;22339:3;22280:67;;;22273:74;;22380:66;22376:1;22371:3;22367:11;22360:87;22481:66;22476:2;22471:3;22467:12;22460:88;22576:2;22571:3;22567:12;22560:19;;22266:319;;;;22594:465;;22754:67;22818:2;22813:3;22754:67;;;22747:74;;22854:66;22850:1;22845:3;22841:11;22834:87;22955:66;22950:2;22945:3;22941:12;22934:88;23050:2;23045:3;23041:12;23034:19;;22740:319;;;;23068:465;;23228:67;23292:2;23287:3;23228:67;;;23221:74;;23328:66;23324:1;23319:3;23315:11;23308:87;23429:66;23424:2;23419:3;23415:12;23408:88;23524:2;23519:3;23515:12;23508:19;;23214:319;;;;23542:364;;23702:67;23766:2;23761:3;23702:67;;;23695:74;;23802:66;23798:1;23793:3;23789:11;23782:87;23897:2;23892:3;23888:12;23881:19;;23688:218;;;;23915:465;;24075:67;24139:2;24134:3;24075:67;;;24068:74;;24175:66;24171:1;24166:3;24162:11;24155:87;24276:66;24271:2;24266:3;24262:12;24255:88;24371:2;24366:3;24362:12;24355:19;;24061:319;;;;24389:566;;24549:67;24613:2;24608:3;24549:67;;;24542:74;;24649:66;24645:1;24640:3;24636:11;24629:87;24750:66;24745:2;24740:3;24736:12;24729:88;24851:66;24846:2;24841:3;24837:12;24830:88;24946:2;24941:3;24937:12;24930:19;;24535:420;;;;24964:465;;25124:67;25188:2;25183:3;25124:67;;;25117:74;;25224:66;25220:1;25215:3;25211:11;25204:87;25325:66;25320:2;25315:3;25311:12;25304:88;25420:2;25415:3;25411:12;25404:19;;25110:319;;;;25438:566;;25598:67;25662:2;25657:3;25598:67;;;25591:74;;25698:66;25694:1;25689:3;25685:11;25678:87;25799:66;25794:2;25789:3;25785:12;25778:88;25900:66;25895:2;25890:3;25886:12;25879:88;25995:2;25990:3;25986:12;25979:19;;25584:420;;;;26013:566;;26173:67;26237:2;26232:3;26173:67;;;26166:74;;26273:66;26269:1;26264:3;26260:11;26253:87;26374:66;26369:2;26364:3;26360:12;26353:88;26475:66;26470:2;26465:3;26461:12;26454:88;26570:2;26565:3;26561:12;26554:19;;26159:420;;;;26588:566;;26748:67;26812:2;26807:3;26748:67;;;26741:74;;26848:66;26844:1;26839:3;26835:11;26828:87;26949:66;26944:2;26939:3;26935:12;26928:88;27050:66;27045:2;27040:3;27036:12;27029:88;27145:2;27140:3;27136:12;27129:19;;26734:420;;;;27163:465;;27323:67;27387:2;27382:3;27323:67;;;27316:74;;27423:66;27419:1;27414:3;27410:11;27403:87;27524:66;27519:2;27514:3;27510:12;27503:88;27619:2;27614:3;27610:12;27603:19;;27309:319;;;;27723:1167;27876:4;27871:3;27867:14;27961:3;27954:5;27950:15;27944:22;27972:80;28047:3;28042;28038:13;28024:12;27972:80;;;27896:162;28142:4;28135:5;28131:16;28125:23;28154:63;28211:4;28206:3;28202:14;28188:12;28154:63;;;28068:155;28304:4;28297:5;28293:16;28287:23;28316:63;28373:4;28368:3;28364:14;28350:12;28316:63;;;28233:152;28470:4;28463:5;28459:16;28453:23;28482:63;28539:4;28534:3;28530:14;28516:12;28482:63;;;28395:156;28631:4;28624:5;28620:16;28614:23;28643:63;28700:4;28695:3;28691:14;28677:12;28643:63;;;28561:151;28794:4;28787:5;28783:16;28777:23;28806:63;28863:4;28858:3;28854:14;28840:12;28806:63;;;28722:153;27849:1041;;;;28897:103;28970:24;28988:5;28970:24;;;28965:3;28958:37;28952:48;;;29007:113;29090:24;29108:5;29090:24;;;29085:3;29078:37;29072:48;;;29127:152;29228:45;29248:24;29266:5;29248:24;;;29228:45;;;29223:3;29216:58;29210:69;;;29286:107;29365:22;29381:5;29365:22;;;29360:3;29353:35;29347:46;;;29400:813;;29647:73;29716:3;29707:6;29647:73;;;29742:1;29737:3;29733:11;29726:18;;29755:75;29826:3;29817:6;29755:75;;;29852:2;29847:3;29843:12;29836:19;;29866:75;29937:3;29928:6;29866:75;;;29963:2;29958:3;29954:12;29947:19;;29984:93;30073:3;30064:6;29984:93;;;29977:100;;30088:75;30159:3;30150:6;30088:75;;;30185:2;30180:3;30176:12;30169:19;;30205:3;30198:10;;29635:578;;;;;;;;;30220:795;;30449:73;30518:3;30509:6;30449:73;;;30544:1;30539:3;30535:11;30528:18;;30557:75;30628:3;30619:6;30557:75;;;30654:2;30649:3;30645:12;30638:19;;30668:75;30739:3;30730:6;30668:75;;;30765:2;30760:3;30756:12;30749:19;;30779:75;30850:3;30841:6;30779:75;;;30876:2;30871:3;30867:12;30860:19;;30890:75;30961:3;30952:6;30890:75;;;30987:2;30982:3;30978:12;30971:19;;31007:3;31000:10;;30437:578;;;;;;;;;31022:254;;31162:89;31247:3;31238:6;31162:89;;;31155:96;;31268:3;31261:10;;31143:133;;;;;31283:213;;31401:2;31390:9;31386:18;31378:26;;31415:71;31483:1;31472:9;31468:17;31459:6;31415:71;;;31372:124;;;;;31503:201;;31615:2;31604:9;31600:18;31592:26;;31629:65;31691:1;31680:9;31676:17;31667:6;31629:65;;;31586:118;;;;;31711:539;;31909:3;31898:9;31894:19;31886:27;;31924:71;31992:1;31981:9;31977:17;31968:6;31924:71;;;32006:68;32070:2;32059:9;32055:18;32046:6;32006:68;;;32085:72;32153:2;32142:9;32138:18;32129:6;32085:72;;;32168;32236:2;32225:9;32221:18;32212:6;32168:72;;;31880:370;;;;;;;;32257:289;;32389:2;32378:9;32374:18;32366:26;;32439:9;32433:4;32429:20;32425:1;32414:9;32410:17;32403:47;32464:72;32531:4;32522:6;32464:72;;;32456:80;;32360:186;;;;;32553:297;;32689:2;32678:9;32674:18;32666:26;;32739:9;32733:4;32729:20;32725:1;32714:9;32710:17;32703:47;32764:76;32835:4;32826:6;32764:76;;;32756:84;;32660:190;;;;;32857:556;;33071:2;33060:9;33056:18;33048:26;;33121:9;33115:4;33111:20;33107:1;33096:9;33092:17;33085:47;33146:76;33217:4;33208:6;33146:76;;;33138:84;;33270:9;33264:4;33260:20;33255:2;33244:9;33240:18;33233:48;33295:108;33398:4;33389:6;33295:108;;;33287:116;;33042:371;;;;;;33420:492;;33602:2;33591:9;33587:18;33579:26;;33652:9;33646:4;33642:20;33638:1;33627:9;33623:17;33616:47;33677:76;33748:4;33739:6;33677:76;;;33669:84;;33801:9;33795:4;33791:20;33786:2;33775:9;33771:18;33764:48;33826:76;33897:4;33888:6;33826:76;;;33818:84;;33573:339;;;;;;33919:807;;34195:3;34184:9;34180:19;34172:27;;34210:89;34296:1;34285:9;34281:17;34272:6;34210:89;;;34310:72;34378:2;34367:9;34363:18;34354:6;34310:72;;;34393;34461:2;34450:9;34446:18;34437:6;34393:72;;;34476;34544:2;34533:9;34529:18;34520:6;34476:72;;;34559:73;34627:3;34616:9;34612:19;34603:6;34559:73;;;34643;34711:3;34700:9;34696:19;34687:6;34643:73;;;34166:560;;;;;;;;;;34733:407;;34924:2;34913:9;34909:18;34901:26;;34974:9;34968:4;34964:20;34960:1;34949:9;34945:17;34938:47;34999:131;35125:4;34999:131;;;34991:139;;34895:245;;;;35147:407;;35338:2;35327:9;35323:18;35315:26;;35388:9;35382:4;35378:20;35374:1;35363:9;35359:17;35352:47;35413:131;35539:4;35413:131;;;35405:139;;35309:245;;;;35561:407;;35752:2;35741:9;35737:18;35729:26;;35802:9;35796:4;35792:20;35788:1;35777:9;35773:17;35766:47;35827:131;35953:4;35827:131;;;35819:139;;35723:245;;;;35975:407;;36166:2;36155:9;36151:18;36143:26;;36216:9;36210:4;36206:20;36202:1;36191:9;36187:17;36180:47;36241:131;36367:4;36241:131;;;36233:139;;36137:245;;;;36389:407;;36580:2;36569:9;36565:18;36557:26;;36630:9;36624:4;36620:20;36616:1;36605:9;36601:17;36594:47;36655:131;36781:4;36655:131;;;36647:139;;36551:245;;;;36803:407;;36994:2;36983:9;36979:18;36971:26;;37044:9;37038:4;37034:20;37030:1;37019:9;37015:17;37008:47;37069:131;37195:4;37069:131;;;37061:139;;36965:245;;;;37217:407;;37408:2;37397:9;37393:18;37385:26;;37458:9;37452:4;37448:20;37444:1;37433:9;37429:17;37422:47;37483:131;37609:4;37483:131;;;37475:139;;37379:245;;;;37631:407;;37822:2;37811:9;37807:18;37799:26;;37872:9;37866:4;37862:20;37858:1;37847:9;37843:17;37836:47;37897:131;38023:4;37897:131;;;37889:139;;37793:245;;;;38045:407;;38236:2;38225:9;38221:18;38213:26;;38286:9;38280:4;38276:20;38272:1;38261:9;38257:17;38250:47;38311:131;38437:4;38311:131;;;38303:139;;38207:245;;;;38459:407;;38650:2;38639:9;38635:18;38627:26;;38700:9;38694:4;38690:20;38686:1;38675:9;38671:17;38664:47;38725:131;38851:4;38725:131;;;38717:139;;38621:245;;;;38873:407;;39064:2;39053:9;39049:18;39041:26;;39114:9;39108:4;39104:20;39100:1;39089:9;39085:17;39078:47;39139:131;39265:4;39139:131;;;39131:139;;39035:245;;;;39287:407;;39478:2;39467:9;39463:18;39455:26;;39528:9;39522:4;39518:20;39514:1;39503:9;39499:17;39492:47;39553:131;39679:4;39553:131;;;39545:139;;39449:245;;;;39701:407;;39892:2;39881:9;39877:18;39869:26;;39942:9;39936:4;39932:20;39928:1;39917:9;39913:17;39906:47;39967:131;40093:4;39967:131;;;39959:139;;39863:245;;;;40115:407;;40306:2;40295:9;40291:18;40283:26;;40356:9;40350:4;40346:20;40342:1;40331:9;40327:17;40320:47;40381:131;40507:4;40381:131;;;40373:139;;40277:245;;;;40529:407;;40720:2;40709:9;40705:18;40697:26;;40770:9;40764:4;40760:20;40756:1;40745:9;40741:17;40734:47;40795:131;40921:4;40795:131;;;40787:139;;40691:245;;;;40943:407;;41134:2;41123:9;41119:18;41111:26;;41184:9;41178:4;41174:20;41170:1;41159:9;41155:17;41148:47;41209:131;41335:4;41209:131;;;41201:139;;41105:245;;;;41357:407;;41548:2;41537:9;41533:18;41525:26;;41598:9;41592:4;41588:20;41584:1;41573:9;41569:17;41562:47;41623:131;41749:4;41623:131;;;41615:139;;41519:245;;;;41771:407;;41962:2;41951:9;41947:18;41939:26;;42012:9;42006:4;42002:20;41998:1;41987:9;41983:17;41976:47;42037:131;42163:4;42037:131;;;42029:139;;41933:245;;;;42185:407;;42376:2;42365:9;42361:18;42353:26;;42426:9;42420:4;42416:20;42412:1;42401:9;42397:17;42390:47;42451:131;42577:4;42451:131;;;42443:139;;42347:245;;;;42599:334;;42777:3;42766:9;42762:19;42754:27;;42792:131;42920:1;42909:9;42905:17;42896:6;42792:131;;;42748:185;;;;;42940:464;;43132:2;43121:9;43117:18;43109:26;;43146:71;43214:1;43203:9;43199:17;43190:6;43146:71;;;43265:9;43259:4;43255:20;43250:2;43239:9;43235:18;43228:48;43290:104;43389:4;43380:6;43290:104;;;43282:112;;43103:301;;;;;;43411:427;;43581:2;43570:9;43566:18;43558:26;;43595:67;43659:1;43648:9;43644:17;43635:6;43595:67;;;43673:72;43741:2;43730:9;43726:18;43717:6;43673:72;;;43756;43824:2;43813:9;43809:18;43800:6;43756:72;;;43552:286;;;;;;;43845:256;;43907:2;43901:9;43891:19;;43945:4;43937:6;43933:17;44044:6;44032:10;44029:22;44008:18;43996:10;43993:34;43990:62;43987:2;;;44065:1;44062;44055:12;43987:2;44085:10;44081:2;44074:22;43885:216;;;;;44108:300;;44263:18;44255:6;44252:30;44249:2;;;44295:1;44292;44285:12;44249:2;44330:4;44322:6;44318:17;44310:25;;44393:4;44387;44383:15;44375:23;;44186:222;;;;44415:304;;44574:18;44566:6;44563:30;44560:2;;;44606:1;44603;44596:12;44560:2;44641:4;44633:6;44629:17;44621:25;;44704:4;44698;44694:15;44686:23;;44497:222;;;;44726:317;;44865:18;44857:6;44854:30;44851:2;;;44897:1;44894;44887:12;44851:2;44964:4;44960:9;44953:4;44945:6;44941:17;44937:33;44929:41;;45028:4;45022;45018:15;45010:23;;44788:255;;;;45050:321;;45193:18;45185:6;45182:30;45179:2;;;45225:1;45222;45215:12;45179:2;45292:4;45288:9;45281:4;45273:6;45269:17;45265:33;45257:41;;45356:4;45350;45346:15;45338:23;;45116:255;;;;45378:147;;45460:3;45452:11;;45498:4;45493:3;45489:14;45481:22;;45446:79;;;;45532:151;;45618:3;45610:11;;45656:4;45651:3;45647:14;45639:22;;45604:79;;;;45690:133;;45795:5;45789:12;45779:22;;45760:63;;;;45830:137;;45939:5;45933:12;45923:22;;45904:63;;;;45974:117;;46063:5;46057:12;46047:22;;46028:63;;;;46098:121;;46191:5;46185:12;46175:22;;46156:63;;;;46226:104;;46320:4;46315:3;46311:14;46303:22;;46297:33;;;;46337:108;;46435:4;46430:3;46426:14;46418:22;;46412:33;;;;46453:178;;46583:6;46578:3;46571:19;46620:4;46615:3;46611:14;46596:29;;46564:67;;;;;46640:162;;46754:6;46749:3;46742:19;46791:4;46786:3;46782:14;46767:29;;46735:67;;;;;46811:144;;46946:3;46931:18;;46924:31;;;;;46964:163;;47079:6;47074:3;47067:19;47116:4;47111:3;47107:14;47092:29;;47060:67;;;;;47135:91;;47197:24;47215:5;47197:24;;;47186:35;;47180:46;;;;47233:85;;47306:5;47299:13;47292:21;47281:32;;47275:43;;;;47325:144;;47397:66;47390:5;47386:78;47375:89;;47369:100;;;;47476:72;;47538:5;47527:16;;47521:27;;;;47555:146;;47637:5;47626:16;;47643:53;47690:5;47643:53;;;47620:81;;;;47708:121;;47781:42;47774:5;47770:54;47759:65;;47753:76;;;;47836:72;;47898:5;47887:16;;47881:27;;;;47915:81;;47986:4;47979:5;47975:16;47964:27;;47958:38;;;;48003:146;;48100:44;48138:5;48100:44;;;48087:57;;48081:68;;;;48157:145;48238:6;48233:3;48228;48215:30;48294:1;48285:6;48280:3;48276:16;48269:27;48208:94;;;;48311:268;48376:1;48383:101;48397:6;48394:1;48391:13;48383:101;;;48473:1;48468:3;48464:11;48458:18;48454:1;48449:3;48445:11;48438:39;48419:2;48416:1;48412:10;48407:15;;48383:101;;;48499:6;48496:1;48493:13;48490:2;;;48564:1;48555:6;48550:3;48546:16;48539:27;48490:2;48360:219;;;;;48587:95;;48651:26;48671:5;48651:26;;;48640:37;;48634:48;;;;48689:73;;48752:5;48741:16;;48735:27;;;;48769:74;;48833:5;48822:16;;48816:27;;;;48850:89;;48914:20;48928:5;48914:20;;;48903:31;;48897:42;;;;48946:74;;49010:5;48999:16;;48993:27;;;;49027:97;;49115:2;49111:7;49106:2;49099:5;49095:14;49091:28;49081:38;;49075:49;;;;49132:94;;49210:5;49206:2;49202:14;49180:36;;49174:52;;;;49234:111;49323:1;49316:5;49313:12;49303:2;;49329:9;49303:2;49297:48;;49352:117;49421:24;49439:5;49421:24;;;49414:5;49411:35;49401:2;;49460:1;49457;49450:12;49401:2;49395:74;;49476:111;49542:21;49557:5;49542:21;;;49535:5;49532:32;49522:2;;49578:1;49575;49568:12;49522:2;49516:71;;49594:117;49663:24;49681:5;49663:24;;;49656:5;49653:35;49643:2;;49702:1;49699;49692:12;49643:2;49637:74;;49718:117;49787:24;49805:5;49787:24;;;49780:5;49777:35;49767:2;;49826:1;49823;49816:12;49767:2;49761:74;"}};var bytecode$4="";var ChallengeRegistry = {abi:abi$4,evm:evm$4,"interface":[{constant:true,inputs:[{name:"",type:"bytes32"}],name:"appOutcomes",outputs:[{name:"",type:"bytes"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"identityHash",type:"bytes32"}],name:"isStateFinalized",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{components:[{name:"channelNonce",type:"uint256"},{name:"participants",type:"address[]"},{name:"appDefinition",type:"address"},{name:"defaultTimeout",type:"uint256"}],name:"appIdentity",type:"tuple"},{name:"signatures",type:"bytes"}],name:"cancelChallenge",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"signatures",type:"bytes"},{name:"txHash",type:"bytes32"},{name:"signers",type:"address[]"}],name:"verifySignatures",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"pure",type:"function"},{constant:false,inputs:[{components:[{name:"channelNonce",type:"uint256"},{name:"participants",type:"address[]"},{name:"appDefinition",type:"address"},{name:"defaultTimeout",type:"uint256"}],name:"appIdentity",type:"tuple"},{components:[{name:"appState",type:"bytes"},{name:"versionNumber",type:"uint256"},{name:"timeout",type:"uint256"},{name:"signatures",type:"bytes"}],name:"req",type:"tuple"},{components:[{name:"encodedAction",type:"bytes"},{name:"signature",type:"bytes"},{name:"checkForTerminal",type:"bool"}],name:"action",type:"tuple"}],name:"setStateWithAction",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"identityHash",type:"bytes32"}],name:"getOutcome",outputs:[{name:"",type:"bytes"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"",type:"bytes32"}],name:"appChallenges",outputs:[{name:"status",type:"uint8"},{name:"latestSubmitter",type:"address"},{name:"appStateHash",type:"bytes32"},{name:"challengeCounter",type:"uint256"},{name:"finalizesAt",type:"uint256"},{name:"versionNumber",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{components:[{name:"channelNonce",type:"uint256"},{name:"participants",type:"address[]"},{name:"appDefinition",type:"address"},{name:"defaultTimeout",type:"uint256"}],name:"appIdentity",type:"tuple"},{components:[{name:"appStateHash",type:"bytes32"},{name:"versionNumber",type:"uint256"},{name:"timeout",type:"uint256"},{name:"signatures",type:"bytes"}],name:"req",type:"tuple"}],name:"setState",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"identityHash",type:"bytes32"}],name:"getAppChallenge",outputs:[{components:[{name:"status",type:"uint8"},{name:"latestSubmitter",type:"address"},{name:"appStateHash",type:"bytes32"},{name:"challengeCounter",type:"uint256"},{name:"finalizesAt",type:"uint256"},{name:"versionNumber",type:"uint256"}],name:"",type:"tuple"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"signatures",type:"bytes"},{name:"pos",type:"uint256"}],name:"signatureSplit",outputs:[{name:"v",type:"uint8"},{name:"r",type:"bytes32"},{name:"s",type:"bytes32"}],payable:false,stateMutability:"pure",type:"function"},{constant:false,inputs:[{components:[{name:"channelNonce",type:"uint256"},{name:"participants",type:"address[]"},{name:"appDefinition",type:"address"},{name:"defaultTimeout",type:"uint256"}],name:"appIdentity",type:"tuple"},{name:"appState",type:"bytes"},{name:"action",type:"bytes"},{name:"actionSignature",type:"bytes"},{name:"claimFinal",type:"bool"}],name:"respondToChallenge",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"messageSignature",type:"bytes"},{name:"txHash",type:"bytes32"},{name:"pos",type:"uint256"}],name:"recoverKey",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"pure",type:"function"},{constant:false,inputs:[{components:[{name:"channelNonce",type:"uint256"},{name:"participants",type:"address[]"},{name:"appDefinition",type:"address"},{name:"defaultTimeout",type:"uint256"}],name:"appIdentity",type:"tuple"},{name:"finalState",type:"bytes"}],name:"setOutcome",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{inputs:[],payable:false,stateMutability:"nonpayable",type:"constructor"}],bytecode:bytecode$4};

    const { signaturesToBytesSortedBySignerAddress: signaturesToBytesSortedBySignerAddress$1 } = cf_js.utils;
    const iface$1 = new utils.Interface(ChallengeRegistry.abi);
    class SetStateCommitment extends EthereumCommitment {
        constructor(networkContext, appIdentity, hashedAppState, appVersionNumber, timeout) {
            super();
            this.networkContext = networkContext;
            this.appIdentity = appIdentity;
            this.hashedAppState = hashedAppState;
            this.appVersionNumber = appVersionNumber;
            this.timeout = timeout;
        }
        hashToSign() {
            return utils.keccak256(utils.solidityPack(["bytes1", "bytes32", "uint256", "uint256", "bytes32"], [
                "0x19",
                appIdentityToHash(this.appIdentity),
                this.appVersionNumber,
                this.timeout,
                this.hashedAppState
            ]));
        }
        getSignedTransaction(sigs) {
            return {
                to: this.networkContext.ChallengeRegistry,
                value: 0,
                data: iface$1.functions.setState.encode([
                    this.appIdentity,
                    this.getSignedStateHashUpdate(sigs)
                ])
            };
        }
        getSignedStateHashUpdate(signatures) {
            return {
                appStateHash: this.hashedAppState,
                versionNumber: this.appVersionNumber,
                timeout: this.timeout,
                signatures: signaturesToBytesSortedBySignerAddress$1(this.hashToSign(), ...signatures)
            };
        }
    }

    const iface$2 = new utils.Interface(ConditionalTransactionDelegateTarget.abi);
    class SetupCommitment extends MultisigCommitment {
        constructor(networkContext, multisigAddress, multisigOwners, freeBalanceAppIdentity, freeBalanceInterpreterParams) {
            super(multisigAddress, multisigOwners);
            this.networkContext = networkContext;
            this.multisigAddress = multisigAddress;
            this.multisigOwners = multisigOwners;
            this.freeBalanceAppIdentity = freeBalanceAppIdentity;
            this.freeBalanceInterpreterParams = freeBalanceInterpreterParams;
        }
        getTransactionDetails() {
            return {
                to: this.networkContext.ConditionalTransactionDelegateTarget,
                value: 0,
                data: iface$2.functions.executeEffectOfFreeBalance.encode([
                    this.networkContext.ChallengeRegistry,
                    appIdentityToHash(this.freeBalanceAppIdentity),
                    this.networkContext.CoinTransferInterpreter,
                    this.freeBalanceInterpreterParams
                ]),
                operation: MultisigOperation.DelegateCall
            };
        }
    }

    var abi$5=[{constant:false,inputs:[{name:"spender",type:"address"},{name:"value",type:"uint256"}],name:"approve",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{name:"sender",type:"address"},{name:"recipient",type:"address"},{name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"spender",type:"address"},{name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"account",type:"address"}],name:"balanceOf",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{name:"spender",type:"address"},{name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"recipient",type:"address"},{name:"amount",type:"uint256"}],name:"transfer",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"owner",type:"address"},{name:"spender",type:"address"}],name:"allowance",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{anonymous:false,inputs:[{indexed:true,name:"from",type:"address"},{indexed:true,name:"to",type:"address"},{indexed:false,name:"value",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:false,inputs:[{indexed:true,name:"owner",type:"address"},{indexed:true,name:"spender",type:"address"},{indexed:false,name:"value",type:"uint256"}],name:"Approval",type:"event"}];var evm$5={bytecode:{linkReferences:{},object:"608060405234801561001057600080fd5b50610d02806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806370a082311161005b57806370a08231146101fd578063a457c2d714610255578063a9059cbb146102bb578063dd62ed3e1461032157610088565b8063095ea7b31461008d57806318160ddd146100f357806323b872dd146101115780633950935114610197575b600080fd5b6100d9600480360360408110156100a357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610399565b604051808215151515815260200191505060405180910390f35b6100fb6103b0565b6040518082815260200191505060405180910390f35b61017d6004803603606081101561012757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506103ba565b604051808215151515815260200191505060405180910390f35b6101e3600480360360408110156101ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061046b565b604051808215151515815260200191505060405180910390f35b61023f6004803603602081101561021357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610510565b6040518082815260200191505060405180910390f35b6102a16004803603604081101561026b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610558565b604051808215151515815260200191505060405180910390f35b610307600480360360408110156102d157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105fd565b604051808215151515815260200191505060405180910390f35b6103836004803603604081101561033757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610614565b6040518082815260200191505060405180910390f35b60006103a633848461069b565b6001905092915050565b6000600254905090565b60006103c7848484610892565b610460843361045b85600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b2e90919063ffffffff16565b61069b565b600190509392505050565b6000610506338461050185600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bb790919063ffffffff16565b61069b565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006105f333846105ee85600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b2e90919063ffffffff16565b61069b565b6001905092915050565b600061060a338484610892565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610721576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180610caa6024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107a7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610c636022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610918576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180610c856025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561099e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610c406023913960400191505060405180910390fd5b6109ef816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b2e90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a82816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bb790919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600082821115610ba6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b600080828401905083811015610c35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373a265627a7a723058202de6bec7aaabf8bd5a534f4c261581bcb31e04c363def652e91f044cacbd974f64736f6c634300050a0032",opcodes:"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD02 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x321 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xF3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x197 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x399 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFB PUSH2 0x3B0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x127 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3BA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x46B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x510 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x558 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x307 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x383 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x614 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x3A6 CALLER DUP5 DUP5 PUSH2 0x69B JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C7 DUP5 DUP5 DUP5 PUSH2 0x892 JUMP JUMPDEST PUSH2 0x460 DUP5 CALLER PUSH2 0x45B DUP6 PUSH1 0x1 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xB2E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x69B JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x506 CALLER DUP5 PUSH2 0x501 DUP6 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xBB7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x69B JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F3 CALLER DUP5 PUSH2 0x5EE DUP6 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xB2E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x69B JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60A CALLER DUP5 DUP5 PUSH2 0x892 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x721 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xCAA PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x7A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xC63 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x918 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xC85 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x99E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xC40 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9EF DUP2 PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xB2E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xA82 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xBB7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xBA6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xC35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH7 0x726F6D20746865 KECCAK256 PUSH27 0x65726F206164647265737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 LOG2 PUSH6 0x627A7A723058 KECCAK256 0x2d 0xe6 0xbe 0xc7 0xaa 0xab 0xf8 0xbd GAS MSTORE8 0x4f 0x4c 0x26 ISZERO DUP2 0xbc 0xb3 0x1e DIV 0xc3 PUSH4 0xDEF652E9 0x1f DIV 0x4c 0xac 0xbd SWAP8 0x4f PUSH5 0x736F6C6343 STOP SDIV EXP STOP ORIGIN ",sourceMap:"1232:6578:32:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1232:6578:32;;;;;;;"},deployedBytecode:{linkReferences:{},object:"608060405234801561001057600080fd5b50600436106100885760003560e01c806370a082311161005b57806370a08231146101fd578063a457c2d714610255578063a9059cbb146102bb578063dd62ed3e1461032157610088565b8063095ea7b31461008d57806318160ddd146100f357806323b872dd146101115780633950935114610197575b600080fd5b6100d9600480360360408110156100a357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610399565b604051808215151515815260200191505060405180910390f35b6100fb6103b0565b6040518082815260200191505060405180910390f35b61017d6004803603606081101561012757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506103ba565b604051808215151515815260200191505060405180910390f35b6101e3600480360360408110156101ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061046b565b604051808215151515815260200191505060405180910390f35b61023f6004803603602081101561021357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610510565b6040518082815260200191505060405180910390f35b6102a16004803603604081101561026b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610558565b604051808215151515815260200191505060405180910390f35b610307600480360360408110156102d157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105fd565b604051808215151515815260200191505060405180910390f35b6103836004803603604081101561033757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610614565b6040518082815260200191505060405180910390f35b60006103a633848461069b565b6001905092915050565b6000600254905090565b60006103c7848484610892565b610460843361045b85600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b2e90919063ffffffff16565b61069b565b600190509392505050565b6000610506338461050185600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bb790919063ffffffff16565b61069b565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006105f333846105ee85600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b2e90919063ffffffff16565b61069b565b6001905092915050565b600061060a338484610892565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610721576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180610caa6024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107a7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610c636022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610918576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180610c856025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561099e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610c406023913960400191505060405180910390fd5b6109ef816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b2e90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a82816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bb790919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600082821115610ba6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b600080828401905083811015610c35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373a265627a7a723058202de6bec7aaabf8bd5a534f4c261581bcb31e04c363def652e91f044cacbd974f64736f6c634300050a0032",opcodes:"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x321 JUMPI PUSH2 0x88 JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xF3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x111 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x197 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD9 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x399 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFB PUSH2 0x3B0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x127 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x3BA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x46B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23F PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x510 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A1 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x26B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x558 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x307 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x383 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x614 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH2 0x3A6 CALLER DUP5 DUP5 PUSH2 0x69B JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3C7 DUP5 DUP5 DUP5 PUSH2 0x892 JUMP JUMPDEST PUSH2 0x460 DUP5 CALLER PUSH2 0x45B DUP6 PUSH1 0x1 PUSH1 0x0 DUP11 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xB2E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x69B JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x506 CALLER DUP5 PUSH2 0x501 DUP6 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xBB7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x69B JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5F3 CALLER DUP5 PUSH2 0x5EE DUP6 PUSH1 0x1 PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xB2E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH2 0x69B JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60A CALLER DUP5 DUP5 PUSH2 0x892 JUMP JUMPDEST PUSH1 0x1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x721 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xCAA PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x7A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x22 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xC63 PUSH1 0x22 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x918 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xC85 PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0x99E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x23 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0xC40 PUSH1 0x23 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9EF DUP2 PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xB2E SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH2 0xA82 DUP2 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0xBB7 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xBA6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1E DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A207375627472616374696F6E206F766572666C6F770000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP5 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0xC35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x1B DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH32 0x536166654D6174683A206164646974696F6E206F766572666C6F770000000000 DUP2 MSTORE POP PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220746F20746865207A65726F2061 PUSH5 0x6472657373 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH2 0x7070 PUSH19 0x6F766520746F20746865207A65726F20616464 PUSH19 0x65737345524332303A207472616E7366657220 PUSH7 0x726F6D20746865 KECCAK256 PUSH27 0x65726F206164647265737345524332303A20617070726F76652066 PUSH19 0x6F6D20746865207A65726F2061646472657373 LOG2 PUSH6 0x627A7A723058 KECCAK256 0x2d 0xe6 0xbe 0xc7 0xaa 0xab 0xf8 0xbd GAS MSTORE8 0x4f 0x4c 0x26 ISZERO DUP2 0xbc 0xb3 0x1e DIV 0xc3 PUSH4 0xDEF652E9 0x1f DIV 0x4c 0xac 0xbd SWAP8 0x4f PUSH5 0x736F6C6343 STOP SDIV EXP STOP ORIGIN ",sourceMap:"1232:6578:32:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1232:6578:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2453:145;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2453:145:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1514:89;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3055:252;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3055:252:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;3702:203;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3702:203:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1661:108;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1661:108:32;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4392:213;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4392:213:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1972:153;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1972:153:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;2183:132;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2183:132:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2453:145;2518:4;2534:36;2543:10;2555:7;2564:5;2534:8;:36::i;:::-;2587:4;2580:11;;2453:145;;;;:::o;1514:89::-;1558:7;1584:12;;1577:19;;1514:89;:::o;3055:252::-;3144:4;3160:36;3170:6;3178:9;3189:6;3160:9;:36::i;:::-;3206:73;3215:6;3223:10;3235:43;3271:6;3235:11;:19;3247:6;3235:19;;;;;;;;;;;;;;;:31;3255:10;3235:31;;;;;;;;;;;;;;;;:35;;:43;;;;:::i;:::-;3206:8;:73::i;:::-;3296:4;3289:11;;3055:252;;;;;:::o;3702:203::-;3782:4;3798:79;3807:10;3819:7;3828:48;3865:10;3828:11;:23;3840:10;3828:23;;;;;;;;;;;;;;;:32;3852:7;3828:32;;;;;;;;;;;;;;;;:36;;:48;;;;:::i;:::-;3798:8;:79::i;:::-;3894:4;3887:11;;3702:203;;;;:::o;1661:108::-;1718:7;1744:9;:18;1754:7;1744:18;;;;;;;;;;;;;;;;1737:25;;1661:108;;;:::o;4392:213::-;4477:4;4493:84;4502:10;4514:7;4523:53;4560:15;4523:11;:23;4535:10;4523:23;;;;;;;;;;;;;;;:32;4547:7;4523:32;;;;;;;;;;;;;;;;:36;;:53;;;;:::i;:::-;4493:8;:84::i;:::-;4594:4;4587:11;;4392:213;;;;:::o;1972:153::-;2041:4;2057:40;2067:10;2079:9;2090:6;2057:9;:40::i;:::-;2114:4;2107:11;;1972:153;;;;:::o;2183:132::-;2255:7;2281:11;:18;2293:5;2281:18;;;;;;;;;;;;;;;:27;2300:7;2281:27;;;;;;;;;;;;;;;;2274:34;;2183:132;;;;:::o;7117:329::-;7226:1;7209:19;;:5;:19;;;;7201:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7306:1;7287:21;;:7;:21;;;;7279:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7388:5;7358:11;:18;7370:5;7358:18;;;;;;;;;;;;;;;:27;7377:7;7358:27;;;;;;;;;;;;;;;:35;;;;7424:7;7408:31;;7417:5;7408:31;;;7433:5;7408:31;;;;;;;;;;;;;;;;;;7117:329;;;:::o;5079:422::-;5194:1;5176:20;;:6;:20;;;;5168:70;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5277:1;5256:23;;:9;:23;;;;5248:71;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5350:29;5372:6;5350:9;:17;5360:6;5350:17;;;;;;;;;;;;;;;;:21;;:29;;;;:::i;:::-;5330:9;:17;5340:6;5330:17;;;;;;;;;;;;;;;:49;;;;5412:32;5437:6;5412:9;:20;5422:9;5412:20;;;;;;;;;;;;;;;;:24;;:32;;;;:::i;:::-;5389:9;:20;5399:9;5389:20;;;;;;;;;;;;;;;:55;;;;5476:9;5459:35;;5468:6;5459:35;;;5487:6;5459:35;;;;;;;;;;;;;;;;;;5079:422;;;:::o;1274:179:31:-;1332:7;1364:1;1359;:6;;1351:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1410:9;1426:1;1422;:5;1410:17;;1445:1;1438:8;;;1274:179;;;;:::o;834:176::-;892:7;911:9;927:1;923;:5;911:17;;951:1;946;:6;;938:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1002:1;995:8;;;834:176;;;;:::o"}};var bytecode$5="608060405234801561001057600080fd5b50610d02806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806370a082311161005b57806370a08231146101fd578063a457c2d714610255578063a9059cbb146102bb578063dd62ed3e1461032157610088565b8063095ea7b31461008d57806318160ddd146100f357806323b872dd146101115780633950935114610197575b600080fd5b6100d9600480360360408110156100a357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610399565b604051808215151515815260200191505060405180910390f35b6100fb6103b0565b6040518082815260200191505060405180910390f35b61017d6004803603606081101561012757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506103ba565b604051808215151515815260200191505060405180910390f35b6101e3600480360360408110156101ad57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061046b565b604051808215151515815260200191505060405180910390f35b61023f6004803603602081101561021357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610510565b6040518082815260200191505060405180910390f35b6102a16004803603604081101561026b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610558565b604051808215151515815260200191505060405180910390f35b610307600480360360408110156102d157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105fd565b604051808215151515815260200191505060405180910390f35b6103836004803603604081101561033757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610614565b6040518082815260200191505060405180910390f35b60006103a633848461069b565b6001905092915050565b6000600254905090565b60006103c7848484610892565b610460843361045b85600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b2e90919063ffffffff16565b61069b565b600190509392505050565b6000610506338461050185600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bb790919063ffffffff16565b61069b565b6001905092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006105f333846105ee85600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b2e90919063ffffffff16565b61069b565b6001905092915050565b600061060a338484610892565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610721576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180610caa6024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156107a7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610c636022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610918576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180610c856025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561099e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610c406023913960400191505060405180910390fd5b6109ef816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b2e90919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a82816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610bb790919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600082821115610ba6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b600082840390508091505092915050565b600080828401905083811015610c35576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b809150509291505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373a265627a7a723058202de6bec7aaabf8bd5a534f4c261581bcb31e04c363def652e91f044cacbd974f64736f6c634300050a0032";var ERC20 = {abi:abi$5,evm:evm$5,"interface":[{constant:false,inputs:[{name:"spender",type:"address"},{name:"value",type:"uint256"}],name:"approve",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{name:"sender",type:"address"},{name:"recipient",type:"address"},{name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"spender",type:"address"},{name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"account",type:"address"}],name:"balanceOf",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{name:"spender",type:"address"},{name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"recipient",type:"address"},{name:"amount",type:"uint256"}],name:"transfer",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"owner",type:"address"},{name:"spender",type:"address"}],name:"allowance",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{anonymous:false,inputs:[{indexed:true,name:"from",type:"address"},{indexed:true,name:"to",type:"address"},{indexed:false,name:"value",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:false,inputs:[{indexed:true,name:"owner",type:"address"},{indexed:true,name:"spender",type:"address"},{indexed:false,name:"value",type:"uint256"}],name:"Approval",type:"event"}],bytecode:bytecode$5};

    class WithdrawERC20Commitment extends MultisigCommitment {
        constructor(multisigAddress, multisigOwners, to, value, tokenAddress) {
            super(multisigAddress, multisigOwners);
            this.multisigAddress = multisigAddress;
            this.multisigOwners = multisigOwners;
            this.to = to;
            this.value = value;
            this.tokenAddress = tokenAddress;
        }
        getTransactionDetails() {
            return {
                to: this.tokenAddress,
                value: 0,
                data: new utils.Interface(ERC20.abi).functions.transfer.encode([
                    this.to,
                    this.value
                ]),
                operation: MultisigOperation.Call
            };
        }
    }

    class WithdrawETHCommitment extends MultisigCommitment {
        constructor(multisigAddress, multisigOwners, to, value) {
            super(multisigAddress, multisigOwners);
            this.multisigAddress = multisigAddress;
            this.multisigOwners = multisigOwners;
            this.to = to;
            this.value = value;
        }
        getTransactionDetails() {
            return {
                to: this.to,
                value: utils.bigNumberify(this.value),
                data: "0x",
                operation: MultisigOperation.Call
            };
        }
    }

    const UNASSIGNED_SEQ_NO = -1;

    function assertIsValidSignature(expectedSigner, commitment, signature) {
        if (commitment === undefined) {
            throw new Error("assertIsValidSignature received an undefined commitment");
        }
        if (signature === undefined) {
            throw new Error("assertIsValidSignature received an undefined signature");
        }
        const signer = utils.recoverAddress(commitment.hashToSign(), signature);
        if (utils.getAddress(expectedSigner) !== signer) {
            throw new Error(`Validating a signature with expected signer ${expectedSigner} but recovered ${signer} for commitment hash ${commitment.hashToSign()}.`);
        }
    }

    const INSTALL_PROTOCOL = {
        0: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const { stateChannelsMap, message: { params, protocolExecutionID }, network } = context;
                const { responderXpub, multisigAddress, outcomeType } = params;
                const preProtocolStateChannel = stateChannelsMap.get(multisigAddress);
                const postProtocolStateChannel = computeStateChannelTransition(preProtocolStateChannel, params);
                const newAppInstance = postProtocolStateChannel.mostRecentlyInstalledAppInstance();
                const conditionalTransactionData = constructConditionalTransactionData(network, outcomeType, postProtocolStateChannel);
                const mySignatureOnConditionalTransaction = yield yield __await([
                    Opcode.OP_SIGN,
                    conditionalTransactionData
                ]);
                const { signature: counterpartySignatureOnConditionalTransaction, signature2: counterpartySignatureOnFreeBalanceStateUpdate } = yield yield __await([
                    Opcode.IO_SEND_AND_WAIT,
                    {
                        protocolExecutionID,
                        params,
                        protocol: Protocol.Install,
                        toXpub: responderXpub,
                        signature: mySignatureOnConditionalTransaction,
                        seq: 1
                    }
                ]);
                assertIsValidSignature(preProtocolStateChannel.getFreeBalanceAddrOf(responderXpub), conditionalTransactionData, counterpartySignatureOnConditionalTransaction);
                const signedConditionalTransaction = conditionalTransactionData.getSignedTransaction([
                    mySignatureOnConditionalTransaction,
                    counterpartySignatureOnConditionalTransaction
                ]);
                context.stateChannelsMap.set(postProtocolStateChannel.multisigAddress, postProtocolStateChannel);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Install,
                    signedConditionalTransaction,
                    newAppInstance.identityHash
                ]);
                const freeBalanceUpdateData = new SetStateCommitment(network, postProtocolStateChannel.freeBalance.identity, postProtocolStateChannel.freeBalance.hashOfLatestState, postProtocolStateChannel.freeBalance.versionNumber, postProtocolStateChannel.freeBalance.timeout);
                assertIsValidSignature(preProtocolStateChannel.getFreeBalanceAddrOf(responderXpub), freeBalanceUpdateData, counterpartySignatureOnFreeBalanceStateUpdate);
                const mySignatureOnFreeBalanceStateUpdate = yield yield __await([
                    Opcode.OP_SIGN,
                    freeBalanceUpdateData
                ]);
                const signedFreeBalanceStateUpdate = freeBalanceUpdateData.getSignedTransaction([
                    mySignatureOnFreeBalanceStateUpdate,
                    counterpartySignatureOnFreeBalanceStateUpdate
                ]);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Update,
                    signedFreeBalanceStateUpdate,
                    postProtocolStateChannel.freeBalance.identityHash
                ]);
                yield yield __await([
                    Opcode.IO_SEND,
                    {
                        protocolExecutionID,
                        protocol: Protocol.Install,
                        toXpub: responderXpub,
                        signature: mySignatureOnFreeBalanceStateUpdate,
                        seq: UNASSIGNED_SEQ_NO
                    }
                ]);
            });
        },
        1: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const { stateChannelsMap, message: { params, protocolExecutionID, signature }, network } = context;
                const counterpartySignatureOnConditionalTransaction = signature;
                const { initiatorXpub, multisigAddress, outcomeType } = params;
                const preProtocolStateChannel = stateChannelsMap.get(multisigAddress);
                const postProtocolStateChannel = computeStateChannelTransition(preProtocolStateChannel, params);
                const newAppInstance = postProtocolStateChannel.mostRecentlyInstalledAppInstance();
                const conditionalTransactionData = constructConditionalTransactionData(network, outcomeType, postProtocolStateChannel);
                assertIsValidSignature(preProtocolStateChannel.getFreeBalanceAddrOf(initiatorXpub), conditionalTransactionData, counterpartySignatureOnConditionalTransaction);
                const mySignatureOnConditionalTransaction = yield yield __await([
                    Opcode.OP_SIGN,
                    conditionalTransactionData
                ]);
                const signedConditionalTransaction = conditionalTransactionData.getSignedTransaction([
                    mySignatureOnConditionalTransaction,
                    counterpartySignatureOnConditionalTransaction
                ]);
                context.stateChannelsMap.set(postProtocolStateChannel.multisigAddress, postProtocolStateChannel);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Install,
                    signedConditionalTransaction,
                    newAppInstance.identityHash
                ]);
                const freeBalanceUpdateData = new SetStateCommitment(network, postProtocolStateChannel.freeBalance.identity, postProtocolStateChannel.freeBalance.hashOfLatestState, postProtocolStateChannel.freeBalance.versionNumber, postProtocolStateChannel.freeBalance.timeout);
                const mySignatureOnFreeBalanceStateUpdate = yield yield __await([
                    Opcode.OP_SIGN,
                    freeBalanceUpdateData
                ]);
                const { signature: counterpartySignatureOnFreeBalanceStateUpdate } = yield yield __await([
                    Opcode.IO_SEND_AND_WAIT,
                    {
                        protocolExecutionID,
                        protocol: Protocol.Install,
                        toXpub: initiatorXpub,
                        signature: mySignatureOnConditionalTransaction,
                        signature2: mySignatureOnFreeBalanceStateUpdate,
                        seq: UNASSIGNED_SEQ_NO
                    }
                ]);
                assertIsValidSignature(preProtocolStateChannel.getFreeBalanceAddrOf(initiatorXpub), freeBalanceUpdateData, counterpartySignatureOnFreeBalanceStateUpdate);
                const signedFreeBalanceStateUpdate = freeBalanceUpdateData.getSignedTransaction([
                    mySignatureOnFreeBalanceStateUpdate,
                    counterpartySignatureOnFreeBalanceStateUpdate
                ]);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Update,
                    signedFreeBalanceStateUpdate,
                    postProtocolStateChannel.freeBalance.identityHash
                ]);
            });
        }
    };
    function computeStateChannelTransition(stateChannel, params) {
        const { initiatorBalanceDecrement, responderBalanceDecrement, initiatorDepositTokenAddress, responderDepositTokenAddress, initiatorXpub, responderXpub, participants, initialState, appInterface, defaultTimeout, multisigAddress, outcomeType } = params;
        const initiatorFbAddress = stateChannel.getFreeBalanceAddrOf(initiatorXpub);
        const responderFbAddress = stateChannel.getFreeBalanceAddrOf(responderXpub);
        const { coinTransferInterpreterParams, twoPartyOutcomeInterpreterParams } = computeInterpreterParameters(outcomeType, initiatorDepositTokenAddress, responderDepositTokenAddress, initiatorBalanceDecrement, responderBalanceDecrement, initiatorFbAddress, responderFbAddress);
        const appInstanceToBeInstalled = new AppInstance(multisigAddress, participants, defaultTimeout, appInterface, false, stateChannel.numInstalledApps, initialState, 0, defaultTimeout, outcomeType, twoPartyOutcomeInterpreterParams, coinTransferInterpreterParams);
        let tokenIndexedBalanceDecrement;
        if (initiatorDepositTokenAddress !== responderDepositTokenAddress) {
            tokenIndexedBalanceDecrement = {
                [initiatorDepositTokenAddress]: {
                    [initiatorFbAddress]: initiatorBalanceDecrement
                },
                [responderDepositTokenAddress]: {
                    [responderFbAddress]: responderBalanceDecrement
                }
            };
        }
        else {
            tokenIndexedBalanceDecrement = {
                [initiatorDepositTokenAddress]: {
                    [initiatorFbAddress]: initiatorBalanceDecrement,
                    [responderFbAddress]: responderBalanceDecrement
                }
            };
        }
        return stateChannel.installApp(appInstanceToBeInstalled, tokenIndexedBalanceDecrement);
    }
    function computeInterpreterParameters(outcomeType, initiatorDepositTokenAddress, responderDepositTokenAddress, initiatorBalanceDecrement, responderBalanceDecrement, initiatorFbAddress, responderFbAddress) {
        switch (outcomeType) {
            case OutcomeType.REFUND_OUTCOME_TYPE: {
                const limit = [];
                const tokenAddresses = [];
                if (responderDepositTokenAddress === undefined) {
                    limit.push(initiatorBalanceDecrement);
                    tokenAddresses.push(initiatorDepositTokenAddress);
                }
                else if (initiatorDepositTokenAddress === responderDepositTokenAddress) {
                    limit.push(initiatorBalanceDecrement.add(responderBalanceDecrement));
                    tokenAddresses.push(initiatorDepositTokenAddress);
                }
                else {
                    tokenAddresses.push(initiatorDepositTokenAddress);
                    limit.push(initiatorBalanceDecrement);
                    tokenAddresses.push(responderDepositTokenAddress);
                    limit.push(responderBalanceDecrement);
                }
                return {
                    twoPartyOutcomeInterpreterParams: undefined,
                    coinTransferInterpreterParams: {
                        limit,
                        tokenAddresses
                    }
                };
            }
            case OutcomeType.TWO_PARTY_FIXED_OUTCOME: {
                const tokenAddress = initiatorDepositTokenAddress;
                if (initiatorDepositTokenAddress !== responderDepositTokenAddress) {
                    throw new Error(TWO_PARTY_OUTCOME_DIFFERENT_ASSETS(initiatorDepositTokenAddress, responderDepositTokenAddress));
                }
                return {
                    coinTransferInterpreterParams: undefined,
                    twoPartyOutcomeInterpreterParams: {
                        tokenAddress,
                        playerAddrs: [initiatorFbAddress, responderFbAddress],
                        amount: utils.bigNumberify(initiatorBalanceDecrement).add(responderBalanceDecrement)
                    }
                };
            }
            default: {
                throw new Error("The outcome type in this application logic contract is not supported yet.");
            }
        }
    }
    function constructConditionalTransactionData(network, outcomeType, stateChannel) {
        const appInstance = stateChannel.mostRecentlyInstalledAppInstance();
        let interpreterAddress;
        let interpreterParams;
        switch (outcomeType) {
            case OutcomeType.REFUND_OUTCOME_TYPE: {
                interpreterAddress = network.CoinTransferInterpreter;
                interpreterParams = utils.defaultAbiCoder.encode([coinTransferInterpreterParamsStateEncoding], [appInstance.coinTransferInterpreterParams]);
                break;
            }
            case OutcomeType.TWO_PARTY_FIXED_OUTCOME: {
                interpreterAddress = network.TwoPartyFixedOutcomeInterpreter;
                interpreterParams = utils.defaultAbiCoder.encode(["tuple(address[2] playerAddrs, uint256 amount, address tokenAddress)"], [appInstance.twoPartyOutcomeInterpreterParams]);
                break;
            }
            default: {
                throw new Error("The outcome type in this application logic contract is not supported yet.");
            }
        }
        return new ConditionalTransaction(network, stateChannel.multisigAddress, stateChannel.multisigOwners, appInstance.identityHash, stateChannel.freeBalance.identityHash, interpreterAddress, interpreterParams);
    }

    const SINGLE_ASSET_TWO_PARTY_INTERMEDIARY_AGREEMENT_ENCODING = `
  tuple(
    uint256 capitalProvided,
    uint256 expiryBlock,
    address[2] beneficiaries,
    address tokenAddress
  )
`;
    const encodeTwoPartyFixedOutcomeFromVirtualAppInterpreterParams = params => utils.defaultAbiCoder.encode([SINGLE_ASSET_TWO_PARTY_INTERMEDIARY_AGREEMENT_ENCODING], [params]);
    const protocol = Protocol.InstallVirtualApp;
    const { OP_SIGN, WRITE_COMMITMENT, IO_SEND, IO_SEND_AND_WAIT } = Opcode;
    const INSTALL_VIRTUAL_APP_PROTOCOL = {
        0: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const { message: { params, protocolExecutionID }, stateChannelsMap, network, provider } = context;
                const { intermediaryXpub, responderXpub } = params;
                const [stateChannelWithInitiatingAndIntermediary, stateChannelWithResponding, stateChannelWithIntermediary, virtualAppInstance, timeLockedPassThroughAppInstance] = yield __await(getUpdatedStateChannelAndVirtualAppObjectsForInitiating(params, stateChannelsMap, network, provider));
                const intermediaryAddress = stateChannelWithIntermediary.getMultisigOwnerAddrOf(intermediaryXpub);
                const responderAddress = stateChannelWithResponding.getMultisigOwnerAddrOf(responderXpub);
                const presignedMultisigTxForAliceIngridVirtualAppAgreement = new ConditionalTransaction(network, stateChannelWithIntermediary.multisigAddress, stateChannelWithIntermediary.multisigOwners, timeLockedPassThroughAppInstance.identityHash, stateChannelWithIntermediary.freeBalance.identityHash, network.TwoPartyFixedOutcomeFromVirtualAppInterpreter, encodeTwoPartyFixedOutcomeFromVirtualAppInterpreterParams(stateChannelWithIntermediary.getSingleAssetTwoPartyIntermediaryAgreementFromVirtualApp(virtualAppInstance.identityHash)));
                const initiatorSignatureOnAliceIngridVirtualAppAgreement = yield yield __await([
                    OP_SIGN,
                    presignedMultisigTxForAliceIngridVirtualAppAgreement
                ]);
                const m1 = {
                    params,
                    protocol,
                    protocolExecutionID,
                    toXpub: intermediaryXpub,
                    seq: 1,
                    signature: initiatorSignatureOnAliceIngridVirtualAppAgreement,
                    signature2: virtualAppInstance.identityHash,
                    signature3: timeLockedPassThroughAppInstance.state["defaultOutcome"]
                };
                const m4 = yield yield __await([IO_SEND_AND_WAIT, m1]);
                const { signature: intermediarySignatureOnAliceIngridVirtualAppAgreement, signature2: intermediarySignatureOnAliceIngridFreeBalanceAppActivation } = m4;
                assertIsValidSignature(intermediaryAddress, presignedMultisigTxForAliceIngridVirtualAppAgreement, intermediarySignatureOnAliceIngridVirtualAppAgreement);
                yield yield __await([
                    WRITE_COMMITMENT,
                    Protocol.InstallVirtualApp,
                    presignedMultisigTxForAliceIngridVirtualAppAgreement.getSignedTransaction([
                        initiatorSignatureOnAliceIngridVirtualAppAgreement,
                        intermediarySignatureOnAliceIngridVirtualAppAgreement
                    ]),
                    virtualAppInstance.identityHash
                ]);
                const freeBalanceAliceIngridVirtualAppAgreementActivationCommitment = new SetStateCommitment(network, stateChannelWithIntermediary.freeBalance.identity, stateChannelWithIntermediary.freeBalance.hashOfLatestState, stateChannelWithIntermediary.freeBalance.versionNumber, stateChannelWithIntermediary.freeBalance.timeout);
                assertIsValidSignature(intermediaryAddress, freeBalanceAliceIngridVirtualAppAgreementActivationCommitment, intermediarySignatureOnAliceIngridFreeBalanceAppActivation);
                const initiatorSignatureOnAliceIngridFreeBalanceAppActivation = yield yield __await([
                    OP_SIGN,
                    freeBalanceAliceIngridVirtualAppAgreementActivationCommitment
                ]);
                yield yield __await([
                    WRITE_COMMITMENT,
                    Protocol.Update,
                    freeBalanceAliceIngridVirtualAppAgreementActivationCommitment.getSignedTransaction([
                        initiatorSignatureOnAliceIngridFreeBalanceAppActivation,
                        intermediarySignatureOnAliceIngridFreeBalanceAppActivation
                    ]),
                    stateChannelWithIntermediary.freeBalance.identityHash
                ]);
                const virtualAppSetStateCommitment = new SetStateCommitment(network, virtualAppInstance.identity, virtualAppInstance.hashOfLatestState, virtualAppInstance.versionNumber, virtualAppInstance.defaultTimeout);
                const timeLockedPassThroughSetStateCommitment = new SetStateCommitment(network, timeLockedPassThroughAppInstance.identity, timeLockedPassThroughAppInstance.hashOfLatestState, timeLockedPassThroughAppInstance.versionNumber, timeLockedPassThroughAppInstance.defaultTimeout);
                const initiatorSignatureOnTimeLockedPassThroughSetStateCommitment = yield yield __await([
                    OP_SIGN,
                    timeLockedPassThroughSetStateCommitment
                ]);
                const initiatorSignatureOnVirtualAppSetStateCommitment = yield yield __await([
                    OP_SIGN,
                    virtualAppSetStateCommitment
                ]);
                const m5 = {
                    protocol,
                    protocolExecutionID,
                    toXpub: intermediaryXpub,
                    seq: UNASSIGNED_SEQ_NO,
                    signature: initiatorSignatureOnAliceIngridFreeBalanceAppActivation,
                    signature2: initiatorSignatureOnTimeLockedPassThroughSetStateCommitment,
                    signature3: initiatorSignatureOnVirtualAppSetStateCommitment
                };
                const m8 = yield yield __await([IO_SEND_AND_WAIT, m5]);
                const { signature: intermediarySignatureOnTimeLockedPassThroughSetStateCommitment, signature2: responderSignatureOnTimeLockedPassThroughSetStateCommitment, signature3: responderSignatureOnVirtualAppSetStateCommitment } = m8;
                assertIsValidSignature(intermediaryAddress, timeLockedPassThroughSetStateCommitment, intermediarySignatureOnTimeLockedPassThroughSetStateCommitment);
                assertIsValidSignature(responderAddress, timeLockedPassThroughSetStateCommitment, responderSignatureOnTimeLockedPassThroughSetStateCommitment);
                assertIsValidSignature(responderAddress, virtualAppSetStateCommitment, responderSignatureOnVirtualAppSetStateCommitment);
                yield yield __await([
                    WRITE_COMMITMENT,
                    Protocol.Update,
                    timeLockedPassThroughSetStateCommitment.getSignedTransaction([
                        initiatorSignatureOnTimeLockedPassThroughSetStateCommitment,
                        responderSignatureOnTimeLockedPassThroughSetStateCommitment,
                        intermediarySignatureOnTimeLockedPassThroughSetStateCommitment
                    ]),
                    timeLockedPassThroughAppInstance.identityHash
                ]);
                yield yield __await([
                    WRITE_COMMITMENT,
                    Protocol.Update,
                    virtualAppSetStateCommitment.getSignedTransaction([
                        initiatorSignatureOnVirtualAppSetStateCommitment,
                        responderSignatureOnVirtualAppSetStateCommitment
                    ]),
                    virtualAppInstance.identityHash
                ]);
                context.stateChannelsMap.set(stateChannelWithIntermediary.multisigAddress, stateChannelWithIntermediary);
                context.stateChannelsMap.set(stateChannelWithResponding.multisigAddress, stateChannelWithResponding);
                context.stateChannelsMap.set(stateChannelWithInitiatingAndIntermediary.multisigAddress, stateChannelWithInitiatingAndIntermediary);
            });
        },
        1: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const { message: m1, stateChannelsMap, network } = context;
                const { params, protocolExecutionID, signature: initiatorSignatureOnAliceIngridVirtualAppAgreement, signature2: virtualAppInstanceIdentityHash, signature3: virtualAppInstanceDefaultOutcome } = m1;
                const { initiatorXpub, responderXpub } = params;
                const [stateChannelBetweenVirtualAppUsers, stateChannelWithInitiating, stateChannelWithResponding, timeLockedPassThroughAppInstance] = yield __await(getUpdatedStateChannelAndVirtualAppObjectsForIntermediary(params, stateChannelsMap, virtualAppInstanceIdentityHash, virtualAppInstanceDefaultOutcome, network));
                const initiatorAddress = stateChannelWithInitiating.getMultisigOwnerAddrOf(initiatorXpub);
                const responderAddress = stateChannelWithResponding.getMultisigOwnerAddrOf(responderXpub);
                const presignedMultisigTxForAliceIngridVirtualAppAgreement = new ConditionalTransaction(network, stateChannelWithInitiating.multisigAddress, stateChannelWithInitiating.multisigOwners, timeLockedPassThroughAppInstance.identityHash, stateChannelWithInitiating.freeBalance.identityHash, network.TwoPartyFixedOutcomeFromVirtualAppInterpreter, encodeTwoPartyFixedOutcomeFromVirtualAppInterpreterParams(stateChannelWithInitiating.getSingleAssetTwoPartyIntermediaryAgreementFromVirtualApp(timeLockedPassThroughAppInstance.state["targetAppIdentityHash"])));
                assertIsValidSignature(initiatorAddress, presignedMultisigTxForAliceIngridVirtualAppAgreement, initiatorSignatureOnAliceIngridVirtualAppAgreement);
                const presignedMultisigTxForIngridBobVirtualAppAgreement = new ConditionalTransaction(network, stateChannelWithResponding.multisigAddress, stateChannelWithResponding.multisigOwners, timeLockedPassThroughAppInstance.identityHash, stateChannelWithResponding.freeBalance.identityHash, network.TwoPartyFixedOutcomeFromVirtualAppInterpreter, encodeTwoPartyFixedOutcomeFromVirtualAppInterpreterParams(stateChannelWithResponding.getSingleAssetTwoPartyIntermediaryAgreementFromVirtualApp(timeLockedPassThroughAppInstance.state["targetAppIdentityHash"])));
                const intermediarySignatureOnIngridBobVirtualAppAgreement = yield yield __await([
                    OP_SIGN,
                    presignedMultisigTxForIngridBobVirtualAppAgreement
                ]);
                const m2 = {
                    params,
                    protocol,
                    protocolExecutionID,
                    seq: 2,
                    toXpub: responderXpub,
                    signature: intermediarySignatureOnIngridBobVirtualAppAgreement
                };
                const m3 = yield yield __await([IO_SEND_AND_WAIT, m2]);
                const { signature: responderSignatureOnIngridBobVirtualAppAgreement, signature2: responderSignatureOnIngridBobFreeBalanceAppActivation } = m3;
                assertIsValidSignature(responderAddress, presignedMultisigTxForIngridBobVirtualAppAgreement, responderSignatureOnIngridBobVirtualAppAgreement);
                const freeBalanceIngridBobVirtualAppAgreementActivationCommitment = new SetStateCommitment(network, stateChannelWithResponding.freeBalance.identity, stateChannelWithResponding.freeBalance.hashOfLatestState, stateChannelWithResponding.freeBalance.versionNumber, stateChannelWithResponding.freeBalance.timeout);
                assertIsValidSignature(responderAddress, freeBalanceIngridBobVirtualAppAgreementActivationCommitment, responderSignatureOnIngridBobFreeBalanceAppActivation);
                const freeBalanceAliceIngridVirtualAppAgreementActivationCommitment = new SetStateCommitment(network, stateChannelWithInitiating.freeBalance.identity, stateChannelWithInitiating.freeBalance.hashOfLatestState, stateChannelWithInitiating.freeBalance.versionNumber, stateChannelWithInitiating.freeBalance.timeout);
                const intermediarySignatureOnAliceIngridFreeBalanceAppActivation = yield yield __await([
                    OP_SIGN,
                    freeBalanceAliceIngridVirtualAppAgreementActivationCommitment
                ]);
                const intermediarySignatureOnAliceIngridVirtualAppAgreement = yield yield __await([
                    OP_SIGN,
                    presignedMultisigTxForAliceIngridVirtualAppAgreement
                ]);
                yield yield __await([
                    WRITE_COMMITMENT,
                    Protocol.InstallVirtualApp,
                    presignedMultisigTxForAliceIngridVirtualAppAgreement.getSignedTransaction([
                        initiatorSignatureOnAliceIngridVirtualAppAgreement,
                        intermediarySignatureOnAliceIngridVirtualAppAgreement
                    ]),
                    timeLockedPassThroughAppInstance.identityHash
                ]);
                const m4 = {
                    protocol,
                    protocolExecutionID,
                    seq: UNASSIGNED_SEQ_NO,
                    toXpub: initiatorXpub,
                    signature: intermediarySignatureOnAliceIngridVirtualAppAgreement,
                    signature2: intermediarySignatureOnAliceIngridFreeBalanceAppActivation
                };
                const m5 = yield yield __await([IO_SEND_AND_WAIT, m4]);
                const { signature: initiatorSignatureOnAliceIngridFreeBalanceAppActivation, signature2: initiatorSignatureOnTimeLockedPassThroughSetStateCommitment, signature3: initiatorSignatureOnVirtualAppSetStateCommitment } = m5;
                assertIsValidSignature(initiatorAddress, freeBalanceAliceIngridVirtualAppAgreementActivationCommitment, initiatorSignatureOnAliceIngridFreeBalanceAppActivation);
                yield yield __await([
                    WRITE_COMMITMENT,
                    Protocol.Update,
                    freeBalanceIngridBobVirtualAppAgreementActivationCommitment.getSignedTransaction([
                        initiatorSignatureOnAliceIngridFreeBalanceAppActivation,
                        intermediarySignatureOnAliceIngridFreeBalanceAppActivation
                    ]),
                    stateChannelWithResponding.freeBalance.identityHash
                ]);
                const timeLockedPassThroughSetStateCommitment = new SetStateCommitment(network, timeLockedPassThroughAppInstance.identity, timeLockedPassThroughAppInstance.hashOfLatestState, timeLockedPassThroughAppInstance.versionNumber, timeLockedPassThroughAppInstance.defaultTimeout);
                assertIsValidSignature(initiatorAddress, timeLockedPassThroughSetStateCommitment, initiatorSignatureOnTimeLockedPassThroughSetStateCommitment);
                const intermediarySignatureOnIngridBobFreeBalanceAppActivation = yield yield __await([
                    OP_SIGN,
                    freeBalanceIngridBobVirtualAppAgreementActivationCommitment
                ]);
                yield yield __await([
                    WRITE_COMMITMENT,
                    Protocol.Update,
                    freeBalanceIngridBobVirtualAppAgreementActivationCommitment.getSignedTransaction([
                        responderSignatureOnIngridBobFreeBalanceAppActivation,
                        intermediarySignatureOnIngridBobFreeBalanceAppActivation
                    ]),
                    stateChannelWithResponding.freeBalance.identityHash
                ]);
                const intermediarySignatureOnTimeLockedPassThroughSetStateCommitment = yield yield __await([
                    OP_SIGN,
                    timeLockedPassThroughSetStateCommitment
                ]);
                const m6 = {
                    protocol,
                    protocolExecutionID,
                    toXpub: responderXpub,
                    seq: UNASSIGNED_SEQ_NO,
                    signature: intermediarySignatureOnIngridBobFreeBalanceAppActivation,
                    signature2: intermediarySignatureOnTimeLockedPassThroughSetStateCommitment,
                    signature3: initiatorSignatureOnTimeLockedPassThroughSetStateCommitment,
                    signature4: initiatorSignatureOnVirtualAppSetStateCommitment
                };
                const m7 = yield yield __await([IO_SEND_AND_WAIT, m6]);
                const { signature: responderSignatureOnTimeLockedPassThroughSetStateCommitment, signature2: responderSignatureOnVirtualAppSetStateCommitment } = m7;
                assertIsValidSignature(responderAddress, timeLockedPassThroughSetStateCommitment, responderSignatureOnTimeLockedPassThroughSetStateCommitment);
                yield yield __await([
                    WRITE_COMMITMENT,
                    Protocol.Update,
                    timeLockedPassThroughSetStateCommitment.getSignedTransaction([
                        initiatorSignatureOnTimeLockedPassThroughSetStateCommitment,
                        responderSignatureOnTimeLockedPassThroughSetStateCommitment,
                        intermediarySignatureOnTimeLockedPassThroughSetStateCommitment
                    ]),
                    timeLockedPassThroughAppInstance.identityHash
                ]);
                const m8 = {
                    protocol,
                    protocolExecutionID,
                    toXpub: initiatorXpub,
                    seq: UNASSIGNED_SEQ_NO,
                    signature: intermediarySignatureOnTimeLockedPassThroughSetStateCommitment,
                    signature2: responderSignatureOnTimeLockedPassThroughSetStateCommitment,
                    signature3: responderSignatureOnVirtualAppSetStateCommitment
                };
                yield yield __await([IO_SEND, m8]);
                context.stateChannelsMap.set(stateChannelBetweenVirtualAppUsers.multisigAddress, stateChannelBetweenVirtualAppUsers);
                context.stateChannelsMap.set(stateChannelWithInitiating.multisigAddress, stateChannelWithInitiating);
                context.stateChannelsMap.set(stateChannelWithResponding.multisigAddress, stateChannelWithResponding);
            });
        },
        2: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const { message: m2, stateChannelsMap, network, provider } = context;
                const { params, protocolExecutionID, signature: intermediarySignatureOnIngridBobVirtualAppAgreement } = m2;
                const { intermediaryXpub, initiatorXpub } = params;
                const [stateChannelWithRespondingAndIntermediary, stateChannelWithInitiating, stateChannelWithIntermediary, virtualAppInstance, timeLockedPassThroughAppInstance] = yield __await(getUpdatedStateChannelAndVirtualAppObjectsForResponding(params, stateChannelsMap, network, provider));
                const intermediaryAddress = stateChannelWithIntermediary.getMultisigOwnerAddrOf(intermediaryXpub);
                const initiatorAddress = stateChannelWithInitiating.getMultisigOwnerAddrOf(initiatorXpub);
                const presignedMultisigTxForIngridBobVirtualAppAgreement = new ConditionalTransaction(network, stateChannelWithIntermediary.multisigAddress, stateChannelWithIntermediary.multisigOwners, timeLockedPassThroughAppInstance.identityHash, stateChannelWithIntermediary.freeBalance.identityHash, network.TwoPartyFixedOutcomeFromVirtualAppInterpreter, encodeTwoPartyFixedOutcomeFromVirtualAppInterpreterParams(stateChannelWithIntermediary.getSingleAssetTwoPartyIntermediaryAgreementFromVirtualApp(virtualAppInstance.identityHash)));
                assertIsValidSignature(intermediaryAddress, presignedMultisigTxForIngridBobVirtualAppAgreement, intermediarySignatureOnIngridBobVirtualAppAgreement);
                const responderSignatureOnIngridBobVirtualAppAgreement = yield yield __await([
                    OP_SIGN,
                    presignedMultisigTxForIngridBobVirtualAppAgreement
                ]);
                yield yield __await([
                    WRITE_COMMITMENT,
                    Protocol.InstallVirtualApp,
                    presignedMultisigTxForIngridBobVirtualAppAgreement.getSignedTransaction([
                        responderSignatureOnIngridBobVirtualAppAgreement,
                        intermediarySignatureOnIngridBobVirtualAppAgreement
                    ]),
                    virtualAppInstance.identityHash
                ]);
                const freeBalanceIngridBobVirtualAppAgreementActivationCommitment = new SetStateCommitment(network, stateChannelWithIntermediary.freeBalance.identity, stateChannelWithIntermediary.freeBalance.hashOfLatestState, stateChannelWithIntermediary.freeBalance.versionNumber, stateChannelWithIntermediary.freeBalance.timeout);
                const responderSignatureOnIngridBobFreeBalanceAppActivation = yield yield __await([
                    OP_SIGN,
                    freeBalanceIngridBobVirtualAppAgreementActivationCommitment
                ]);
                const m3 = {
                    protocol,
                    protocolExecutionID,
                    toXpub: intermediaryXpub,
                    seq: UNASSIGNED_SEQ_NO,
                    signature: responderSignatureOnIngridBobVirtualAppAgreement,
                    signature2: responderSignatureOnIngridBobFreeBalanceAppActivation
                };
                const m6 = yield yield __await([IO_SEND_AND_WAIT, m3]);
                const { signature: intermediarySignatureOnIngridBobFreeBalanceAppActivation, signature2: intermediarySignatureOnTimeLockedPassThroughSetStateCommitment, signature3: initiatorSignatureOnTimeLockedPassThroughSetStateCommitment, signature4: initiatorSignatureOnVirtualAppSetStateCommitment } = m6;
                assertIsValidSignature(intermediaryAddress, freeBalanceIngridBobVirtualAppAgreementActivationCommitment, intermediarySignatureOnIngridBobFreeBalanceAppActivation);
                yield yield __await([
                    WRITE_COMMITMENT,
                    Protocol.Update,
                    freeBalanceIngridBobVirtualAppAgreementActivationCommitment.getSignedTransaction([
                        intermediarySignatureOnIngridBobFreeBalanceAppActivation,
                        responderSignatureOnIngridBobFreeBalanceAppActivation
                    ]),
                    stateChannelWithIntermediary.freeBalance.identityHash
                ]);
                const virtualAppSetStateCommitment = new SetStateCommitment(network, virtualAppInstance.identity, virtualAppInstance.hashOfLatestState, virtualAppInstance.versionNumber, virtualAppInstance.defaultTimeout);
                const timeLockedPassThroughSetStateCommitment = new SetStateCommitment(network, timeLockedPassThroughAppInstance.identity, timeLockedPassThroughAppInstance.hashOfLatestState, timeLockedPassThroughAppInstance.versionNumber, timeLockedPassThroughAppInstance.defaultTimeout);
                assertIsValidSignature(intermediaryAddress, timeLockedPassThroughSetStateCommitment, intermediarySignatureOnTimeLockedPassThroughSetStateCommitment);
                assertIsValidSignature(initiatorAddress, timeLockedPassThroughSetStateCommitment, initiatorSignatureOnTimeLockedPassThroughSetStateCommitment);
                assertIsValidSignature(initiatorAddress, virtualAppSetStateCommitment, initiatorSignatureOnVirtualAppSetStateCommitment);
                const responderSignatureOnTimeLockedPassThroughSetStateCommitment = yield yield __await([
                    OP_SIGN,
                    timeLockedPassThroughSetStateCommitment
                ]);
                const responderSignatureOnVirtualAppSetStateCommitment = yield yield __await([
                    OP_SIGN,
                    virtualAppSetStateCommitment
                ]);
                yield yield __await([
                    WRITE_COMMITMENT,
                    Protocol.Update,
                    timeLockedPassThroughSetStateCommitment.getSignedTransaction([
                        initiatorSignatureOnTimeLockedPassThroughSetStateCommitment,
                        responderSignatureOnTimeLockedPassThroughSetStateCommitment,
                        intermediarySignatureOnTimeLockedPassThroughSetStateCommitment
                    ]),
                    timeLockedPassThroughAppInstance.identityHash
                ]);
                yield yield __await([
                    WRITE_COMMITMENT,
                    Protocol.Update,
                    virtualAppSetStateCommitment.getSignedTransaction([
                        initiatorSignatureOnVirtualAppSetStateCommitment,
                        responderSignatureOnVirtualAppSetStateCommitment
                    ]),
                    virtualAppInstance.identityHash
                ]);
                const m7 = {
                    protocol,
                    protocolExecutionID,
                    toXpub: intermediaryXpub,
                    seq: UNASSIGNED_SEQ_NO,
                    signature: responderSignatureOnTimeLockedPassThroughSetStateCommitment,
                    signature2: responderSignatureOnVirtualAppSetStateCommitment
                };
                yield yield __await([IO_SEND, m7]);
                context.stateChannelsMap.set(stateChannelWithIntermediary.multisigAddress, stateChannelWithIntermediary);
                context.stateChannelsMap.set(stateChannelWithInitiating.multisigAddress, stateChannelWithInitiating);
                context.stateChannelsMap.set(stateChannelWithRespondingAndIntermediary.multisigAddress, stateChannelWithRespondingAndIntermediary);
            });
        }
    };
    function constructVirtualAppInstance(stateChannelBetweenEndpoints, params) {
        const { initiatorXpub, responderXpub, defaultTimeout, appInterface, initialState } = params;
        const seqNo = stateChannelBetweenEndpoints.numInstalledApps;
        const initiatorAddress = xkeyKthAddress(initiatorXpub, seqNo);
        const responderAddress = xkeyKthAddress(responderXpub, seqNo);
        return new AppInstance(stateChannelBetweenEndpoints.multisigAddress, sortAddresses([initiatorAddress, responderAddress]), defaultTimeout, appInterface, true, seqNo, initialState, 0, defaultTimeout, OutcomeType.COIN_TRANSFER_DO_NOT_USE, undefined, undefined);
    }
    function constructTimeLockedPassThroughAppInstance(threePartyStateChannel, virtualAppInstanceIdentityHash, virtualAppDefaultOutcome, network, params) {
        const { intermediaryXpub, initiatorXpub, responderXpub, initiatorBalanceDecrement, responderBalanceDecrement, outcomeType } = params;
        const seqNo = threePartyStateChannel.numInstalledApps;
        const intermediaryAddress = xkeyKthAddress(intermediaryXpub, seqNo);
        const initiatorAddress = xkeyKthAddress(initiatorXpub, seqNo);
        const responderAddress = xkeyKthAddress(responderXpub, seqNo);
        const HARD_CODED_CHALLENGE_TIMEOUT = 100;
        return new AppInstance(constants.AddressZero, sortAddresses([initiatorAddress, responderAddress, intermediaryAddress]), HARD_CODED_CHALLENGE_TIMEOUT, {
            stateEncoding: `
        tuple(
          address challengeRegistryAddress,
          bytes32 targetAppIdentityHash,
          uint256 switchesOutcomeAt,
          bytes defaultOutcome
        )
      `,
            actionEncoding: undefined,
            addr: network.TimeLockedPassThrough
        }, true, seqNo, {
            challengeRegistryAddress: network.ChallengeRegistry,
            targetAppIdentityHash: virtualAppInstanceIdentityHash,
            switchesOutcomeAt: constants.Zero,
            defaultOutcome: virtualAppDefaultOutcome
        }, 0, HARD_CODED_CHALLENGE_TIMEOUT, outcomeType, {
            playerAddrs: [initiatorAddress, responderAddress],
            amount: utils.bigNumberify(initiatorBalanceDecrement).add(responderBalanceDecrement),
            tokenAddress: constants.AddressZero
        }, undefined);
    }
    function getOrCreateStateChannelWithUsers(stateChannelsMap, userXpubs, network) {
        const multisigAddress = getCreate2MultisigAddress(userXpubs, network.ProxyFactory, network.MinimumViableMultisig);
        return (stateChannelsMap.get(multisigAddress) ||
            StateChannel.createEmptyChannel(multisigAddress, userXpubs));
    }
    async function getUpdatedStateChannelAndVirtualAppObjectsForInitiating(params, stateChannelsMap, network, provider) {
        const { initiatorBalanceDecrement, responderBalanceDecrement, tokenAddress, initiatorXpub, intermediaryXpub, responderXpub } = params;
        const stateChannelWithAllThreeParties = getOrCreateStateChannelWithUsers(stateChannelsMap, [initiatorXpub, responderXpub, intermediaryXpub], network);
        const stateChannelWithResponding = getOrCreateStateChannelWithUsers(stateChannelsMap, [initiatorXpub, responderXpub], network);
        const virtualAppInstance = constructVirtualAppInstance(stateChannelWithResponding, params);
        const timeLockedPassThroughAppInstance = await constructTimeLockedPassThroughAppInstance(stateChannelWithAllThreeParties, virtualAppInstance.identityHash, await virtualAppInstance.computeOutcome(virtualAppInstance.state, provider), network, params);
        const initiatorAddress = xkeyKthAddress(initiatorXpub, 0);
        const intermediaryAddress = xkeyKthAddress(intermediaryXpub, 0);
        const stateChannelWithIntermediary = stateChannelsMap.get(getCreate2MultisigAddress([initiatorXpub, intermediaryXpub], network.ProxyFactory, network.MinimumViableMultisig));
        if (!stateChannelWithIntermediary) {
            throw new Error("Cannot run InstallVirtualAppProtocol without existing channel with intermediary");
        }
        const newStateChannelWithIntermediary = stateChannelWithIntermediary.addSingleAssetTwoPartyIntermediaryAgreement(virtualAppInstance.identityHash, {
            tokenAddress,
            timeLockedPassThroughIdentityHash: timeLockedPassThroughAppInstance.identityHash,
            expiryBlock: 100000000000,
            capitalProvided: utils.bigNumberify(initiatorBalanceDecrement).add(responderBalanceDecrement),
            beneficiaries: [initiatorAddress, intermediaryAddress]
        }, {
            [initiatorAddress]: initiatorBalanceDecrement,
            [intermediaryAddress]: responderBalanceDecrement
        }, tokenAddress);
        return [
            stateChannelWithAllThreeParties.addAppInstance(timeLockedPassThroughAppInstance),
            stateChannelWithResponding.addAppInstance(virtualAppInstance),
            newStateChannelWithIntermediary,
            virtualAppInstance,
            timeLockedPassThroughAppInstance
        ];
    }
    async function getUpdatedStateChannelAndVirtualAppObjectsForIntermediary(params, stateChannelsMap, virtualAppInstanceIdentityHash, virtualAppInstanceDefaultOutcome, network) {
        const { initiatorBalanceDecrement, responderBalanceDecrement, initiatorXpub, intermediaryXpub, responderXpub, tokenAddress } = params;
        const stateChannelWithAllThreeParties = getOrCreateStateChannelWithUsers(stateChannelsMap, [initiatorXpub, responderXpub, intermediaryXpub], network);
        const timeLockedPassThroughAppInstance = await constructTimeLockedPassThroughAppInstance(stateChannelWithAllThreeParties, virtualAppInstanceIdentityHash, virtualAppInstanceDefaultOutcome, network, params);
        const channelWithInitiating = stateChannelsMap.get(getCreate2MultisigAddress([initiatorXpub, intermediaryXpub], network.ProxyFactory, network.MinimumViableMultisig));
        if (!channelWithInitiating) {
            throw new Error("Cannot mediate InstallVirtualAppProtocol without mediation channel to initiator");
        }
        const channelWithResponding = stateChannelsMap.get(getCreate2MultisigAddress([responderXpub, intermediaryXpub], network.ProxyFactory, network.MinimumViableMultisig));
        if (!channelWithResponding) {
            throw new Error("Cannot mediate InstallVirtualAppProtocol without mediation channel to responder");
        }
        const initiatorAddress = xkeyKthAddress(initiatorXpub, 0);
        const intermediaryAddress = xkeyKthAddress(intermediaryXpub, 0);
        const responderAddress = xkeyKthAddress(responderXpub, 0);
        return [
            stateChannelWithAllThreeParties.addAppInstance(timeLockedPassThroughAppInstance),
            channelWithInitiating.addSingleAssetTwoPartyIntermediaryAgreement(virtualAppInstanceIdentityHash, {
                tokenAddress,
                timeLockedPassThroughIdentityHash: timeLockedPassThroughAppInstance.identityHash,
                expiryBlock: 100000000000,
                capitalProvided: utils.bigNumberify(initiatorBalanceDecrement).add(responderBalanceDecrement),
                beneficiaries: [initiatorAddress, intermediaryAddress]
            }, {
                [initiatorAddress]: initiatorBalanceDecrement,
                [intermediaryAddress]: responderBalanceDecrement
            }, tokenAddress),
            channelWithResponding.addSingleAssetTwoPartyIntermediaryAgreement(virtualAppInstanceIdentityHash, {
                tokenAddress,
                timeLockedPassThroughIdentityHash: timeLockedPassThroughAppInstance.identityHash,
                expiryBlock: 100000000000,
                capitalProvided: utils.bigNumberify(initiatorBalanceDecrement).add(responderBalanceDecrement),
                beneficiaries: [intermediaryAddress, responderAddress]
            }, {
                [intermediaryAddress]: initiatorBalanceDecrement,
                [responderAddress]: responderBalanceDecrement
            }, tokenAddress),
            timeLockedPassThroughAppInstance
        ];
    }
    async function getUpdatedStateChannelAndVirtualAppObjectsForResponding(params, stateChannelsMap, network, provider) {
        const { initiatorBalanceDecrement, responderBalanceDecrement, initiatorXpub, intermediaryXpub, responderXpub, tokenAddress } = params;
        const stateChannelWithAllThreeParties = getOrCreateStateChannelWithUsers(stateChannelsMap, [initiatorXpub, responderXpub, intermediaryXpub], network);
        const stateChannelWithInitiating = getOrCreateStateChannelWithUsers(stateChannelsMap, [initiatorXpub, responderXpub], network);
        const virtualAppInstance = constructVirtualAppInstance(stateChannelWithInitiating, params);
        const timeLockedPassThroughAppInstance = await constructTimeLockedPassThroughAppInstance(stateChannelWithAllThreeParties, virtualAppInstance.identityHash, await virtualAppInstance.computeOutcome(virtualAppInstance.state, provider), network, params);
        const stateChannelWithIntermediary = stateChannelsMap.get(getCreate2MultisigAddress([responderXpub, intermediaryXpub], network.ProxyFactory, network.MinimumViableMultisig));
        if (!stateChannelWithIntermediary) {
            throw new Error("Cannot run InstallVirtualAppProtocol without existing channel with intermediary");
        }
        const intermediaryAddress = xkeyKthAddress(intermediaryXpub, 0);
        const responderAddress = xkeyKthAddress(responderXpub, 0);
        return [
            stateChannelWithAllThreeParties.addAppInstance(timeLockedPassThroughAppInstance),
            stateChannelWithInitiating.addAppInstance(virtualAppInstance),
            stateChannelWithIntermediary.addSingleAssetTwoPartyIntermediaryAgreement(virtualAppInstance.identityHash, {
                tokenAddress,
                timeLockedPassThroughIdentityHash: timeLockedPassThroughAppInstance.identityHash,
                expiryBlock: 100000000000,
                capitalProvided: utils.bigNumberify(initiatorBalanceDecrement).add(responderBalanceDecrement),
                beneficiaries: [intermediaryAddress, responderAddress]
            }, {
                [intermediaryAddress]: initiatorBalanceDecrement,
                [responderAddress]: responderBalanceDecrement
            }, tokenAddress),
            virtualAppInstance,
            timeLockedPassThroughAppInstance
        ];
    }

    const SETUP_PROTOCOL = {
        0: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const { responderXpub, multisigAddress } = context.message
                    .params;
                const responderAddress = xkeyKthAddress(responderXpub, 0);
                const setupCommitment = proposeStateTransition(context.message.params, context);
                const mySig = yield yield __await([Opcode.OP_SIGN, setupCommitment]);
                const { signature: theirSig } = yield yield __await([
                    Opcode.IO_SEND_AND_WAIT,
                    {
                        protocol: Protocol.Setup,
                        protocolExecutionID: context.message.protocolExecutionID,
                        params: context.message.params,
                        toXpub: responderXpub,
                        signature: mySig,
                        seq: 1
                    }
                ]);
                assertIsValidSignature(responderAddress, setupCommitment, theirSig);
                const finalCommitment = setupCommitment.getSignedTransaction([
                    mySig,
                    theirSig
                ]);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Setup,
                    finalCommitment,
                    multisigAddress
                ]);
            });
        },
        1: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const { initiatorXpub, multisigAddress } = context.message
                    .params;
                const initiatorAddress = xkeyKthAddress(initiatorXpub, 0);
                const setupCommitment = proposeStateTransition(context.message.params, context);
                const theirSig = context.message.signature;
                assertIsValidSignature(initiatorAddress, setupCommitment, theirSig);
                const mySig = yield yield __await([Opcode.OP_SIGN, setupCommitment]);
                const finalCommitment = setupCommitment.getSignedTransaction([
                    mySig,
                    theirSig
                ]);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Setup,
                    finalCommitment,
                    multisigAddress
                ]);
                yield yield __await([
                    Opcode.IO_SEND,
                    {
                        protocol: Protocol.Setup,
                        protocolExecutionID: context.message.protocolExecutionID,
                        toXpub: initiatorXpub,
                        signature: mySig,
                        seq: UNASSIGNED_SEQ_NO
                    }
                ]);
            });
        }
    };
    function proposeStateTransition(params, context) {
        const { multisigAddress, initiatorXpub, responderXpub } = params;
        if (context.stateChannelsMap.has(multisigAddress)) {
            throw new Error(`Found an already-setup channel at ${multisigAddress}`);
        }
        const newStateChannel = StateChannel.setupChannel(context.network.FreeBalanceApp, multisigAddress, [initiatorXpub, responderXpub]);
        context.stateChannelsMap.set(newStateChannel.multisigAddress, newStateChannel);
        const setupCommitment = constructSetupCommitment(context.network, newStateChannel);
        return setupCommitment;
    }
    function constructSetupCommitment(network, stateChannel) {
        const freeBalance = stateChannel.freeBalance;
        return new SetupCommitment(network, stateChannel.multisigAddress, stateChannel.multisigOwners, freeBalance.identity, utils.defaultAbiCoder.encode([coinTransferInterpreterParamsStateEncoding], [freeBalance.coinTransferInterpreterParams]));
    }

    const TAKE_ACTION_PROTOCOL = {
        0: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const { appIdentityHash, multisigAddress, responderXpub } = context.message
                    .params;
                const channel = context.stateChannelsMap.get(multisigAddress);
                const appSeqNo = channel.getAppInstance(appIdentityHash).appSeqNo;
                const setStateCommitment = yield __await(addStateTransitionAndCommitmentToContext(context.message, context, context.provider));
                const mySig = yield yield __await([Opcode.OP_SIGN, setStateCommitment, appSeqNo]);
                const { signature } = yield yield __await([
                    Opcode.IO_SEND_AND_WAIT,
                    {
                        protocol: Protocol.TakeAction,
                        protocolExecutionID: context.message.protocolExecutionID,
                        params: context.message.params,
                        seq: 1,
                        toXpub: responderXpub,
                        signature: mySig
                    }
                ]);
                assertIsValidSignature(xkeyKthAddress(responderXpub, appSeqNo), setStateCommitment, signature);
            });
        },
        1: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const setStateCommitment = yield __await(addStateTransitionAndCommitmentToContext(context.message, context, context.provider));
                const { signature, params } = context.message;
                const { appIdentityHash, multisigAddress, initiatorXpub } = params;
                const sc = context.stateChannelsMap.get(multisigAddress);
                const appSeqNo = sc.getAppInstance(appIdentityHash).appSeqNo;
                assertIsValidSignature(xkeyKthAddress(initiatorXpub, appSeqNo), setStateCommitment, signature);
                const mySig = yield yield __await([Opcode.OP_SIGN, setStateCommitment, appSeqNo]);
                yield yield __await([
                    Opcode.IO_SEND,
                    {
                        protocol: Protocol.TakeAction,
                        protocolExecutionID: context.message.protocolExecutionID,
                        toXpub: initiatorXpub,
                        seq: -1,
                        signature: mySig
                    }
                ]);
            });
        }
    };
    async function addStateTransitionAndCommitmentToContext(message, context, provider) {
        const { network, stateChannelsMap } = context;
        const { appIdentityHash, action, multisigAddress } = message.params;
        const stateChannel = stateChannelsMap.get(multisigAddress);
        const appInstance = stateChannel.getAppInstance(appIdentityHash);
        const newChannel = stateChannel.setState(appIdentityHash, await appInstance.computeStateTransition(action, provider));
        const updatedAppInstance = newChannel.getAppInstance(appIdentityHash);
        const setStateCommitment = new SetStateCommitment(network, updatedAppInstance.identity, updatedAppInstance.hashOfLatestState, updatedAppInstance.versionNumber, updatedAppInstance.timeout);
        context.stateChannelsMap.set(multisigAddress, newChannel);
        return setStateCommitment;
    }

    function computeCoinTransferIncrement(token, outcome) {
        const [decoded] = utils.defaultAbiCoder.decode(["tuple(address to, uint256 amount)[1][1]"], outcome);
        const ret = {};
        ret[token] = {};
        const balances = decoded[0];
        for (const pair of balances) {
            const [address, amount] = pair;
            ret[token][address] = amount;
        }
        return ret;
    }
    const anyNonzeroValues = (tokenIndexedCoinTransferMap) => Object.values(tokenIndexedCoinTransferMap).some(coinTransferMap => Object.values(coinTransferMap).some(amount => amount.gt(constants.Zero)));
    const wait = (ms) => new Promise(r => setTimeout(r, ms));
    async function computeTokenIndexedFreeBalanceIncrements(appInstance, provider) {
        const appDefinition = new ethers.Contract(appInstance.appInterface.addr, CounterfactualApp.abi, provider);
        let outcome = await appDefinition.functions.computeOutcome(appInstance.encodedLatestState);
        const outcomeType = appInstance.toJson().outcomeType;
        if (outcomeType === undefined) {
            throw new Error("undefined outcomeType in appInstance");
        }
        switch (outcomeType) {
            case OutcomeType.REFUND_OUTCOME_TYPE: {
                let attempts = 1;
                while (1) {
                    outcome = await appDefinition.functions.computeOutcome(appInstance.encodedLatestState);
                    const increments = computeCoinTransferIncrement(appInstance.state.tokenAddress, outcome);
                    if (anyNonzeroValues(increments)) {
                        return increments;
                    }
                    attempts += 1;
                    if (attempts === 10) {
                        throw new Error("Failed to get a outcome after 10 attempts");
                    }
                    await wait(1000 * attempts);
                }
            }
            case OutcomeType.TWO_PARTY_FIXED_OUTCOME: {
                if (appInstance.twoPartyOutcomeInterpreterParams === undefined) {
                    throw new Error("app instance outcome type set to two party outcome, but twoPartyOutcomeInterpreterParams not defined");
                }
                const { amount, playerAddrs, tokenAddress } = appInstance.twoPartyOutcomeInterpreterParams;
                const [decoded] = utils.defaultAbiCoder.decode(["uint256"], outcome);
                if (decoded.eq(TwoPartyFixedOutcome.SEND_TO_ADDR_ONE)) {
                    return {
                        [tokenAddress]: {
                            [playerAddrs[0]]: amount
                        }
                    };
                }
                if (decoded.eq(TwoPartyFixedOutcome.SEND_TO_ADDR_TWO)) {
                    return {
                        [tokenAddress]: {
                            [playerAddrs[1]]: amount
                        }
                    };
                }
                return {
                    [tokenAddress]: {
                        [playerAddrs[0]]: amount.div(2),
                        [playerAddrs[1]]: amount.sub(amount.div(2))
                    }
                };
            }
            default: {
                throw new Error("unknown interpreter");
            }
        }
    }

    const UNINSTALL_PROTOCOL = {
        0: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const { responderXpub } = context.message.params;
                const responderAddress = xkeyKthAddress(responderXpub, 0);
                const [uninstallCommitment, appIdentityHash] = yield __await(proposeStateTransition$1(context.message.params, context, context.provider));
                const mySig = yield yield __await([Opcode.OP_SIGN, uninstallCommitment]);
                const { signature: theirSig } = yield yield __await([
                    Opcode.IO_SEND_AND_WAIT,
                    {
                        protocol: Protocol.Uninstall,
                        protocolExecutionID: context.message.protocolExecutionID,
                        params: context.message.params,
                        toXpub: responderXpub,
                        signature: mySig,
                        seq: 1
                    }
                ]);
                assertIsValidSignature(responderAddress, uninstallCommitment, theirSig);
                const finalCommitment = uninstallCommitment.getSignedTransaction([
                    mySig,
                    theirSig
                ]);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Uninstall,
                    finalCommitment,
                    appIdentityHash
                ]);
            });
        },
        1: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const { initiatorXpub } = context.message.params;
                const initiatorAddress = xkeyKthAddress(initiatorXpub, 0);
                const [uninstallCommitment, appIdentityHash] = yield __await(proposeStateTransition$1(context.message.params, context, context.provider));
                const theirSig = context.message.signature;
                assertIsValidSignature(initiatorAddress, uninstallCommitment, theirSig);
                const mySig = yield yield __await([Opcode.OP_SIGN, uninstallCommitment]);
                const finalCommitment = uninstallCommitment.getSignedTransaction([
                    mySig,
                    theirSig
                ]);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Uninstall,
                    finalCommitment,
                    appIdentityHash
                ]);
                yield yield __await([
                    Opcode.IO_SEND,
                    {
                        protocol: Protocol.Uninstall,
                        protocolExecutionID: context.message.protocolExecutionID,
                        toXpub: initiatorXpub,
                        signature: mySig,
                        seq: UNASSIGNED_SEQ_NO
                    }
                ]);
            });
        }
    };
    async function proposeStateTransition$1(params, context, provider) {
        const { appIdentityHash, multisigAddress } = params;
        const { stateChannelsMap } = context;
        const sc = stateChannelsMap.get(multisigAddress);
        const tokenIndexedIncrements = await computeTokenIndexedFreeBalanceIncrements(sc.getAppInstance(appIdentityHash), provider);
        const newStateChannel = sc.uninstallApp(appIdentityHash, tokenIndexedIncrements);
        stateChannelsMap.set(multisigAddress, newStateChannel);
        const freeBalance = newStateChannel.freeBalance;
        const uninstallCommitment = new SetStateCommitment(context.network, freeBalance.identity, freeBalance.hashOfLatestState, freeBalance.versionNumber, freeBalance.timeout);
        return [uninstallCommitment, appIdentityHash];
    }

    function xkeyTo0thAddress(xpub) {
        return hdnode.fromExtendedKey(xpub).derivePath("0").address;
    }
    const { OP_SIGN: OP_SIGN$1, IO_SEND_AND_WAIT: IO_SEND_AND_WAIT$1, IO_SEND: IO_SEND$1 } = Opcode;
    const UNINSTALL_VIRTUAL_APP_PROTOCOL = {
        0: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const { message: { protocolExecutionID, params }, provider, stateChannelsMap, network } = context;
                const { intermediaryXpub, responderXpub } = params;
                const intermediaryAddress = xkeyKthAddress(intermediaryXpub, 0);
                const responderAddress = xkeyKthAddress(responderXpub, 0);
                const [stateChannelWithAllThreeParties, stateChannelWithIntermediary, stateChannelWithResponding, timeLockedPassThroughAppInstance] = yield __await(getUpdatedStateChannelAndAppInstanceObjectsForInitiating(stateChannelsMap, params, provider, network));
                const timeLockedPassThroughSetStateCommitment = new SetStateCommitment(network, timeLockedPassThroughAppInstance.identity, timeLockedPassThroughAppInstance.hashOfLatestState, timeLockedPassThroughAppInstance.appSeqNo, timeLockedPassThroughAppInstance.defaultTimeout);
                const initiatingSignatureOnTimeLockedPassThroughSetStateCommitment = yield yield __await([
                    OP_SIGN$1,
                    timeLockedPassThroughSetStateCommitment
                ]);
                const m1 = {
                    params,
                    protocolExecutionID,
                    protocol: Protocol.UninstallVirtualApp,
                    seq: 1,
                    toXpub: intermediaryXpub,
                    signature: initiatingSignatureOnTimeLockedPassThroughSetStateCommitment
                };
                const m4 = yield yield __await([IO_SEND_AND_WAIT$1, m1]);
                const { signature: responderSignatureOnTimeLockedPassThroughSetStateCommitment, signature2: intermediarySignatureOnTimeLockedPassThroughSetStateCommitment } = m4;
                assertIsValidSignature(responderAddress, timeLockedPassThroughSetStateCommitment, responderSignatureOnTimeLockedPassThroughSetStateCommitment);
                assertIsValidSignature(intermediaryAddress, timeLockedPassThroughSetStateCommitment, intermediarySignatureOnTimeLockedPassThroughSetStateCommitment);
                const aliceIngridAppDisactivationCommitment = new SetStateCommitment(network, stateChannelWithIntermediary.freeBalance.identity, stateChannelWithIntermediary.freeBalance.hashOfLatestState, stateChannelWithIntermediary.freeBalance.versionNumber, stateChannelWithIntermediary.freeBalance.timeout);
                const initiatingSignatureOnAliceIngridAppDisactivationCommitment = yield yield __await([
                    OP_SIGN$1,
                    aliceIngridAppDisactivationCommitment
                ]);
                const m5 = {
                    protocolExecutionID,
                    protocol: Protocol.UninstallVirtualApp,
                    seq: UNASSIGNED_SEQ_NO,
                    toXpub: intermediaryXpub,
                    signature: initiatingSignatureOnAliceIngridAppDisactivationCommitment
                };
                const m6 = yield yield __await([IO_SEND_AND_WAIT$1, m5]);
                const { signature: intermediarySignatureOnAliceIngridAppDisactivationCommitment } = m6;
                assertIsValidSignature(intermediaryAddress, aliceIngridAppDisactivationCommitment, intermediarySignatureOnAliceIngridAppDisactivationCommitment);
                context.stateChannelsMap.set(stateChannelWithIntermediary.multisigAddress, stateChannelWithIntermediary);
                context.stateChannelsMap.set(stateChannelWithAllThreeParties.multisigAddress, stateChannelWithAllThreeParties);
                context.stateChannelsMap.set(stateChannelWithResponding.multisigAddress, stateChannelWithResponding);
            });
        },
        1: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const { message: { protocolExecutionID, params, signature: initiatingSignatureOnTimeLockedPassThroughSetStateCommitment }, provider, stateChannelsMap, network } = context;
                const { initiatorXpub, responderXpub } = params;
                const initiatorAddress = xkeyKthAddress(initiatorXpub, 0);
                const responderAddress = xkeyKthAddress(responderXpub, 0);
                const [stateChannelWithAllThreeParties, stateChannelWithInitiating, stateChannelWithResponding, timeLockedPassThroughAppInstance] = yield __await(getUpdatedStateChannelAndAppInstanceObjectsForIntermediary(stateChannelsMap, params, provider, network));
                const timeLockedPassThroughSetStateCommitment = new SetStateCommitment(network, timeLockedPassThroughAppInstance.identity, timeLockedPassThroughAppInstance.hashOfLatestState, timeLockedPassThroughAppInstance.appSeqNo, timeLockedPassThroughAppInstance.defaultTimeout);
                assertIsValidSignature(initiatorAddress, timeLockedPassThroughSetStateCommitment, initiatingSignatureOnTimeLockedPassThroughSetStateCommitment);
                const intermediarySignatureOnTimeLockedPassThroughSetStateCommitment = yield yield __await([
                    OP_SIGN$1,
                    timeLockedPassThroughSetStateCommitment
                ]);
                const m2 = {
                    protocolExecutionID,
                    params,
                    protocol: Protocol.UninstallVirtualApp,
                    seq: 2,
                    toXpub: responderXpub,
                    signature: initiatingSignatureOnTimeLockedPassThroughSetStateCommitment,
                    signature2: intermediarySignatureOnTimeLockedPassThroughSetStateCommitment
                };
                const m3 = yield yield __await([IO_SEND_AND_WAIT$1, m2]);
                const { signature: respondingSignatureOnTimeLockedPassThroughSetStateCommitment } = m3;
                assertIsValidSignature(responderAddress, timeLockedPassThroughSetStateCommitment, respondingSignatureOnTimeLockedPassThroughSetStateCommitment);
                const m4 = {
                    protocolExecutionID,
                    protocol: Protocol.UninstallVirtualApp,
                    seq: UNASSIGNED_SEQ_NO,
                    toXpub: initiatorXpub,
                    signature: respondingSignatureOnTimeLockedPassThroughSetStateCommitment,
                    signature2: intermediarySignatureOnTimeLockedPassThroughSetStateCommitment
                };
                const m5 = yield yield __await([IO_SEND_AND_WAIT$1, m4]);
                const { signature: initiatingSignatureOnAliceIngridAppDisactivationCommitment } = m5;
                const aliceIngridAppDisactivationCommitment = new SetStateCommitment(network, stateChannelWithInitiating.freeBalance.identity, stateChannelWithInitiating.freeBalance.hashOfLatestState, stateChannelWithInitiating.freeBalance.versionNumber, stateChannelWithInitiating.freeBalance.timeout);
                assertIsValidSignature(initiatorAddress, aliceIngridAppDisactivationCommitment, initiatingSignatureOnAliceIngridAppDisactivationCommitment);
                const intermediarySignatureOnAliceIngridAppDisactivationCommitment = yield yield __await([
                    OP_SIGN$1,
                    aliceIngridAppDisactivationCommitment
                ]);
                yield yield __await([
                    IO_SEND$1,
                    {
                        protocolExecutionID,
                        protocol: Protocol.UninstallVirtualApp,
                        seq: UNASSIGNED_SEQ_NO,
                        toXpub: initiatorXpub,
                        signature: intermediarySignatureOnAliceIngridAppDisactivationCommitment
                    }
                ]);
                const ingridBobAppDisactivationCommitment = new SetStateCommitment(network, stateChannelWithResponding.freeBalance.identity, stateChannelWithResponding.freeBalance.hashOfLatestState, stateChannelWithResponding.freeBalance.versionNumber, stateChannelWithResponding.freeBalance.timeout);
                const intermediarySignatureOnIngridBobAppDisactivationCommitment = yield yield __await([
                    OP_SIGN$1,
                    ingridBobAppDisactivationCommitment
                ]);
                const m7 = {
                    protocolExecutionID,
                    protocol: Protocol.UninstallVirtualApp,
                    seq: UNASSIGNED_SEQ_NO,
                    toXpub: responderXpub,
                    signature: intermediarySignatureOnIngridBobAppDisactivationCommitment
                };
                const m8 = yield yield __await([IO_SEND_AND_WAIT$1, m7]);
                const { signature: respondingSignatureOnIngridBobAppDisactivationCommitment } = m8;
                assertIsValidSignature(responderAddress, ingridBobAppDisactivationCommitment, respondingSignatureOnIngridBobAppDisactivationCommitment);
                context.stateChannelsMap.set(stateChannelWithInitiating.multisigAddress, stateChannelWithInitiating);
                context.stateChannelsMap.set(stateChannelWithAllThreeParties.multisigAddress, stateChannelWithAllThreeParties);
                context.stateChannelsMap.set(stateChannelWithResponding.multisigAddress, stateChannelWithResponding);
            });
        },
        2: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const { message: { protocolExecutionID, params, signature: initiatingSignatureOnTimeLockedPassThroughSetStateCommitment, signature2: intermediarySignatureOnTimeLockedPassThroughSetStateCommitment }, provider, stateChannelsMap, network } = context;
                const { initiatorXpub, intermediaryXpub } = params;
                const initiatorAddress = xkeyKthAddress(initiatorXpub, 0);
                const intermediaryAddress = xkeyKthAddress(intermediaryXpub, 0);
                const [stateChannelWithAllThreeParties, stateChannelWithIntermediary, stateChannelWithInitiating, timeLockedPassThroughAppInstance] = yield __await(getUpdatedStateChannelAndAppInstanceObjectsForResponding(stateChannelsMap, params, provider, network));
                const timeLockedPassThroughSetStateCommitment = new SetStateCommitment(network, timeLockedPassThroughAppInstance.identity, timeLockedPassThroughAppInstance.hashOfLatestState, timeLockedPassThroughAppInstance.appSeqNo, timeLockedPassThroughAppInstance.defaultTimeout);
                assertIsValidSignature(initiatorAddress, timeLockedPassThroughSetStateCommitment, initiatingSignatureOnTimeLockedPassThroughSetStateCommitment);
                assertIsValidSignature(intermediaryAddress, timeLockedPassThroughSetStateCommitment, intermediarySignatureOnTimeLockedPassThroughSetStateCommitment);
                const respondingSignatureOnTimeLockedPassThroughSetStateCommitment = yield yield __await([
                    OP_SIGN$1,
                    timeLockedPassThroughSetStateCommitment
                ]);
                const m3 = {
                    protocolExecutionID,
                    protocol: Protocol.UninstallVirtualApp,
                    seq: UNASSIGNED_SEQ_NO,
                    toXpub: intermediaryXpub,
                    signature: respondingSignatureOnTimeLockedPassThroughSetStateCommitment
                };
                const m7 = yield yield __await([IO_SEND_AND_WAIT$1, m3]);
                const { signature: intermediarySignatureOnIngridBobAppDisactivationCommitment } = m7;
                const ingridBobAppDisactivationCommitment = new SetStateCommitment(network, stateChannelWithIntermediary.freeBalance.identity, stateChannelWithIntermediary.freeBalance.hashOfLatestState, stateChannelWithIntermediary.freeBalance.versionNumber, stateChannelWithIntermediary.freeBalance.timeout);
                assertIsValidSignature(intermediaryAddress, ingridBobAppDisactivationCommitment, intermediarySignatureOnIngridBobAppDisactivationCommitment);
                const respondingSignatureOnIngridBobAppDisactivationCommitment = yield yield __await([
                    OP_SIGN$1,
                    ingridBobAppDisactivationCommitment
                ]);
                const m8 = {
                    protocolExecutionID,
                    protocol: Protocol.UninstallVirtualApp,
                    seq: UNASSIGNED_SEQ_NO,
                    toXpub: intermediaryXpub,
                    signature: respondingSignatureOnIngridBobAppDisactivationCommitment
                };
                yield yield __await([IO_SEND$1, m8]);
                context.stateChannelsMap.set(stateChannelWithIntermediary.multisigAddress, stateChannelWithIntermediary);
                context.stateChannelsMap.set(stateChannelWithAllThreeParties.multisigAddress, stateChannelWithAllThreeParties);
                context.stateChannelsMap.set(stateChannelWithInitiating.multisigAddress, stateChannelWithInitiating);
            });
        }
    };
    function getStateChannelFromMapWithOwners(stateChannelsMap, userXpubs, network) {
        return stateChannelsMap.get(getCreate2MultisigAddress(userXpubs, network.ProxyFactory, network.MinimumViableMultisig));
    }
    async function getUpdatedStateChannelAndAppInstanceObjectsForInitiating(stateChannelsMap, params, provider, network) {
        const { intermediaryXpub, responderXpub, initiatorXpub, targetAppIdentityHash, targetOutcome } = params;
        const initiatorAddress = xkeyTo0thAddress(initiatorXpub);
        const intermediaryAddress = xkeyTo0thAddress(intermediaryXpub);
        const responderAddress = xkeyTo0thAddress(responderXpub);
        const [stateChannelWithAllThreeParties, stateChannelWithIntermediary, stateChannelWithResponding] = [
            getStateChannelFromMapWithOwners(stateChannelsMap, [initiatorXpub, responderXpub, intermediaryXpub], network),
            getStateChannelFromMapWithOwners(stateChannelsMap, [initiatorXpub, intermediaryXpub], network),
            getStateChannelFromMapWithOwners(stateChannelsMap, [initiatorXpub, responderXpub], network)
        ];
        const agreement = stateChannelWithIntermediary.getSingleAssetTwoPartyIntermediaryAgreementFromVirtualApp(targetAppIdentityHash);
        const timeLockedPassThroughAppInstance = stateChannelWithAllThreeParties.getAppInstance(agreement.timeLockedPassThroughIdentityHash);
        const virtualAppInstance = stateChannelWithResponding.getAppInstance(timeLockedPassThroughAppInstance.state["targetAppIdentityHash"]);
        const tokenIndexedIncrements = await computeTokenIndexedFreeBalanceIncrements(stateChannelWithAllThreeParties.getAppInstance(timeLockedPassThroughAppInstance.identityHash), provider);
        return [
            stateChannelWithAllThreeParties.removeAppInstance(timeLockedPassThroughAppInstance.identityHash),
            stateChannelWithIntermediary.removeSingleAssetTwoPartyIntermediaryAgreement(virtualAppInstance.identityHash, {
                [intermediaryAddress]: tokenIndexedIncrements[CONVENTION_FOR_ETH_TOKEN_ADDRESS][responderAddress],
                [initiatorAddress]: tokenIndexedIncrements[CONVENTION_FOR_ETH_TOKEN_ADDRESS][initiatorAddress]
            }, CONVENTION_FOR_ETH_TOKEN_ADDRESS),
            stateChannelWithResponding.removeAppInstance(virtualAppInstance.identityHash),
            timeLockedPassThroughAppInstance.setState(Object.assign({}, timeLockedPassThroughAppInstance.state, { switchesOutcomeAt: 0, defaultOutcome: targetOutcome }))
        ];
    }
    async function getUpdatedStateChannelAndAppInstanceObjectsForResponding(stateChannelsMap, params, provider, network) {
        const { intermediaryXpub, responderXpub, initiatorXpub, targetAppIdentityHash, targetOutcome } = params;
        const initiatorAddress = xkeyTo0thAddress(initiatorXpub);
        const intermediaryAddress = xkeyTo0thAddress(intermediaryXpub);
        const responderAddress = xkeyTo0thAddress(responderXpub);
        const [stateChannelWithAllThreeParties, stateChannelWithIntermediary, stateChannelWithInitiating] = [
            getStateChannelFromMapWithOwners(stateChannelsMap, [initiatorXpub, responderXpub, intermediaryXpub], network),
            getStateChannelFromMapWithOwners(stateChannelsMap, [responderXpub, intermediaryXpub], network),
            getStateChannelFromMapWithOwners(stateChannelsMap, [initiatorXpub, responderXpub], network)
        ];
        const agreement = stateChannelWithIntermediary.getSingleAssetTwoPartyIntermediaryAgreementFromVirtualApp(targetAppIdentityHash);
        const timeLockedPassThroughAppInstance = stateChannelWithAllThreeParties.getAppInstance(agreement.timeLockedPassThroughIdentityHash);
        const virtualAppInstance = stateChannelWithInitiating.getAppInstance(timeLockedPassThroughAppInstance.state["targetAppIdentityHash"]);
        const expectedOutcome = await virtualAppInstance.computeOutcome(virtualAppInstance.state, provider);
        if (expectedOutcome !== targetOutcome) {
            throw new Error("UninstallVirtualApp Protocol: Received targetOutcome that did not match expected outcome based on latest state of Virtual App.");
        }
        const tokenIndexedIncrements = await computeTokenIndexedFreeBalanceIncrements(stateChannelWithAllThreeParties.getAppInstance(timeLockedPassThroughAppInstance.identityHash), provider);
        return [
            stateChannelWithAllThreeParties.removeAppInstance(timeLockedPassThroughAppInstance.identityHash),
            stateChannelWithIntermediary.removeSingleAssetTwoPartyIntermediaryAgreement(virtualAppInstance.identityHash, {
                [intermediaryAddress]: tokenIndexedIncrements[CONVENTION_FOR_ETH_TOKEN_ADDRESS][initiatorAddress],
                [responderAddress]: tokenIndexedIncrements[CONVENTION_FOR_ETH_TOKEN_ADDRESS][responderAddress]
            }, CONVENTION_FOR_ETH_TOKEN_ADDRESS),
            stateChannelWithInitiating.removeAppInstance(virtualAppInstance.identityHash),
            timeLockedPassThroughAppInstance.setState(Object.assign({}, timeLockedPassThroughAppInstance.state, { switchesOutcomeAt: 0, defaultOutcome: expectedOutcome }))
        ];
    }
    async function getUpdatedStateChannelAndAppInstanceObjectsForIntermediary(stateChannelsMap, params, provider, network) {
        const { intermediaryXpub, responderXpub, initiatorXpub, targetAppIdentityHash, targetOutcome } = params;
        const initiatorAddress = xkeyTo0thAddress(initiatorXpub);
        const intermediaryAddress = xkeyTo0thAddress(intermediaryXpub);
        const responderAddress = xkeyTo0thAddress(responderXpub);
        const [stateChannelWithAllThreeParties, stateChannelWithInitiating, stateChannelWithResponding] = [
            getStateChannelFromMapWithOwners(stateChannelsMap, [initiatorXpub, responderXpub, intermediaryXpub], network),
            getStateChannelFromMapWithOwners(stateChannelsMap, [initiatorXpub, intermediaryXpub], network),
            getStateChannelFromMapWithOwners(stateChannelsMap, [intermediaryXpub, responderXpub], network)
        ];
        const agreementWithInitiating = stateChannelWithInitiating.getSingleAssetTwoPartyIntermediaryAgreementFromVirtualApp(targetAppIdentityHash);
        const timeLockedPassThroughAppInstance = stateChannelWithAllThreeParties.getAppInstance(agreementWithInitiating.timeLockedPassThroughIdentityHash);
        const tokenIndexedIncrements = await computeTokenIndexedFreeBalanceIncrements(stateChannelWithAllThreeParties.getAppInstance(timeLockedPassThroughAppInstance.identityHash), provider);
        return [
            stateChannelWithAllThreeParties.removeAppInstance(timeLockedPassThroughAppInstance.identityHash),
            stateChannelWithInitiating.removeSingleAssetTwoPartyIntermediaryAgreement(timeLockedPassThroughAppInstance.state["targetAppIdentityHash"], {
                [intermediaryAddress]: tokenIndexedIncrements[CONVENTION_FOR_ETH_TOKEN_ADDRESS][responderAddress],
                [initiatorAddress]: tokenIndexedIncrements[CONVENTION_FOR_ETH_TOKEN_ADDRESS][initiatorAddress]
            }, CONVENTION_FOR_ETH_TOKEN_ADDRESS),
            stateChannelWithResponding.removeSingleAssetTwoPartyIntermediaryAgreement(timeLockedPassThroughAppInstance.state["targetAppIdentityHash"], {
                [intermediaryAddress]: tokenIndexedIncrements[CONVENTION_FOR_ETH_TOKEN_ADDRESS][initiatorAddress],
                [responderAddress]: tokenIndexedIncrements[CONVENTION_FOR_ETH_TOKEN_ADDRESS][responderAddress]
            }, CONVENTION_FOR_ETH_TOKEN_ADDRESS),
            timeLockedPassThroughAppInstance.setState(Object.assign({}, timeLockedPassThroughAppInstance.state, { switchesOutcomeAt: 0, defaultOutcome: targetOutcome }))
        ];
    }

    const UPDATE_PROTOCOL = {
        0: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const { responderXpub } = context.message.params;
                const [appIdentityHash, setStateCommitment, appSeqNo] = proposeStateTransition$2(context.message.params, context);
                const mySig = yield yield __await([Opcode.OP_SIGN, setStateCommitment, appSeqNo]);
                const { signature: theirSig } = yield yield __await([
                    Opcode.IO_SEND_AND_WAIT,
                    {
                        protocol: Protocol.Update,
                        protocolExecutionID: context.message.protocolExecutionID,
                        params: context.message.params,
                        toXpub: responderXpub,
                        signature: mySig,
                        seq: 1
                    }
                ]);
                assertIsValidSignature(xkeyKthAddress(responderXpub, appSeqNo), setStateCommitment, theirSig);
                const finalCommitment = setStateCommitment.getSignedTransaction([
                    mySig,
                    theirSig
                ]);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Update,
                    finalCommitment,
                    appIdentityHash
                ]);
            });
        },
        1: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const [appIdentityHash, setStateCommitment, appSeqNo] = proposeStateTransition$2(context.message.params, context);
                const { initiatorXpub } = context.message.params;
                const theirSig = context.message.signature;
                assertIsValidSignature(xkeyKthAddress(initiatorXpub, appSeqNo), setStateCommitment, theirSig);
                const mySig = yield yield __await([Opcode.OP_SIGN, setStateCommitment, appSeqNo]);
                const finalCommitment = setStateCommitment.getSignedTransaction([
                    mySig,
                    theirSig
                ]);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Update,
                    finalCommitment,
                    appIdentityHash
                ]);
                yield yield __await([
                    Opcode.IO_SEND,
                    {
                        protocol: Protocol.Update,
                        protocolExecutionID: context.message.protocolExecutionID,
                        toXpub: initiatorXpub,
                        signature: mySig,
                        seq: UNASSIGNED_SEQ_NO
                    }
                ]);
            });
        }
    };
    function proposeStateTransition$2(params, context) {
        const { appIdentityHash, newState, multisigAddress } = params;
        const newStateChannel = context.stateChannelsMap
            .get(multisigAddress)
            .setState(appIdentityHash, newState);
        context.stateChannelsMap.set(newStateChannel.multisigAddress, newStateChannel);
        const setStateCommitment = constructUpdateOp(context.network, newStateChannel, appIdentityHash);
        const appSeqNo = context.stateChannelsMap
            .get(multisigAddress)
            .getAppInstance(appIdentityHash).appSeqNo;
        return [appIdentityHash, setStateCommitment, appSeqNo];
    }
    function constructUpdateOp(network, stateChannel, appIdentityHash) {
        const app = stateChannel.getAppInstance(appIdentityHash);
        return new SetStateCommitment(network, app.identity, app.hashOfLatestState, app.versionNumber, app.timeout);
    }

    const WITHDRAW_PROTOCOL = {
        0: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const { stateChannelsMap, message: { params, protocolExecutionID }, network } = context;
                const { responderXpub, multisigAddress, recipient, amount, tokenAddress } = params;
                const preInstallRefundAppStateChannel = stateChannelsMap.get(multisigAddress);
                const responderAddress = preInstallRefundAppStateChannel.getFreeBalanceAddrOf(responderXpub);
                const postInstallRefundAppStateChannel = addRefundAppToStateChannel(preInstallRefundAppStateChannel, params, network);
                const refundApp = postInstallRefundAppStateChannel.mostRecentlyInstalledAppInstance();
                const conditionalTransactionData = constructConditionalTransactionForRefundApp(network, postInstallRefundAppStateChannel);
                const mySignatureOnConditionalTransaction = yield yield __await([
                    Opcode.OP_SIGN,
                    conditionalTransactionData
                ]);
                const { signature: counterpartySignatureOnConditionalTransaction, signature2: counterpartySignatureOnFreeBalanceStateUpdate } = yield yield __await([
                    Opcode.IO_SEND_AND_WAIT,
                    {
                        protocolExecutionID,
                        params,
                        protocol: Protocol.Withdraw,
                        toXpub: responderXpub,
                        signature: mySignatureOnConditionalTransaction,
                        seq: 1
                    }
                ]);
                assertIsValidSignature(responderAddress, conditionalTransactionData, counterpartySignatureOnConditionalTransaction);
                const signedConditionalTransaction = conditionalTransactionData.getSignedTransaction([
                    mySignatureOnConditionalTransaction,
                    counterpartySignatureOnConditionalTransaction
                ]);
                context.stateChannelsMap.set(postInstallRefundAppStateChannel.multisigAddress, postInstallRefundAppStateChannel);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Install,
                    signedConditionalTransaction,
                    refundApp.identityHash
                ]);
                const freeBalanceUpdateData = new SetStateCommitment(network, postInstallRefundAppStateChannel.freeBalance.identity, postInstallRefundAppStateChannel.freeBalance.hashOfLatestState, postInstallRefundAppStateChannel.freeBalance.versionNumber, postInstallRefundAppStateChannel.freeBalance.timeout);
                assertIsValidSignature(responderAddress, freeBalanceUpdateData, counterpartySignatureOnFreeBalanceStateUpdate);
                const mySignatureOnFreeBalanceStateUpdate = yield yield __await([
                    Opcode.OP_SIGN,
                    freeBalanceUpdateData
                ]);
                const signedFreeBalanceStateUpdate = freeBalanceUpdateData.getSignedTransaction([
                    mySignatureOnFreeBalanceStateUpdate,
                    counterpartySignatureOnFreeBalanceStateUpdate
                ]);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Update,
                    signedFreeBalanceStateUpdate,
                    postInstallRefundAppStateChannel.freeBalance.identityHash
                ]);
                const withdrawCommitment = constructWithdrawalCommitment(postInstallRefundAppStateChannel, recipient, amount, tokenAddress);
                const mySignatureOnWithdrawalCommitment = yield yield __await([
                    Opcode.OP_SIGN,
                    withdrawCommitment
                ]);
                const { signature: counterpartySignatureOnWithdrawalCommitment, signature2: counterpartySignatureOnUninstallCommitment } = yield yield __await([
                    Opcode.IO_SEND_AND_WAIT,
                    {
                        protocolExecutionID,
                        protocol: Protocol.Withdraw,
                        toXpub: responderXpub,
                        signature: mySignatureOnFreeBalanceStateUpdate,
                        signature2: mySignatureOnWithdrawalCommitment,
                        seq: UNASSIGNED_SEQ_NO
                    }
                ]);
                assertIsValidSignature(responderAddress, withdrawCommitment, counterpartySignatureOnWithdrawalCommitment);
                const postUninstallRefundAppStateChannel = postInstallRefundAppStateChannel.uninstallApp(refundApp.identityHash, {});
                context.stateChannelsMap.set(postUninstallRefundAppStateChannel.multisigAddress, postUninstallRefundAppStateChannel);
                const uninstallRefundAppCommitment = new SetStateCommitment(network, postUninstallRefundAppStateChannel.freeBalance.identity, postUninstallRefundAppStateChannel.freeBalance.hashOfLatestState, postUninstallRefundAppStateChannel.freeBalance.versionNumber, postUninstallRefundAppStateChannel.freeBalance.timeout);
                assertIsValidSignature(responderAddress, uninstallRefundAppCommitment, counterpartySignatureOnUninstallCommitment);
                const mySignatureOnUninstallCommitment = yield yield __await([
                    Opcode.OP_SIGN,
                    uninstallRefundAppCommitment
                ]);
                yield yield __await([
                    Opcode.IO_SEND,
                    {
                        protocol: Protocol.Withdraw,
                        protocolExecutionID: context.message.protocolExecutionID,
                        toXpub: responderXpub,
                        signature: mySignatureOnUninstallCommitment,
                        seq: UNASSIGNED_SEQ_NO
                    }
                ]);
                const signedWithdrawalCommitment = withdrawCommitment.getSignedTransaction([
                    mySignatureOnWithdrawalCommitment,
                    counterpartySignatureOnWithdrawalCommitment
                ]);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Withdraw,
                    signedWithdrawalCommitment,
                    multisigAddress
                ]);
                const signedUninstallCommitment = uninstallRefundAppCommitment.getSignedTransaction([
                    mySignatureOnUninstallCommitment,
                    counterpartySignatureOnUninstallCommitment
                ]);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Update,
                    signedUninstallCommitment,
                    postUninstallRefundAppStateChannel.freeBalance.identityHash
                ]);
            });
        },
        1: function (context) {
            return __asyncGenerator(this, arguments, function* () {
                const { stateChannelsMap, message: { params, protocolExecutionID, signature }, network } = context;
                const counterpartySignatureOnConditionalTransaction = signature;
                const { initiatorXpub, multisigAddress, recipient, amount, tokenAddress } = params;
                const preInstallRefundAppStateChannel = stateChannelsMap.get(multisigAddress);
                const initiatorAddress = preInstallRefundAppStateChannel.getFreeBalanceAddrOf(initiatorXpub);
                const postInstallRefundAppStateChannel = addRefundAppToStateChannel(preInstallRefundAppStateChannel, params, network);
                const refundApp = postInstallRefundAppStateChannel.mostRecentlyInstalledAppInstance();
                const conditionalTransactionData = constructConditionalTransactionForRefundApp(network, postInstallRefundAppStateChannel);
                assertIsValidSignature(initiatorAddress, conditionalTransactionData, counterpartySignatureOnConditionalTransaction);
                const mySignatureOnConditionalTransaction = yield yield __await([
                    Opcode.OP_SIGN,
                    conditionalTransactionData
                ]);
                const signedConditionalTransaction = conditionalTransactionData.getSignedTransaction([
                    mySignatureOnConditionalTransaction,
                    counterpartySignatureOnConditionalTransaction
                ]);
                context.stateChannelsMap.set(postInstallRefundAppStateChannel.multisigAddress, postInstallRefundAppStateChannel);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Install,
                    signedConditionalTransaction,
                    refundApp.identityHash
                ]);
                const freeBalanceUpdateData = new SetStateCommitment(network, postInstallRefundAppStateChannel.freeBalance.identity, postInstallRefundAppStateChannel.freeBalance.hashOfLatestState, postInstallRefundAppStateChannel.freeBalance.versionNumber, postInstallRefundAppStateChannel.freeBalance.timeout);
                const mySignatureOnFreeBalanceStateUpdate = yield yield __await([
                    Opcode.OP_SIGN,
                    freeBalanceUpdateData
                ]);
                const { signature: counterpartySignatureOnFreeBalanceStateUpdate, signature2: counterpartySignatureOnWithdrawalCommitment } = yield yield __await([
                    Opcode.IO_SEND_AND_WAIT,
                    {
                        protocolExecutionID,
                        protocol: Protocol.Withdraw,
                        toXpub: initiatorXpub,
                        signature: mySignatureOnConditionalTransaction,
                        signature2: mySignatureOnFreeBalanceStateUpdate,
                        seq: UNASSIGNED_SEQ_NO
                    }
                ]);
                assertIsValidSignature(initiatorAddress, freeBalanceUpdateData, counterpartySignatureOnFreeBalanceStateUpdate);
                const signedFreeBalanceStateUpdate = freeBalanceUpdateData.getSignedTransaction([
                    mySignatureOnFreeBalanceStateUpdate,
                    counterpartySignatureOnFreeBalanceStateUpdate
                ]);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Update,
                    signedFreeBalanceStateUpdate,
                    postInstallRefundAppStateChannel.freeBalance.identityHash
                ]);
                const withdrawCommitment = constructWithdrawalCommitment(postInstallRefundAppStateChannel, recipient, amount, tokenAddress);
                assertIsValidSignature(initiatorAddress, withdrawCommitment, counterpartySignatureOnWithdrawalCommitment);
                const mySignatureOnWithdrawalCommitment = yield yield __await([
                    Opcode.OP_SIGN,
                    withdrawCommitment
                ]);
                const signedWithdrawalCommitment = withdrawCommitment.getSignedTransaction([
                    mySignatureOnWithdrawalCommitment,
                    counterpartySignatureOnWithdrawalCommitment
                ]);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Withdraw,
                    signedWithdrawalCommitment,
                    multisigAddress
                ]);
                const postUninstallRefundAppStateChannel = postInstallRefundAppStateChannel.uninstallApp(refundApp.identityHash, {});
                context.stateChannelsMap.set(postUninstallRefundAppStateChannel.multisigAddress, postUninstallRefundAppStateChannel);
                const uninstallRefundAppCommitment = new SetStateCommitment(network, postUninstallRefundAppStateChannel.freeBalance.identity, postUninstallRefundAppStateChannel.freeBalance.hashOfLatestState, postUninstallRefundAppStateChannel.freeBalance.versionNumber, postUninstallRefundAppStateChannel.freeBalance.timeout);
                const mySignatureOnUninstallCommitment = yield yield __await([
                    Opcode.OP_SIGN,
                    uninstallRefundAppCommitment
                ]);
                const { signature: counterpartySignatureOnUninstallCommitment } = yield yield __await([
                    Opcode.IO_SEND_AND_WAIT,
                    {
                        protocolExecutionID,
                        protocol: Protocol.Withdraw,
                        toXpub: initiatorXpub,
                        signature: mySignatureOnWithdrawalCommitment,
                        signature2: mySignatureOnUninstallCommitment,
                        seq: UNASSIGNED_SEQ_NO
                    }
                ]);
                assertIsValidSignature(initiatorAddress, uninstallRefundAppCommitment, counterpartySignatureOnUninstallCommitment);
                const signedUninstallCommitment = uninstallRefundAppCommitment.getSignedTransaction([
                    mySignatureOnUninstallCommitment,
                    counterpartySignatureOnUninstallCommitment
                ]);
                yield yield __await([
                    Opcode.WRITE_COMMITMENT,
                    Protocol.Update,
                    signedUninstallCommitment,
                    postUninstallRefundAppStateChannel.freeBalance.identityHash
                ]);
            });
        }
    };
    function addRefundAppToStateChannel(stateChannel, params, network) {
        const { recipient, amount, multisigAddress, initiatorXpub, tokenAddress } = params;
        const defaultTimeout = 1008;
        const refundAppInstance = new AppInstance(multisigAddress, stateChannel.getNextSigningKeys(), defaultTimeout, {
            addr: network.CoinBalanceRefundApp,
            stateEncoding: coinBalanceRefundStateEncoding,
            actionEncoding: undefined
        }, false, stateChannel.numInstalledApps, {
            recipient,
            multisig: multisigAddress,
            threshold: amount
        }, 0, defaultTimeout, OutcomeType.REFUND_OUTCOME_TYPE, undefined, { tokenAddresses: [tokenAddress], limit: [constants.MaxUint256] });
        return stateChannel.installApp(refundAppInstance, {
            [tokenAddress]: {
                [stateChannel.getFreeBalanceAddrOf(initiatorXpub)]: amount
            }
        });
    }
    function constructConditionalTransactionForRefundApp(network, stateChannel) {
        const appInstance = stateChannel.mostRecentlyInstalledAppInstance();
        return new ConditionalTransaction(network, stateChannel.multisigAddress, stateChannel.multisigOwners, appInstance.identityHash, stateChannel.freeBalance.identityHash, network.CoinTransferInterpreter, utils.defaultAbiCoder.encode([coinTransferInterpreterParamsStateEncoding], [appInstance.coinTransferInterpreterParams]));
    }
    function constructWithdrawalCommitment(postInstallRefundAppStateChannel, recipient, amount, tokenAddress) {
        if (tokenAddress === CONVENTION_FOR_ETH_TOKEN_ADDRESS) {
            return new WithdrawETHCommitment(postInstallRefundAppStateChannel.multisigAddress, postInstallRefundAppStateChannel.multisigOwners, recipient, amount);
        }
        return new WithdrawERC20Commitment(postInstallRefundAppStateChannel.multisigAddress, postInstallRefundAppStateChannel.multisigOwners, recipient, amount, tokenAddress);
    }

    const protocolsByName = {
        [Protocol.Install]: INSTALL_PROTOCOL,
        [Protocol.InstallVirtualApp]: INSTALL_VIRTUAL_APP_PROTOCOL,
        [Protocol.Setup]: SETUP_PROTOCOL,
        [Protocol.TakeAction]: TAKE_ACTION_PROTOCOL,
        [Protocol.Uninstall]: UNINSTALL_PROTOCOL,
        [Protocol.UninstallVirtualApp]: UNINSTALL_VIRTUAL_APP_PROTOCOL,
        [Protocol.Update]: UPDATE_PROTOCOL,
        [Protocol.Withdraw]: WITHDRAW_PROTOCOL
    };
    function getProtocolFromName(protocolName) {
        if (!(protocolName in protocolsByName)) {
            throw new Error(`Received invalid protocol type ${protocolName}`);
        }
        return protocolsByName[protocolName];
    }

    class MiddlewareContainer {
        constructor() {
            this.middlewares = {
                [Opcode.IO_SEND]: [],
                [Opcode.IO_SEND_AND_WAIT]: [],
                [Opcode.OP_SIGN]: [],
                [Opcode.WRITE_COMMITMENT]: []
            };
        }
        add(scope, method) {
            this.middlewares[scope].push(method);
        }
        async run(opCode, args) {
            const middleware = this.middlewares[opCode][0];
            if (middleware === undefined) {
                throw new Error(`Attempted to run middleware for opcode ${opCode} but none existed`);
            }
            return middleware(args);
        }
    }

    function firstRecipientFromProtocolName(protocolName) {
        if ([Protocol.UninstallVirtualApp, Protocol.InstallVirtualApp].indexOf(protocolName) !== -1) {
            return "intermediaryXpub";
        }
        if ([
            Protocol.Update,
            Protocol.Uninstall,
            Protocol.TakeAction,
            Protocol.Install,
            Protocol.Withdraw
        ].indexOf(protocolName) !== -1) {
            return "responderXpub";
        }
        throw new Error(`Unknown protocolName ${protocolName} passed to firstRecipientFromProtocolName`);
    }
    class InstructionExecutor {
        constructor(network, provider) {
            this.network = network;
            this.provider = provider;
            this.middlewares = new MiddlewareContainer();
        }
        register(scope, method) {
            this.middlewares.add(scope, method);
        }
        async runProtocolWithMessage(msg, sc) {
            const protocol = getProtocolFromName(msg.protocol);
            const step = protocol[msg.seq];
            if (step === undefined) {
                throw new Error(`Received invalid seq ${msg.seq} for protocol ${msg.protocol}`);
            }
            return this.runProtocol(sc, step, msg);
        }
        async initiateProtocol(protocolName, sc, params) {
            return this.runProtocol(sc, getProtocolFromName(protocolName)[0], {
                params,
                protocol: protocolName,
                protocolExecutionID: uuid.v1(),
                seq: 0,
                toXpub: params[firstRecipientFromProtocolName(protocolName)]
            });
        }
        async runSetupProtocol(params) {
            const protocol = Protocol.Setup;
            return this.runProtocol(new Map(), getProtocolFromName(protocol)[0], {
                protocol,
                params,
                protocolExecutionID: uuid.v1(),
                seq: 0,
                toXpub: params.responderXpub
            });
        }
        async runProtocol(stateChannelsMap, instruction, message) {
            const context = {
                message,
                stateChannelsMap,
                network: this.network,
                provider: this.provider
            };
            let lastMiddlewareRet = undefined;
            const it = instruction(context);
            while (true) {
                const ret = await it.next(lastMiddlewareRet);
                if (ret.done) {
                    break;
                }
                const [opcode, ...args] = ret.value;
                lastMiddlewareRet = await this.middlewares.run(opcode, args);
            }
            return context.stateChannelsMap;
        }
    }

    async function handleReceivedProtocolMessage(requestHandler, nodeMsg) {
        const { publicIdentifier, instructionExecutor, store, router } = requestHandler;
        const { data: { protocol, seq, params } } = nodeMsg;
        for (const key in params) {
            if (params[key]["_hex"]) {
                params[key] = utils.bigNumberify(params[key]);
            }
        }
        if (seq === -1)
            return;
        let stateChannelsMap;
        let uninstallMsg;
        if (protocol === Protocol.UninstallVirtualApp) {
            const { initiatorXpub, intermediaryXpub, responderXpub, targetAppIdentityHash } = params;
            let channelWithIntermediary = await store.getMultisigAddressFromOwnersHash(hashOfOrderedPublicIdentifiers([initiatorXpub, intermediaryXpub]));
            if (channelWithIntermediary === null) {
                channelWithIntermediary = await store.getMultisigAddressFromOwnersHash(hashOfOrderedPublicIdentifiers([responderXpub, intermediaryXpub]));
            }
            await requestHandler
                .getShardedQueue(channelWithIntermediary)
                .add(async () => {
                stateChannelsMap = await instructionExecutor.runProtocolWithMessage(nodeMsg.data, new Map(Object.entries(await store.getAllChannels())));
                stateChannelsMap.forEach(async (stateChannel) => await store.saveStateChannel(stateChannel));
            });
            uninstallMsg = {
                from: publicIdentifier,
                type: NODE_EVENTS.UNINSTALL_VIRTUAL,
                data: {
                    appInstanceId: targetAppIdentityHash,
                    intermediaryIdentifier: intermediaryXpub
                }
            };
            await router.emit(uninstallMsg.type, uninstallMsg, "outgoing");
        }
        else {
            const { multisigAddress } = params;
            await requestHandler.getShardedQueue(multisigAddress).add(async () => {
                stateChannelsMap = await instructionExecutor.runProtocolWithMessage(nodeMsg.data, new Map(Object.entries(await store.getAllChannels())));
                stateChannelsMap.forEach(async (stateChannel) => await store.saveStateChannel(stateChannel));
            });
            switch (protocol) {
                case Protocol.Uninstall:
                    uninstallMsg = {
                        from: publicIdentifier,
                        type: NODE_EVENTS.UNINSTALL,
                        data: {
                            appInstanceId: params.appIdentityHash
                        }
                    };
                    await router.emit(uninstallMsg.type, uninstallMsg, "outgoing");
                    break;
                case Protocol.Withdraw:
                    const withdrawMsg = {
                        from: publicIdentifier,
                        type: NODE_EVENTS.WITHDRAWAL_CONFIRMED,
                        data: {
                            amount: params.amount
                        }
                    };
                    await router.emit(withdrawMsg.type, withdrawMsg, "outgoing");
                    break;
                case Protocol.Setup:
                    const { initiatorXpub } = params;
                    const setupMsg = {
                        from: publicIdentifier,
                        type: NODE_EVENTS.CREATE_CHANNEL,
                        data: {
                            multisigAddress,
                            owners: stateChannelsMap.get(multisigAddress)
                                .multisigOwners,
                            counterpartyXpub: initiatorXpub
                        }
                    };
                    await router.emit(setupMsg.type, setupMsg, "outgoing");
                    break;
                case Protocol.TakeAction:
                case Protocol.Update:
                    const { appIdentityHash } = params;
                    const sc = stateChannelsMap.get(multisigAddress);
                    const updateMsg = {
                        from: publicIdentifier,
                        type: NODE_EVENTS.UPDATE_STATE,
                        data: {
                            newState: sc.getAppInstance(appIdentityHash).state,
                            appInstanceId: appIdentityHash
                        }
                    };
                    await router.emit(updateMsg.type, updateMsg, "outgoing");
            }
        }
    }

    var controller = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    class Controller {
    }
    Controller.rpcMethods = {};
    exports.default = Controller;

    });

    unwrapExports(controller);

    var router = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    class Router {
        constructor({ controllers }) {
            this.controllers = controllers;
        }
        async dispatch(rpc) {
            const controller$1 = Object.values(controller.default.rpcMethods).find(mapping => mapping.method === rpc.methodName);
            if (!controller$1) {
                console.warn(`Cannot execute ${rpc.methodName}: no controller`);
                return;
            }
            return new controller$1.type()[controller$1.callback](rpc.parameters);
        }
    }
    exports.default = Router;

    });

    unwrapExports(router);

    var jsonapi = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    function jsonApiType(name) {
        return (target) => {
            target.jsonapiType = name;
            const functions = Object.getOwnPropertyNames(target.prototype).filter(key => key !== "constructor");
            // Type overriden operations.
            functions
                .filter(func => Object.values(target.rpcMethods).find(method => method.callback === func))
                .forEach(method => {
                const descriptor = Object.entries(target.rpcMethods).find(([, mapping]) => mapping.callback === method && mapping.method.includes("[type]"));
                if (!descriptor) {
                    return;
                }
                const [key, originalMapping] = descriptor;
                target.rpcMethods[key] = {
                    ...target.rpcMethods[key],
                    method: originalMapping.method.replace("[type]", target.jsonapiType)
                };
            });
            // Map new functions.
            functions
                .filter(func => !Object.values(target.rpcMethods).find(method => method.callback === func))
                .forEach(method => {
                jsonApiOperation(method, target)(target.prototype, method);
            });
        };
    }
    exports.jsonApiType = jsonApiType;
    function jsonApiOperation(name, forcedConstructor) {
        return (target, propertyKey) => {
            const constructor = forcedConstructor || target.constructor;
            const key = `${target.constructor.name}:${name}`;
            constructor.rpcMethods[key] = {
                method: `${constructor.jsonapiType || "[type]"}:${name}`,
                callback: propertyKey,
                type: constructor
            };
        };
    }
    exports.jsonApiOperation = jsonApiOperation;
    function jsonApiDeserialize(payload) {
        return {
            methodName: `${payload.ref.type}:${payload.op}`,
            parameters: payload
        };
    }
    exports.jsonApiDeserialize = jsonApiDeserialize;

    });

    unwrapExports(jsonapi);
    var jsonapi_1 = jsonapi.jsonApiType;
    var jsonapi_2 = jsonapi.jsonApiOperation;
    var jsonapi_3 = jsonapi.jsonApiDeserialize;

    var jsonrpc = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    function jsonRpcMethod(name) {
        return (target, propertyKey) => {
            const constructor = target.constructor;
            constructor.rpcMethods[`${constructor.name}:${name}`] = {
                method: name,
                callback: propertyKey,
                type: constructor
            };
        };
    }
    exports.jsonRpcMethod = jsonRpcMethod;
    function jsonRpcDeserialize(payload) {
        return {
            methodName: payload.method,
            parameters: payload.params,
            id: payload.id
        };
    }
    exports.jsonRpcDeserialize = jsonRpcDeserialize;
    function jsonRpcSerializeAsResponse(result, id) {
        return {
            jsonrpc: "2.0",
            result,
            id
        };
    }
    exports.jsonRpcSerializeAsResponse = jsonRpcSerializeAsResponse;
    function jsonRpcSerializeAsNotification(result) {
        return {
            jsonrpc: "2.0",
            result
        };
    }
    exports.jsonRpcSerializeAsNotification = jsonRpcSerializeAsNotification;

    });

    unwrapExports(jsonrpc);
    var jsonrpc_1 = jsonrpc.jsonRpcMethod;
    var jsonrpc_2 = jsonrpc.jsonRpcDeserialize;
    var jsonrpc_3 = jsonrpc.jsonRpcSerializeAsResponse;
    var jsonrpc_4 = jsonrpc.jsonRpcSerializeAsNotification;

    var dist = createCommonjsModule(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });

    exports.Controller = controller.default;

    exports.Router = router.default;

    exports.jsonApiType = jsonapi.jsonApiType;
    exports.jsonApiOperation = jsonapi.jsonApiOperation;
    exports.jsonApiDeserialize = jsonapi.jsonApiDeserialize;

    exports.jsonRpcDeserialize = jsonrpc.jsonRpcDeserialize;
    exports.jsonRpcMethod = jsonrpc.jsonRpcMethod;
    exports.jsonRpcSerializeAsNotification = jsonrpc.jsonRpcSerializeAsNotification;
    exports.jsonRpcSerializeAsResponse = jsonrpc.jsonRpcSerializeAsResponse;

    });

    unwrapExports(dist);
    var dist_1 = dist.Controller;
    var dist_2 = dist.Router;
    var dist_3 = dist.jsonApiType;
    var dist_4 = dist.jsonApiOperation;
    var dist_5 = dist.jsonApiDeserialize;
    var dist_6 = dist.jsonRpcDeserialize;
    var dist_7 = dist.jsonRpcMethod;
    var dist_8 = dist.jsonRpcSerializeAsNotification;
    var dist_9 = dist.jsonRpcSerializeAsResponse;

    class NodeController extends dist_1 {
        async executeMethod(requestHandler, params) {
            const shardedQueues = await this.enqueueByShard(requestHandler, params);
            let promise;
            const executeCached = async () => {
                if (!promise) {
                    promise = this.executeMethodImplementation(requestHandler, params);
                }
                return await promise;
            };
            await this.beforeExecution(requestHandler, params);
            let ret;
            if (shardedQueues.length > 0) {
                for (const queue of shardedQueues)
                    queue.add(executeCached);
                for (const queue of shardedQueues)
                    await queue;
                ret = await promise;
            }
            else {
                ret = await executeCached();
            }
            await this.afterExecution(requestHandler, params);
            return ret;
        }
        async beforeExecution(requestHandler, params) { }
        async afterExecution(requestHandler, params) { }
        async enqueueByShard(requestHandler, params) {
            return [];
        }
    }

    class GetAppInstancesController extends NodeController {
        constructor() {
            super(...arguments);
            this.executeMethod = super.executeMethod;
        }
        async executeMethodImplementation(requestHandler) {
            const { store } = requestHandler;
            const ret = [];
            const channels = await store.getAllChannels();
            for (const multisigAddress in channels) {
                channels[multisigAddress].appInstances.forEach(appInstance => ret.push(appInstance.toJson()));
            }
            return {
                appInstances: ret
            };
        }
    }
    GetAppInstancesController.methodName = Node.MethodName.GET_APP_INSTANCES;
    __decorate([
        dist_7(Node.RpcMethodName.GET_APP_INSTANCES),
        __metadata("design:type", Object)
    ], GetAppInstancesController.prototype, "executeMethod", void 0);

    // Port of lower_bound from http://en.cppreference.com/w/cpp/algorithm/lower_bound
    // Used to compute insertion index to keep queue sorted after insertion
    function lowerBound(array, value, comp) {
    	let first = 0;
    	let count = array.length;

    	while (count > 0) {
    		const step = (count / 2) | 0;
    		let it = first + step;

    		if (comp(array[it], value) <= 0) {
    			first = ++it;
    			count -= step + 1;
    		} else {
    			count = step;
    		}
    	}

    	return first;
    }

    class PriorityQueue {
    	constructor() {
    		this._queue = [];
    	}

    	enqueue(run, options) {
    		options = {
    			priority: 0,
    			...options
    		};

    		const element = {
    			priority: options.priority,
    			run
    		};

    		if (this.size && this._queue[this.size - 1].priority >= options.priority) {
    			this._queue.push(element);
    			return;
    		}

    		const index = lowerBound(this._queue, element, (a, b) => b.priority - a.priority);
    		this._queue.splice(index, 0, element);
    	}

    	dequeue() {
    		return this._queue.shift().run;
    	}

    	get size() {
    		return this._queue.length;
    	}
    }

    var pQueue = class PQueue extends EventEmitter {
    	constructor(options) {
    		super();

    		options = {
    			carryoverConcurrencyCount: false,
    			intervalCap: Infinity,
    			interval: 0,
    			concurrency: Infinity,
    			autoStart: true,
    			queueClass: PriorityQueue,
    			...options
    		};

    		if (!(typeof options.concurrency === 'number' && options.concurrency >= 1)) {
    			throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${options.concurrency}\` (${typeof options.concurrency})`);
    		}

    		if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {
    			throw new TypeError(`Expected \`intervalCap\` to be a number from 1 and up, got \`${options.intervalCap}\` (${typeof options.intervalCap})`);
    		}

    		if (!(Number.isFinite(options.interval) && options.interval >= 0)) {
    			throw new TypeError(`Expected \`interval\` to be a finite number >= 0, got \`${options.interval}\` (${typeof options.interval})`);
    		}

    		this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
    		this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;
    		this._intervalCount = 0;
    		this._intervalCap = options.intervalCap;
    		this._interval = options.interval;
    		this._intervalId = null;
    		this._intervalEnd = 0;
    		this._timeoutId = null;

    		this.queue = new options.queueClass(); // eslint-disable-line new-cap
    		this._queueClass = options.queueClass;
    		this._pendingCount = 0;
    		this._concurrency = options.concurrency;
    		this._isPaused = options.autoStart === false;
    		this._resolveEmpty = () => {};
    		this._resolveIdle = () => {};
    	}

    	get _doesIntervalAllowAnother() {
    		return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
    	}

    	get _doesConcurrentAllowAnother() {
    		return this._pendingCount < this._concurrency;
    	}

    	_next() {
    		this._pendingCount--;
    		this._tryToStartAnother();
    	}

    	_resolvePromises() {
    		this._resolveEmpty();
    		this._resolveEmpty = () => {};

    		if (this._pendingCount === 0) {
    			this._resolveIdle();
    			this._resolveIdle = () => {};
    		}
    	}

    	_onResumeInterval() {
    		this._onInterval();
    		this._initializeIntervalIfNeeded();
    		this._timeoutId = null;
    	}

    	_intervalPaused() {
    		const now = Date.now();

    		if (this._intervalId === null) {
    			const delay = this._intervalEnd - now;
    			if (delay < 0) {
    				// Act as the interval was done
    				// We don't need to resume it here,
    				// because it'll be resumed on line 160
    				this._intervalCount = (this._carryoverConcurrencyCount) ? this._pendingCount : 0;
    			} else {
    				// Act as the interval is pending
    				if (this._timeoutId === null) {
    					this._timeoutId = setTimeout(() => {
    						this._onResumeInterval();
    					}, delay);
    				}

    				return true;
    			}
    		}

    		return false;
    	}

    	_tryToStartAnother() {
    		if (this.queue.size === 0) {
    			// We can clear the interval ("pause")
    			// because we can redo it later ("resume")
    			clearInterval(this._intervalId);
    			this._intervalId = null;

    			this._resolvePromises();

    			return false;
    		}

    		if (!this._isPaused) {
    			const canInitializeInterval = !this._intervalPaused();
    			if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
    				this.emit('active');
    				this.queue.dequeue()();
    				if (canInitializeInterval) {
    					this._initializeIntervalIfNeeded();
    				}

    				return true;
    			}
    		}

    		return false;
    	}

    	_initializeIntervalIfNeeded() {
    		if (this._isIntervalIgnored || this._intervalId !== null) {
    			return;
    		}

    		this._intervalId = setInterval(() => this._onInterval(), this._interval);
    		this._intervalEnd = Date.now() + this._interval;
    	}

    	_onInterval() {
    		if (this._intervalCount === 0 && this._pendingCount === 0) {
    			clearInterval(this._intervalId);
    			this._intervalId = null;
    		}

    		this._intervalCount = (this._carryoverConcurrencyCount) ? this._pendingCount : 0;
    		while (this._tryToStartAnother()) {} // eslint-disable-line no-empty
    	}

    	async add(fn, options) {
    		return new Promise((resolve, reject) => {
    			const run = async () => {
    				this._pendingCount++;
    				this._intervalCount++;

    				try {
    					resolve(await fn());
    				} catch (error) {
    					reject(error);
    				}

    				this._next();
    			};

    			this.queue.enqueue(run, options);
    			this._tryToStartAnother();
    		});
    	}

    	async addAll(fns, options) {
    		return Promise.all(fns.map(fn => this.add(fn, options)));
    	}

    	start() {
    		if (!this._isPaused) {
    			return;
    		}

    		this._isPaused = false;
    		while (this._tryToStartAnother()) {} // eslint-disable-line no-empty
    	}

    	pause() {
    		this._isPaused = true;
    	}

    	clear() {
    		this.queue = new this._queueClass();
    	}

    	async onEmpty() {
    		// Instantly resolve if the queue is empty
    		if (this.queue.size === 0) {
    			return;
    		}

    		return new Promise(resolve => {
    			const existingResolve = this._resolveEmpty;
    			this._resolveEmpty = () => {
    				existingResolve();
    				resolve();
    			};
    		});
    	}

    	async onIdle() {
    		// Instantly resolve if none pending and if nothing else is queued
    		if (this._pendingCount === 0 && this.queue.size === 0) {
    			return;
    		}

    		return new Promise(resolve => {
    			const existingResolve = this._resolveIdle;
    			this._resolveIdle = () => {
    				existingResolve();
    				resolve();
    			};
    		});
    	}

    	get size() {
    		return this.queue.size;
    	}

    	get pending() {
    		return this._pendingCount;
    	}

    	get isPaused() {
    		return this._isPaused;
    	}
    };

    const DB_NAMESPACE_CHANNEL = "channel";
    const DB_NAMESPACE_OWNERS_HASH_TO_MULTISIG_ADDRESS = "ownersHashToMultisigAddress";
    const DB_NAMESPACE_APP_INSTANCE_ID_TO_MULTISIG_ADDRESS = "appInstanceIDToMultisigAddress";
    const DB_NAMESPACE_APP_INSTANCE_ID_TO_PROPOSED_APP_INSTANCE = "appInstanceIdToProposedAppInstance";
    const DB_NAMESPACE_ALL_COMMITMENTS = "allCommitments";
    const DB_NAMESPACE_APP_INSTANCE_ID_TO_APP_INSTANCE = "appInstanceIdToAppInstance";
    const DB_NAMESPACE_WITHDRAWALS = "multisigAddressToWithdrawalCommitment";
    var APP_INSTANCE_STATUS;
    (function (APP_INSTANCE_STATUS) {
        APP_INSTANCE_STATUS["INSTALLED"] = "installed";
        APP_INSTANCE_STATUS["PROPOSED"] = "proposed";
    })(APP_INSTANCE_STATUS || (APP_INSTANCE_STATUS = {}));

    class Store {
        constructor(storeService, storeKeyPrefix, networkContext) {
            this.storeService = storeService;
            this.storeKeyPrefix = storeKeyPrefix;
            this.networkContext = networkContext;
        }
        async getAllChannels() {
            const channels = {};
            const channelsJSON = ((await this.storeService.get(`${this.storeKeyPrefix}/${DB_NAMESPACE_CHANNEL}`)) || {});
            const sortedChannels = Object.entries(channelsJSON).sort((a, b) => b[1].createdAt || 0 - a[1].createdAt || 0);
            for (const [key, value] of sortedChannels) {
                channels[key] = StateChannel.fromJson(value);
            }
            return channels;
        }
        async getStateChannel(multisigAddress) {
            const stateChannelJson = await this.storeService.get(`${this.storeKeyPrefix}/${DB_NAMESPACE_CHANNEL}/${multisigAddress}`);
            if (!stateChannelJson) {
                throw new Error(NO_STATE_CHANNEL_FOR_MULTISIG_ADDR(stateChannelJson, multisigAddress));
            }
            const channel = StateChannel.fromJson(stateChannelJson);
            debugLog("Getting channel: ", channel);
            return channel;
        }
        async getMultisigAddressFromAppInstance(appInstanceId) {
            return this.storeService.get(`${this.storeKeyPrefix}/${DB_NAMESPACE_APP_INSTANCE_ID_TO_MULTISIG_ADDRESS}/${appInstanceId}`);
        }
        async saveStateChannel(stateChannel) {
            const ownersHash = hashOfOrderedPublicIdentifiers(stateChannel.userNeuteredExtendedKeys);
            debugLog("Saving channel: ", stateChannel);
            await this.storeService.set([
                {
                    key: `${this.storeKeyPrefix}/${DB_NAMESPACE_CHANNEL}/${stateChannel.multisigAddress}`,
                    value: stateChannel.toJson()
                },
                {
                    key: `${this.storeKeyPrefix}/${DB_NAMESPACE_OWNERS_HASH_TO_MULTISIG_ADDRESS}/${ownersHash}`,
                    value: stateChannel.multisigAddress
                }
            ]);
        }
        async saveFreeBalance(channel) {
            const freeBalance = channel.freeBalance;
            await this.storeService.set([
                {
                    key: `${this.storeKeyPrefix}/${DB_NAMESPACE_APP_INSTANCE_ID_TO_MULTISIG_ADDRESS}/${freeBalance.identityHash}`,
                    value: channel.multisigAddress
                }
            ]);
        }
        async saveAppInstanceState(appInstanceId, newState) {
            const channel = await this.getChannelFromAppInstanceID(appInstanceId);
            const updatedChannel = await channel.setState(appInstanceId, newState);
            await this.saveStateChannel(updatedChannel);
        }
        async saveRealizedProposedAppInstance(proposedAppInstance) {
            await this.storeService.set([
                {
                    key: `${this.storeKeyPrefix}/${DB_NAMESPACE_APP_INSTANCE_ID_TO_PROPOSED_APP_INSTANCE}/${proposedAppInstance.identityHash}`,
                    value: null
                },
                {
                    key: `${this.storeKeyPrefix}/${DB_NAMESPACE_APP_INSTANCE_ID_TO_APP_INSTANCE}/${proposedAppInstance.identityHash}`,
                    value: proposedAppInstance
                }
            ], true);
        }
        async addAppInstanceProposal(stateChannel, proposedAppInstance) {
            await this.storeService.set([
                {
                    key: `${this.storeKeyPrefix}/${DB_NAMESPACE_APP_INSTANCE_ID_TO_PROPOSED_APP_INSTANCE}/${proposedAppInstance.identityHash}`,
                    value: proposedAppInstance.toJson()
                },
                {
                    key: `${this.storeKeyPrefix}/${DB_NAMESPACE_APP_INSTANCE_ID_TO_MULTISIG_ADDRESS}/${proposedAppInstance.identityHash}`,
                    value: stateChannel.multisigAddress
                }
            ]);
        }
        async addVirtualAppInstanceProposal(proposedAppInstance) {
            await this.storeService.set([
                {
                    key: `${this.storeKeyPrefix}/${DB_NAMESPACE_APP_INSTANCE_ID_TO_PROPOSED_APP_INSTANCE}/${proposedAppInstance.identityHash}`,
                    value: proposedAppInstance.toJson()
                },
                {
                    key: `${this.storeKeyPrefix}/${DB_NAMESPACE_APP_INSTANCE_ID_TO_MULTISIG_ADDRESS}/${proposedAppInstance.identityHash}`,
                    value: getCreate2MultisigAddress([
                        proposedAppInstance.proposedToIdentifier,
                        proposedAppInstance.proposedByIdentifier
                    ], this.networkContext.ProxyFactory, this.networkContext.MinimumViableMultisig)
                }
            ]);
        }
        async removeAppInstanceProposal(appInstanceId) {
            await this.storeService.set([
                {
                    key: `${this.storeKeyPrefix}/${DB_NAMESPACE_APP_INSTANCE_ID_TO_PROPOSED_APP_INSTANCE}/${appInstanceId}`,
                    value: null
                },
                {
                    key: `${this.storeKeyPrefix}/${DB_NAMESPACE_APP_INSTANCE_ID_TO_MULTISIG_ADDRESS}/${appInstanceId}`,
                    value: null
                }
            ], true);
        }
        async getMultisigAddressFromOwnersHash(ownersHash) {
            return await this.storeService.get(`${this.storeKeyPrefix}/${DB_NAMESPACE_OWNERS_HASH_TO_MULTISIG_ADDRESS}/${ownersHash}`);
        }
        async getProposedAppInstances() {
            const proposedAppInstancesJson = (await this.storeService.get([
                this.storeKeyPrefix,
                DB_NAMESPACE_APP_INSTANCE_ID_TO_PROPOSED_APP_INSTANCE
            ].join("/")));
            if (!proposedAppInstancesJson) {
                return [];
            }
            return Array.from(Object.values(proposedAppInstancesJson)).map(proposedAppInstanceJson => {
                return AppInstanceProposal.fromJson(proposedAppInstanceJson);
            });
        }
        async getAppInstanceProposal(appInstanceId) {
            const appInstanceProposal = await this.storeService.get(`${this.storeKeyPrefix}/${DB_NAMESPACE_APP_INSTANCE_ID_TO_PROPOSED_APP_INSTANCE}/${appInstanceId}`);
            if (!appInstanceProposal) {
                throw new Error(NO_PROPOSED_APP_INSTANCE_FOR_APP_INSTANCE_ID(appInstanceId));
            }
            return AppInstanceProposal.fromJson(appInstanceProposal);
        }
        async getChannelFromAppInstanceID(appInstanceId) {
            const multisigAddress = await this.getMultisigAddressFromAppInstance(appInstanceId);
            if (!multisigAddress) {
                throw new Error(NO_MULTISIG_FOR_APP_INSTANCE_ID);
            }
            return await this.getStateChannel(multisigAddress);
        }
        async getWithdrawalCommitment(multisigAddress) {
            return this.storeService.get([this.storeKeyPrefix, DB_NAMESPACE_WITHDRAWALS, multisigAddress].join("/"));
        }
        async storeWithdrawalCommitment(multisigAddress, commitment) {
            return this.storeService.set([
                {
                    key: [
                        this.storeKeyPrefix,
                        DB_NAMESPACE_WITHDRAWALS,
                        multisigAddress
                    ].join("/"),
                    value: commitment
                }
            ]);
        }
        async setCommitment(args, commitment) {
            return this.storeService.set([
                {
                    key: [
                        this.storeKeyPrefix,
                        DB_NAMESPACE_ALL_COMMITMENTS,
                        utils.solidityKeccak256(["address", "uint256", "bytes"], [commitment.to, commitment.value, commitment.data])
                    ].join("/"),
                    value: args.concat([commitment])
                }
            ]);
        }
        async getAppInstance(appInstanceId) {
            const channel = await this.getChannelFromAppInstanceID(appInstanceId);
            return channel.getAppInstance(appInstanceId);
        }
    }

    class RequestHandler {
        constructor(publicIdentifier, incoming, outgoing, storeService, messagingService, instructionExecutor, networkContext, provider, wallet, storeKeyPrefix, blocksNeededForConfirmation) {
            this.publicIdentifier = publicIdentifier;
            this.incoming = incoming;
            this.outgoing = outgoing;
            this.storeService = storeService;
            this.messagingService = messagingService;
            this.instructionExecutor = instructionExecutor;
            this.networkContext = networkContext;
            this.provider = provider;
            this.wallet = wallet;
            this.blocksNeededForConfirmation = blocksNeededForConfirmation;
            this.methods = new Map();
            this.events = new Map();
            this.shardedQueues = new Map();
            this.store = new Store(storeService, storeKeyPrefix, networkContext);
        }
        injectRouter(router) {
            this.router = router;
            this.mapPublicApiMethods();
            this.mapEventHandlers();
        }
        async callMethod(method, req) {
            const result = {
                type: req.type,
                requestId: req.requestId,
                result: await this.methods.get(method)(this, req.params)
            };
            return result;
        }
        mapPublicApiMethods() {
            for (const methodName in methodNameToImplementation) {
                this.methods.set(methodName, methodNameToImplementation[methodName]);
                this.incoming.on(methodName, async (req) => {
                    const res = {
                        type: req.type,
                        requestId: req.requestId,
                        result: await this.methods.get(methodName)(this, req.params)
                    };
                    this.router.emit(req.methodName, res, "outgoing");
                });
            }
        }
        mapEventHandlers() {
            for (const eventName of Object.values(NODE_EVENTS)) {
                this.events.set(eventName, eventNameToImplementation[eventName]);
            }
        }
        async callEvent(event, msg) {
            const controllerExecutionMethod = this.events.get(event);
            const controllerCount = this.router.eventListenerCount(event);
            if (!controllerExecutionMethod && controllerCount === 0) {
                if (event === NODE_EVENTS.DEPOSIT_CONFIRMED) {
                    log.info(`No event handler for counter depositing into channel: ${JSON.stringify(msg, undefined, 4)}`);
                }
                else {
                    throw new Error(`Recent ${event} which has no event handler`);
                }
            }
            if (controllerExecutionMethod) {
                await controllerExecutionMethod(this, msg);
            }
            this.router.emit(event, msg);
        }
        async isLegacyEvent(event) {
            return this.events.has(event);
        }
        getShardedQueue(shardKey) {
            let shardedQueue;
            if (!this.shardedQueues.has(shardKey)) {
                shardedQueue = new pQueue({ concurrency: 1 });
                this.shardedQueues.set(shardKey, shardedQueue);
            }
            return this.shardedQueues.get(shardKey);
        }
        async getSigner() {
            try {
                const signer = await this.provider.getSigner();
                await signer.getAddress();
                return signer;
            }
            catch (e) {
                if (e.code === "UNSUPPORTED_OPERATION") {
                    return this.wallet;
                }
                throw e;
            }
        }
        async getSignerAddress() {
            const signer = await this.getSigner();
            return await signer.getAddress();
        }
    }

    class GetAppInstanceDetailsController extends NodeController {
        async executeMethodImplementation(requestHandler, params) {
            const { store } = requestHandler;
            const { appInstanceId } = params;
            if (!appInstanceId) {
                throw new Error(NO_APP_INSTANCE_ID_TO_GET_DETAILS);
            }
            return {
                appInstance: (await store.getAppInstance(appInstanceId)).toJson()
            };
        }
    }
    GetAppInstanceDetailsController.methodName = Node.MethodName.GET_APP_INSTANCE_DETAILS;
    __decorate([
        dist_7("chan_getAppInstance"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [RequestHandler, Object]),
        __metadata("design:returntype", Promise)
    ], GetAppInstanceDetailsController.prototype, "executeMethodImplementation", null);

    class GetFreeBalanceController extends NodeController {
        constructor() {
            super(...arguments);
            this.executeMethod = super.executeMethod;
        }
        async executeMethodImplementation(requestHandler, params) {
            const { store } = requestHandler;
            const { multisigAddress, tokenAddress: tokenAddressParam } = params;
            const tokenAddress = tokenAddressParam || CONVENTION_FOR_ETH_TOKEN_ADDRESS;
            if (!multisigAddress) {
                throw new Error(`${NO_STATE_CHANNEL_FOR_MULTISIG_ADDR}`);
            }
            const stateChannel = await store.getStateChannel(multisigAddress);
            const freeBalanceState = deserializeFreeBalanceState(stateChannel
                .freeBalance.state);
            if (!freeBalanceState.balancesIndexedByToken[tokenAddress]) {
                throw new Error(NO_FREE_BALANCE_EXISTS(tokenAddress));
            }
            return convertCoinTransfersToCoinTransfersMap(freeBalanceState.balancesIndexedByToken[tokenAddress]);
        }
    }
    GetFreeBalanceController.methodName = Node.MethodName.GET_FREE_BALANCE_STATE;
    __decorate([
        dist_7("chan_getFreeBalanceState"),
        __metadata("design:type", Object)
    ], GetFreeBalanceController.prototype, "executeMethod", void 0);

    class GetStateController extends NodeController {
        async executeMethodImplementation(requestHandler, params) {
            const { store } = requestHandler;
            const { appInstanceId } = params;
            if (!appInstanceId) {
                throw new Error(NO_APP_INSTANCE_ID_FOR_GET_STATE);
            }
            const appInstance = await store.getAppInstance(appInstanceId);
            return {
                state: appInstance.state
            };
        }
    }
    GetStateController.methodName = Node.MethodName.GET_STATE;
    __decorate([
        dist_7("chan_getState"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [RequestHandler, Object]),
        __metadata("design:returntype", Promise)
    ], GetStateController.prototype, "executeMethodImplementation", null);

    async function installVirtual(store, instructionExecutor, params) {
        const { appInstanceId } = params;
        if (!appInstanceId || !appInstanceId.trim()) {
            throw new Error(NO_APP_INSTANCE_ID_TO_INSTALL);
        }
        const proposal = await store.getAppInstanceProposal(appInstanceId);
        let updatedStateChannelsMap;
        try {
            updatedStateChannelsMap = await instructionExecutor.initiateProtocol(Protocol.InstallVirtualApp, new Map(Object.entries(await store.getAllChannels())), {
                initiatorXpub: proposal.proposedToIdentifier,
                responderXpub: proposal.proposedByIdentifier,
                intermediaryXpub: proposal.intermediaries[0],
                defaultTimeout: proposal.timeout.toNumber(),
                appInterface: Object.assign({ addr: proposal.appDefinition }, proposal.abiEncodings),
                initialState: proposal.initialState,
                initiatorBalanceDecrement: proposal.initiatorDeposit,
                responderBalanceDecrement: proposal.responderDeposit,
                tokenAddress: CONVENTION_FOR_ETH_TOKEN_ADDRESS,
                outcomeType: proposal.outcomeType
            });
        }
        catch (e) {
            throw new Error(`Node Error: ${VIRTUAL_APP_INSTALLATION_FAIL}\nStack Trace: ${e.stack}`);
        }
        updatedStateChannelsMap.forEach(async (stateChannel) => await store.saveStateChannel(stateChannel));
        await store.saveRealizedProposedAppInstance(proposal);
        return proposal;
    }

    class InstallVirtualController extends NodeController {
        constructor() {
            super(...arguments);
            this.executeMethod = super.executeMethod;
        }
        async enqueueByShard(requestHandler, params) {
            const { store, publicIdentifier } = requestHandler;
            const { appInstanceId } = params;
            const multisigAddress = await store.getMultisigAddressFromOwnersHash(hashOfOrderedPublicIdentifiers([
                publicIdentifier,
                params.intermediaries[0]
            ]));
            const queues = [requestHandler.getShardedQueue(multisigAddress)];
            try {
                const metachannel = await store.getChannelFromAppInstanceID(appInstanceId);
                queues.push(requestHandler.getShardedQueue(metachannel.multisigAddress));
            }
            catch (e) {
                if (e !== NO_MULTISIG_FOR_APP_INSTANCE_ID)
                    throw e;
            }
            return queues;
        }
        async beforeExecution(requestHandler, params) {
            const { store, publicIdentifier } = requestHandler;
            const { intermediaries } = params;
            if (intermediaries.length === 0) {
                throw new Error("Cannot install virtual app: you did not provide an intermediary.");
            }
            if (intermediaries.length > 1) {
                throw new Error("Cannot install virtual app: Node only support single-hop virtual apps at the moment.");
            }
            const stateChannelWithIntermediary = await getStateChannelWithOwners(publicIdentifier, intermediaries[0], store);
            if (!stateChannelWithIntermediary) {
                throw new Error("Cannot install virtual app: you do not have a channel with the intermediary provided.");
            }
            if (!stateChannelWithIntermediary.freeBalance) {
                throw new Error("Cannot install virtual app: channel with intermediary has no free balance app instance installed.");
            }
        }
        async executeMethodImplementation(requestHandler, params) {
            const { store, instructionExecutor, publicIdentifier, messagingService } = requestHandler;
            const { appInstanceId } = params;
            await store.getAppInstanceProposal(appInstanceId);
            const appInstanceProposal = await installVirtual(store, instructionExecutor, params);
            const installVirtualApprovalMsg = {
                from: publicIdentifier,
                type: NODE_EVENTS.INSTALL_VIRTUAL,
                data: {
                    params: {
                        appInstanceId
                    }
                }
            };
            await messagingService.send(appInstanceProposal.proposedByIdentifier, installVirtualApprovalMsg);
            return {
                appInstance: (await store.getAppInstance(appInstanceId)).toJson()
            };
        }
    }
    InstallVirtualController.methodName = Node.MethodName.INSTALL_VIRTUAL;
    __decorate([
        dist_7("chan_installVirtual"),
        __metadata("design:type", Object)
    ], InstallVirtualController.prototype, "executeMethod", void 0);

    async function install(store, instructionExecutor, params) {
        const { appInstanceId } = params;
        if (!appInstanceId || !appInstanceId.trim()) {
            throw new Error(NO_APP_INSTANCE_ID_TO_INSTALL);
        }
        const proposal = await store.getAppInstanceProposal(appInstanceId);
        const stateChannel = await store.getChannelFromAppInstanceID(appInstanceId);
        const stateChannelsMap = await instructionExecutor.initiateProtocol(Protocol.Install, new Map([
            [stateChannel.multisigAddress, stateChannel]
        ]), {
            initiatorXpub: proposal.proposedToIdentifier,
            responderXpub: proposal.proposedByIdentifier,
            initiatorBalanceDecrement: proposal.initiatorDeposit,
            responderBalanceDecrement: proposal.responderDeposit,
            multisigAddress: stateChannel.multisigAddress,
            participants: stateChannel.getNextSigningKeys(),
            initialState: proposal.initialState,
            appInterface: Object.assign({}, proposal.abiEncodings, { addr: proposal.appDefinition }),
            defaultTimeout: proposal.timeout.toNumber(),
            outcomeType: proposal.outcomeType,
            initiatorDepositTokenAddress: proposal.initiatorDepositTokenAddress,
            responderDepositTokenAddress: proposal.responderDepositTokenAddress
        });
        await store.saveStateChannel(stateChannelsMap.get(stateChannel.multisigAddress));
        await store.saveRealizedProposedAppInstance(proposal);
        return proposal;
    }

    class InstallController extends NodeController {
        constructor() {
            super(...arguments);
            this.executeMethod = super.executeMethod;
        }
        async enqueueByShard(requestHandler, params) {
            const { store } = requestHandler;
            const { appInstanceId } = params;
            const sc = await store.getChannelFromAppInstanceID(appInstanceId);
            return [
                requestHandler.getShardedQueue(await store.getMultisigAddressFromAppInstance(sc.multisigAddress))
            ];
        }
        async executeMethodImplementation(requestHandler, params) {
            const { store, instructionExecutor, publicIdentifier, messagingService } = requestHandler;
            const [responderAddress] = await getPeersAddressFromAppInstanceID(publicIdentifier, store, params.appInstanceId);
            const appInstanceProposal = await install(store, instructionExecutor, params);
            const installApprovalMsg = {
                from: publicIdentifier,
                type: NODE_EVENTS.INSTALL,
                data: { params }
            };
            await messagingService.send(responderAddress, installApprovalMsg);
            return {
                appInstance: (await store.getAppInstance(appInstanceProposal.identityHash)).toJson()
            };
        }
    }
    InstallController.methodName = Node.MethodName.INSTALL;
    __decorate([
        dist_7("chan_install"),
        __metadata("design:type", Object)
    ], InstallController.prototype, "executeMethod", void 0);

    class ProposeInstallVirtualController extends NodeController {
        constructor() {
            super(...arguments);
            this.executeMethod = super.executeMethod;
        }
        async enqueueByShard(requestHandler, params) {
            const { store, publicIdentifier } = requestHandler;
            const { proposedToIdentifier } = params;
            const multisigAddress = await store.getMultisigAddressFromOwnersHash(hashOfOrderedPublicIdentifiers([
                publicIdentifier,
                params.intermediaries[0]
            ]));
            const queues = [requestHandler.getShardedQueue(multisigAddress)];
            try {
                const metachannelAddress = await store.getMultisigAddressFromOwnersHash(hashOfOrderedPublicIdentifiers([publicIdentifier, proposedToIdentifier]));
                queues.push(requestHandler.getShardedQueue(metachannelAddress));
            }
            catch (e) {
                if (e !== NO_MULTISIG_FOR_APP_INSTANCE_ID)
                    throw e;
            }
            return queues;
        }
        async executeMethodImplementation(requestHandler, params) {
            const { store, publicIdentifier, messagingService, networkContext } = requestHandler;
            const { initialState } = params;
            if (!initialState) {
                throw new Error(NULL_INITIAL_STATE_FOR_PROPOSAL);
            }
            const appInstanceId = await createProposedVirtualAppInstance(publicIdentifier, store, params, networkContext);
            const proposalMsg = {
                from: publicIdentifier,
                type: NODE_EVENTS.PROPOSE_INSTALL_VIRTUAL,
                data: {
                    params,
                    appInstanceId,
                    proposedByIdentifier: publicIdentifier
                }
            };
            const nextNodeAddress = getNextNodeAddress(publicIdentifier, params.intermediaries, params.proposedToIdentifier);
            await messagingService.send(nextNodeAddress, proposalMsg);
            return {
                appInstanceId
            };
        }
    }
    ProposeInstallVirtualController.methodName = Node.MethodName.PROPOSE_INSTALL_VIRTUAL;
    __decorate([
        dist_7("chan_proposeInstallVirtual"),
        __metadata("design:type", Object)
    ], ProposeInstallVirtualController.prototype, "executeMethod", void 0);

    async function createProposedAppInstance(myIdentifier, store, params) {
        const channel = await getStateChannelWithOwners(myIdentifier, params.proposedToIdentifier, store);
        const appInstanceProposal = new AppInstanceProposal(Object.assign({}, params, { proposedByIdentifier: myIdentifier, initiatorDepositTokenAddress: params.initiatorDepositTokenAddress || CONVENTION_FOR_ETH_TOKEN_ADDRESS, responderDepositTokenAddress: params.responderDepositTokenAddress || CONVENTION_FOR_ETH_TOKEN_ADDRESS }), channel);
        await store.addAppInstanceProposal(channel, appInstanceProposal);
        return appInstanceProposal.identityHash;
    }

    class ProposeInstallController extends NodeController {
        constructor() {
            super(...arguments);
            this.executeMethod = super.executeMethod;
        }
        async enqueueByShard(requestHandler, params) {
            const { store, publicIdentifier } = requestHandler;
            const { initialState } = params;
            if (!initialState) {
                throw new Error(NULL_INITIAL_STATE_FOR_PROPOSAL);
            }
            const { proposedToIdentifier, initiatorDeposit, responderDeposit, initiatorDepositTokenAddress: initiatorDepositTokenAddressParam, responderDepositTokenAddress: responderDepositTokenAddressParam } = params;
            const myIdentifier = publicIdentifier;
            const multisigAddress = await store.getMultisigAddressFromOwnersHash(hashOfOrderedPublicIdentifiers([myIdentifier, proposedToIdentifier]));
            if (!multisigAddress) {
                throw new Error(NO_CHANNEL_BETWEEN_NODES(myIdentifier, proposedToIdentifier));
            }
            const initiatorDepositTokenAddress = initiatorDepositTokenAddressParam || CONVENTION_FOR_ETH_TOKEN_ADDRESS;
            const responderDepositTokenAddress = responderDepositTokenAddressParam || CONVENTION_FOR_ETH_TOKEN_ADDRESS;
            const stateChannel = await store.getStateChannel(multisigAddress);
            assertSufficientFundsWithinFreeBalance(stateChannel, myIdentifier, initiatorDepositTokenAddress, initiatorDeposit);
            assertSufficientFundsWithinFreeBalance(stateChannel, proposedToIdentifier, responderDepositTokenAddress, responderDeposit);
            params.initiatorDepositTokenAddress = initiatorDepositTokenAddress;
            params.responderDepositTokenAddress = responderDepositTokenAddress;
            return [requestHandler.getShardedQueue(multisigAddress)];
        }
        async executeMethodImplementation(requestHandler, params) {
            const { store, publicIdentifier, messagingService } = requestHandler;
            const { proposedToIdentifier } = params;
            const appInstanceId = await createProposedAppInstance(publicIdentifier, store, params);
            const proposalMsg = {
                from: publicIdentifier,
                type: NODE_EVENTS.PROPOSE_INSTALL,
                data: { params, appInstanceId }
            };
            await messagingService.send(proposedToIdentifier, proposalMsg);
            return {
                appInstanceId
            };
        }
    }
    ProposeInstallController.methodName = Node.MethodName.PROPOSE_INSTALL;
    __decorate([
        dist_7("chan_proposeInstall"),
        __metadata("design:type", Object)
    ], ProposeInstallController.prototype, "executeMethod", void 0);
    function assertSufficientFundsWithinFreeBalance(channel, publicIdentifier, tokenAddress, depositAmount) {
        const freeBalanceForToken = getBalancesFromFreeBalanceAppInstance(channel.freeBalance, tokenAddress)[xkeyKthAddress(publicIdentifier, 0)];
        if (freeBalanceForToken.lt(depositAmount)) {
            throw new Error(INSUFFICIENT_FUNDS_IN_FREE_BALANCE_FOR_ASSET(publicIdentifier, channel.multisigAddress, tokenAddress, freeBalanceForToken, depositAmount));
        }
    }

    async function rejectInstallVirtualController(requestHandler, params) {
        const { store, messagingService, publicIdentifier } = requestHandler;
        const { appInstanceId } = params;
        const proposal = await store.getAppInstanceProposal(appInstanceId);
        await store.removeAppInstanceProposal(appInstanceId);
        const rejectInstallVirtualMsg = {
            from: publicIdentifier,
            type: NODE_EVENTS.REJECT_INSTALL_VIRTUAL,
            data: {
                appInstanceId
            }
        };
        await messagingService.send(proposal.proposedByIdentifier, rejectInstallVirtualMsg);
        return {};
    }

    class RejectInstallController extends NodeController {
        async enqueueByShard(requestHandler, params) {
            const { store } = requestHandler;
            const { appInstanceId } = params;
            return [
                requestHandler.getShardedQueue(await store.getMultisigAddressFromAppInstance(appInstanceId))
            ];
        }
        async executeMethodImplementation(requestHandler, params) {
            const { store, messagingService, publicIdentifier } = requestHandler;
            const { appInstanceId } = params;
            const appInstanceProposal = await store.getAppInstanceProposal(appInstanceId);
            if (appInstanceProposal.intermediaries) {
                return rejectInstallVirtualController(requestHandler, params);
            }
            await store.removeAppInstanceProposal(appInstanceId);
            const rejectProposalMsg = {
                from: publicIdentifier,
                type: NODE_EVENTS.REJECT_INSTALL,
                data: {
                    appInstanceId
                }
            };
            await messagingService.send(appInstanceProposal.proposedByIdentifier, rejectProposalMsg);
            return {};
        }
    }
    RejectInstallController.methodName = Node.MethodName.REJECT_INSTALL;
    __decorate([
        dist_7("chan_rejectInstall"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [RequestHandler, Object]),
        __metadata("design:returntype", Promise)
    ], RejectInstallController.prototype, "executeMethodImplementation", null);

    class TakeActionController extends NodeController {
        constructor() {
            super(...arguments);
            this.executeMethod = super.executeMethod;
        }
        async enqueueByShard(requestHandler, params) {
            const { store } = requestHandler;
            const { appInstanceId } = params;
            return [
                requestHandler.getShardedQueue(await store.getMultisigAddressFromAppInstance(appInstanceId))
            ];
        }
        async beforeExecution(requestHandler, params) {
            const { store } = requestHandler;
            const { appInstanceId, action } = params;
            if (!appInstanceId) {
                throw new Error(NO_APP_INSTANCE_FOR_TAKE_ACTION);
            }
            const appInstance = await store.getAppInstance(appInstanceId);
            try {
                appInstance.encodeAction(action);
            }
            catch (e) {
                if (e.code === errors.INVALID_ARGUMENT) {
                    throw new Error(`${IMPROPERLY_FORMATTED_STRUCT}: ${e}`);
                }
                throw new Error(STATE_OBJECT_NOT_ENCODABLE);
            }
        }
        async executeMethodImplementation(requestHandler, params) {
            const { store, publicIdentifier, instructionExecutor } = requestHandler;
            const { appInstanceId, action } = params;
            const sc = await store.getChannelFromAppInstanceID(appInstanceId);
            const responderXpub = getCounterpartyAddress(publicIdentifier, sc.userNeuteredExtendedKeys);
            await runTakeActionProtocol(appInstanceId, store, instructionExecutor, publicIdentifier, responderXpub, action);
            const appInstance = await store.getAppInstance(appInstanceId);
            return { newState: appInstance.state };
        }
        async afterExecution(requestHandler, params) {
            const { store, router, publicIdentifier } = requestHandler;
            const { appInstanceId, action } = params;
            const appInstance = await store.getAppInstance(appInstanceId);
            const msg = {
                from: publicIdentifier,
                type: NODE_EVENTS.UPDATE_STATE,
                data: { appInstanceId, action, newState: appInstance.state }
            };
            await router.emit(msg.type, msg, "outgoing");
        }
    }
    TakeActionController.methodName = Node.MethodName.TAKE_ACTION;
    __decorate([
        dist_7("chan_takeAction"),
        __metadata("design:type", Object)
    ], TakeActionController.prototype, "executeMethod", void 0);
    async function runTakeActionProtocol(appIdentityHash, store, instructionExecutor, initiatorXpub, responderXpub, action) {
        const stateChannel = await store.getChannelFromAppInstanceID(appIdentityHash);
        let stateChannelsMap;
        try {
            stateChannelsMap = await instructionExecutor.initiateProtocol(Protocol.TakeAction, new Map([
                [stateChannel.multisigAddress, stateChannel]
            ]), {
                initiatorXpub,
                responderXpub,
                appIdentityHash,
                action,
                multisigAddress: stateChannel.multisigAddress
            });
        }
        catch (e) {
            if (e.toString().indexOf("VM Exception") !== -1) {
                throw new Error(`${INVALID_ACTION}: ${e}`);
            }
            throw e;
        }
        const updatedStateChannel = stateChannelsMap.get(stateChannel.multisigAddress);
        await store.saveStateChannel(updatedStateChannel);
        return {};
    }

    async function uninstallVirtualAppInstanceFromChannel(store, instructionExecutor, provider, initiatorXpub, responderXpub, intermediaryXpub, appInstanceId) {
        const stateChannel = await store.getChannelFromAppInstanceID(appInstanceId);
        const appInstance = stateChannel.getAppInstance(appInstanceId);
        const currentChannels = new Map(Object.entries(await store.getAllChannels()));
        const stateChannelsMap = await instructionExecutor.initiateProtocol(Protocol.UninstallVirtualApp, currentChannels, {
            initiatorXpub,
            responderXpub,
            intermediaryXpub,
            targetOutcome: await appInstance.computeOutcome(appInstance.state, provider),
            targetAppIdentityHash: appInstance.identityHash
        });
        stateChannelsMap.forEach(async (stateChannel) => await store.saveStateChannel(stateChannel));
    }

    class UninstallVirtualController extends NodeController {
        constructor() {
            super(...arguments);
            this.executeMethod = super.executeMethod;
        }
        async enqueueByShard(requestHandler, params) {
            const { store, publicIdentifier } = requestHandler;
            const { appInstanceId } = params;
            const multisigAddressForStateChannelWithIntermediary = await store.getMultisigAddressFromOwnersHash(hashOfOrderedPublicIdentifiers([
                params.intermediaryIdentifier,
                publicIdentifier
            ]));
            const stateChannelWithResponding = await store.getChannelFromAppInstanceID(appInstanceId);
            return [
                requestHandler.getShardedQueue(stateChannelWithResponding.multisigAddress),
                requestHandler.getShardedQueue(multisigAddressForStateChannelWithIntermediary)
            ];
        }
        async beforeExecution(requestHandler, params) {
            const { store } = requestHandler;
            const { appInstanceId } = params;
            const stateChannel = await store.getChannelFromAppInstanceID(appInstanceId);
            if (!stateChannel.hasAppInstance(appInstanceId)) {
                throw new Error(APP_ALREADY_UNINSTALLED(appInstanceId));
            }
        }
        async executeMethodImplementation(requestHandler, params) {
            const { store, instructionExecutor, publicIdentifier, provider } = requestHandler;
            const { appInstanceId, intermediaryIdentifier } = params;
            if (!appInstanceId) {
                throw new Error(NO_APP_INSTANCE_ID_TO_UNINSTALL);
            }
            const stateChannel = await store.getChannelFromAppInstanceID(appInstanceId);
            if (!stateChannel.hasAppInstance(appInstanceId)) {
                throw new Error(APP_ALREADY_UNINSTALLED(appInstanceId));
            }
            const to = getCounterpartyAddress(publicIdentifier, stateChannel.userNeuteredExtendedKeys);
            await uninstallVirtualAppInstanceFromChannel(store, instructionExecutor, provider, publicIdentifier, to, intermediaryIdentifier, appInstanceId);
            return {};
        }
    }
    UninstallVirtualController.methodName = Node.MethodName.UNINSTALL_VIRTUAL;
    __decorate([
        dist_7(Node.RpcMethodName.UNINSTALL_VIRTUAL),
        __metadata("design:type", Object)
    ], UninstallVirtualController.prototype, "executeMethod", void 0);

    async function uninstallAppInstanceFromChannel(store, instructionExecutor, initiatorXpub, responderXpub, appInstanceId) {
        const stateChannel = await store.getChannelFromAppInstanceID(appInstanceId);
        const appInstance = stateChannel.getAppInstance(appInstanceId);
        const stateChannelsMap = await instructionExecutor.initiateProtocol(Protocol.Uninstall, new Map(Object.entries(await store.getAllChannels())), {
            initiatorXpub,
            responderXpub,
            multisigAddress: stateChannel.multisigAddress,
            appIdentityHash: appInstance.identityHash
        });
        await store.saveStateChannel(stateChannelsMap.get(stateChannel.multisigAddress));
    }

    class UninstallController extends NodeController {
        constructor() {
            super(...arguments);
            this.executeMethod = super.executeMethod;
        }
        async enqueueByShard(requestHandler, params) {
            const { store } = requestHandler;
            const { appInstanceId } = params;
            const sc = await store.getChannelFromAppInstanceID(appInstanceId);
            if (sc.freeBalance.identityHash === appInstanceId) {
                throw new Error(CANNOT_UNINSTALL_FREE_BALANCE(sc.multisigAddress));
            }
            return [
                requestHandler.getShardedQueue(await store.getMultisigAddressFromAppInstance(sc.multisigAddress))
            ];
        }
        async beforeExecution(requestHandler, params) {
            const { store } = requestHandler;
            const { appInstanceId } = params;
            const stateChannel = await store.getChannelFromAppInstanceID(appInstanceId);
            if (!stateChannel.hasAppInstance(appInstanceId)) {
                throw new Error(APP_ALREADY_UNINSTALLED(appInstanceId));
            }
        }
        async executeMethodImplementation(requestHandler, params) {
            const { store, instructionExecutor, publicIdentifier } = requestHandler;
            const { appInstanceId } = params;
            if (!appInstanceId) {
                throw new Error(NO_APP_INSTANCE_ID_TO_UNINSTALL);
            }
            const stateChannel = await store.getChannelFromAppInstanceID(appInstanceId);
            if (!stateChannel.hasAppInstance(appInstanceId)) {
                throw new Error(APP_ALREADY_UNINSTALLED(appInstanceId));
            }
            const to = getCounterpartyAddress(publicIdentifier, stateChannel.userNeuteredExtendedKeys);
            await uninstallAppInstanceFromChannel(store, instructionExecutor, publicIdentifier, to, appInstanceId);
            return { appInstanceId };
        }
    }
    UninstallController.methodName = Node.MethodName.UNINSTALL;
    __decorate([
        dist_7("chan_uninstall"),
        __metadata("design:type", Object)
    ], UninstallController.prototype, "executeMethod", void 0);

    class UpdateStateController extends NodeController {
        async enqueueByShard(requestHandler, params) {
            const { store } = requestHandler;
            const { appInstanceId } = params;
            return [
                requestHandler.getShardedQueue(await store.getMultisigAddressFromAppInstance(appInstanceId))
            ];
        }
        async beforeExecution(requestHandler, params) {
            const { store } = requestHandler;
            const { appInstanceId, newState } = params;
            if (!appInstanceId) {
                throw new Error(NO_APP_INSTANCE_FOR_TAKE_ACTION);
            }
            const appInstance = await store.getAppInstance(appInstanceId);
            try {
                appInstance.encodeState(newState);
            }
            catch (e) {
                if (e.code === errors.INVALID_ARGUMENT) {
                    throw new Error(`${IMPROPERLY_FORMATTED_STRUCT}: ${e}`);
                }
                throw new Error(STATE_OBJECT_NOT_ENCODABLE);
            }
        }
        async executeMethodImplementation(requestHandler, params) {
            const { store, publicIdentifier, instructionExecutor } = requestHandler;
            const { appInstanceId, newState } = params;
            const sc = await store.getChannelFromAppInstanceID(appInstanceId);
            const responderXpub = getCounterpartyAddress(publicIdentifier, sc.userNeuteredExtendedKeys);
            await runUpdateStateProtocol(appInstanceId, store, instructionExecutor, publicIdentifier, responderXpub, newState);
            return { newState };
        }
    }
    UpdateStateController.methodName = Node.MethodName.UPDATE_STATE;
    async function runUpdateStateProtocol(appIdentityHash, store, instructionExecutor, initiatorXpub, responderXpub, newState) {
        const stateChannel = await store.getChannelFromAppInstanceID(appIdentityHash);
        const stateChannelsMap = await instructionExecutor.initiateProtocol(Protocol.Update, new Map([
            [stateChannel.multisigAddress, stateChannel]
        ]), {
            initiatorXpub,
            responderXpub,
            appIdentityHash,
            newState,
            multisigAddress: stateChannel.multisigAddress
        });
        const sc = stateChannelsMap.get(stateChannel.multisigAddress);
        await store.saveStateChannel(sc);
    }

    class GetProposedAppInstancesController extends NodeController {
        async executeMethodImplementation(requestHandler) {
            return {
                appInstances: await requestHandler.store.getProposedAppInstances()
            };
        }
    }
    GetProposedAppInstancesController.methodName = Node.MethodName.GET_PROPOSED_APP_INSTANCES;
    __decorate([
        dist_7("chan_getProposedAppInstances"),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [RequestHandler]),
        __metadata("design:returntype", Promise)
    ], GetProposedAppInstancesController.prototype, "executeMethodImplementation", null);

    class GetProposedAppInstanceController extends NodeController {
        async executeMethodImplementation(requestHandler, params) {
            return {
                appInstance: await requestHandler.store.getAppInstanceProposal(params.appInstanceId)
            };
        }
    }
    GetProposedAppInstanceController.methodName = Node.MethodName.GET_PROPOSED_APP_INSTANCE;

    var abi$6=[{constant:false,inputs:[{name:"_mastercopy",type:"address"},{name:"initializer",type:"bytes"},{name:"saltNonce",type:"uint256"}],name:"createProxyWithNonce",outputs:[{name:"proxy",type:"address"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"proxyCreationCode",outputs:[{name:"",type:"bytes"}],payable:false,stateMutability:"pure",type:"function"},{constant:false,inputs:[{name:"masterCopy",type:"address"},{name:"data",type:"bytes"}],name:"createProxy",outputs:[{name:"proxy",type:"address"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"proxyRuntimeCode",outputs:[{name:"",type:"bytes"}],payable:false,stateMutability:"pure",type:"function"},{anonymous:false,inputs:[{indexed:false,name:"proxy",type:"address"}],name:"ProxyCreation",type:"event"}];var evm$6={bytecode:{linkReferences:{},object:"608060405234801561001057600080fd5b506108e2806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631688f0b91461005157806353e5d9351461017657806361b69abd146101f9578063addacc0f14610314575b600080fd5b6101346004803603606081101561006757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156100a457600080fd5b8201836020820111156100b657600080fd5b803590602001918460018302840111640100000000831117156100d857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610397565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61017e610520565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101be5780820151818401526020810190506101a3565b50505050905090810190601f1680156101eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102d26004803603604081101561020f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561024c57600080fd5b82018360208201111561025e57600080fd5b8035906020019184600183028401116401000000008311171561028057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061054b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61031c61063e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035c578082015181840152602081019050610341565b50505050905090810190601f1680156103895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60008083805190602001208360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012090506060604051806020016103e490610669565b6020820181038252601f19601f820116604052508673ffffffffffffffffffffffffffffffffffffffff166040516020018083805190602001908083835b602083106104455780518252602082019150602081019050602083039250610422565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040529050818151826020016000f592506000855111156104b45760008060008751602089016000885af114156104b357600080fd5b5b7fa38789425dbeee0239e16ff2d2567e31720127fbc6430758c1a4efc6aef29f8083604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150509392505050565b60606040518060200161053290610669565b6020820181038252601f19601f82011660405250905090565b60008260405161055a90610669565b808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f0801580156105ac573d6000803e3d6000fd5b5090506000825111156105d55760008060008451602086016000865af114156105d457600080fd5b5b7fa38789425dbeee0239e16ff2d2567e31720127fbc6430758c1a4efc6aef29f8081604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a192915050565b60606040518060200161065090610676565b6020820181038252601f19601f82011660405250905090565b6101b48061068383390190565b6077806108378339019056fe608060405234801561001057600080fd5b506040516101b43803806101b48339818101604052602081101561003357600080fd5b8101908080519060200190929190505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156100ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806101906024913960400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506077806101196000396000f3fe608060405273ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415603d573d6000fd5b3d6000f3fea265627a7a723058202b014062fac5bbf2f3a320134dac5811a29f916a0f071e16e4493bf4a28fe8a064736f6c634300050a0032496e76616c6964206d617374657220636f707920616464726573732070726f7669646564608060405273ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415603d573d6000fd5b3d6000f3fea265627a7a723058202b014062fac5bbf2f3a320134dac5811a29f916a0f071e16e4493bf4a28fe8a064736f6c634300050a0032a265627a7a72305820fe4fe68e764a2e0ac4a395cc8ddf2803a1b14d8a4ee567d1ca4504bb3761d21f64736f6c634300050a0032",opcodes:"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x8E2 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1688F0B9 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x53E5D935 EQ PUSH2 0x176 JUMPI DUP1 PUSH4 0x61B69ABD EQ PUSH2 0x1F9 JUMPI DUP1 PUSH4 0xADDACC0F EQ PUSH2 0x314 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x397 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17E PUSH2 0x520 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1BE JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1A3 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1EB JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2D2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x24C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x25E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x54B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31C PUSH2 0x63E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x341 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x389 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH2 0x3E4 SWAP1 PUSH2 0x669 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND PUSH1 0x40 MSTORE POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x445 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x422 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP2 DUP2 MLOAD DUP3 PUSH1 0x20 ADD PUSH1 0x0 CREATE2 SWAP3 POP PUSH1 0x0 DUP6 MLOAD GT ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 MLOAD PUSH1 0x20 DUP10 ADD PUSH1 0x0 DUP9 GAS CALL EQ ISZERO PUSH2 0x4B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST JUMPDEST PUSH32 0xA38789425DBEEE0239E16FF2D2567E31720127FBC6430758C1A4EFC6AEF29F80 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH2 0x532 SWAP1 PUSH2 0x669 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND PUSH1 0x40 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH2 0x55A SWAP1 PUSH2 0x669 JUMP JUMPDEST DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x5AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x5D5 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH1 0x0 DUP7 GAS CALL EQ ISZERO PUSH2 0x5D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST JUMPDEST PUSH32 0xA38789425DBEEE0239E16FF2D2567E31720127FBC6430758C1A4EFC6AEF29F80 DUP2 PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH2 0x650 SWAP1 PUSH2 0x676 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND PUSH1 0x40 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1B4 DUP1 PUSH2 0x683 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x77 DUP1 PUSH2 0x837 DUP4 CODECOPY ADD SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1B4 CODESIZE SUB DUP1 PUSH2 0x1B4 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x190 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH1 0x77 DUP1 PUSH2 0x119 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x0 SLOAD AND CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 DUP2 EQ ISZERO PUSH1 0x3D JUMPI RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST RETURNDATASIZE PUSH1 0x0 RETURN INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0x2b ADD BLOCKHASH PUSH3 0xFAC5BB CALLCODE RETURN LOG3 KECCAK256 SGT 0x4d 0xac PC GT LOG2 SWAP16 SWAP2 PUSH11 0xF071E16E4493BF4A28FE8 LOG0 PUSH5 0x736F6C6343 STOP SDIV EXP STOP ORIGIN 0x49 PUSH15 0x76616C6964206D617374657220636F PUSH17 0x7920616464726573732070726F76696465 PUSH5 0x6080604052 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x0 SLOAD AND CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 DUP2 EQ ISZERO PUSH1 0x3D JUMPI RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST RETURNDATASIZE PUSH1 0x0 RETURN INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0x2b ADD BLOCKHASH PUSH3 0xFAC5BB CALLCODE RETURN LOG3 KECCAK256 SGT 0x4d 0xac PC GT LOG2 SWAP16 SWAP2 PUSH11 0xF071E16E4493BF4A28FE8 LOG0 PUSH5 0x736F6C6343 STOP SDIV EXP STOP ORIGIN LOG2 PUSH6 0x627A7A723058 KECCAK256 INVALID 0x4f 0xe6 DUP15 PUSH23 0x4A2E0AC4A395CC8DDF2803A1B14D8A4EE567D1CA4504BB CALLDATACOPY PUSH2 0xD21F PUSH5 0x736F6C6343 STOP SDIV EXP STOP ORIGIN ",sourceMap:"227:2461:24:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;227:2461:24;;;;;;;"},deployedBytecode:{linkReferences:{},object:"608060405234801561001057600080fd5b506004361061004c5760003560e01c80631688f0b91461005157806353e5d9351461017657806361b69abd146101f9578063addacc0f14610314575b600080fd5b6101346004803603606081101561006757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156100a457600080fd5b8201836020820111156100b657600080fd5b803590602001918460018302840111640100000000831117156100d857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610397565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61017e610520565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101be5780820151818401526020810190506101a3565b50505050905090810190601f1680156101eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102d26004803603604081101561020f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561024c57600080fd5b82018360208201111561025e57600080fd5b8035906020019184600183028401116401000000008311171561028057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061054b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61031c61063e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035c578082015181840152602081019050610341565b50505050905090810190601f1680156103895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60008083805190602001208360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012090506060604051806020016103e490610669565b6020820181038252601f19601f820116604052508673ffffffffffffffffffffffffffffffffffffffff166040516020018083805190602001908083835b602083106104455780518252602082019150602081019050602083039250610422565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040529050818151826020016000f592506000855111156104b45760008060008751602089016000885af114156104b357600080fd5b5b7fa38789425dbeee0239e16ff2d2567e31720127fbc6430758c1a4efc6aef29f8083604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150509392505050565b60606040518060200161053290610669565b6020820181038252601f19601f82011660405250905090565b60008260405161055a90610669565b808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f0801580156105ac573d6000803e3d6000fd5b5090506000825111156105d55760008060008451602086016000865af114156105d457600080fd5b5b7fa38789425dbeee0239e16ff2d2567e31720127fbc6430758c1a4efc6aef29f8081604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a192915050565b60606040518060200161065090610676565b6020820181038252601f19601f82011660405250905090565b6101b48061068383390190565b6077806108378339019056fe608060405234801561001057600080fd5b506040516101b43803806101b48339818101604052602081101561003357600080fd5b8101908080519060200190929190505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156100ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806101906024913960400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506077806101196000396000f3fe608060405273ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415603d573d6000fd5b3d6000f3fea265627a7a723058202b014062fac5bbf2f3a320134dac5811a29f916a0f071e16e4493bf4a28fe8a064736f6c634300050a0032496e76616c6964206d617374657220636f707920616464726573732070726f7669646564608060405273ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415603d573d6000fd5b3d6000f3fea265627a7a723058202b014062fac5bbf2f3a320134dac5811a29f916a0f071e16e4493bf4a28fe8a064736f6c634300050a0032a265627a7a72305820fe4fe68e764a2e0ac4a395cc8ddf2803a1b14d8a4ee567d1ca4504bb3761d21f64736f6c634300050a0032",opcodes:"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1688F0B9 EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x53E5D935 EQ PUSH2 0x176 JUMPI DUP1 PUSH4 0x61B69ABD EQ PUSH2 0x1F9 JUMPI DUP1 PUSH4 0xADDACC0F EQ PUSH2 0x314 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x134 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x60 DUP2 LT ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 0x397 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17E PUSH2 0x520 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1BE JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1A3 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1EB JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2D2 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x20F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x24C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x25E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x280 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP2 DUP5 ADD MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 0x54B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x31C PUSH2 0x63E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x35C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x341 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x389 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH2 0x3E4 SWAP1 PUSH2 0x669 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND PUSH1 0x40 MSTORE POP DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x40 MLOAD PUSH1 0x20 ADD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x445 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH1 0x20 DUP4 SUB SWAP3 POP PUSH2 0x422 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP DUP2 DUP2 MLOAD DUP3 PUSH1 0x20 ADD PUSH1 0x0 CREATE2 SWAP3 POP PUSH1 0x0 DUP6 MLOAD GT ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP8 MLOAD PUSH1 0x20 DUP10 ADD PUSH1 0x0 DUP9 GAS CALL EQ ISZERO PUSH2 0x4B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST JUMPDEST PUSH32 0xA38789425DBEEE0239E16FF2D2567E31720127FBC6430758C1A4EFC6AEF29F80 DUP4 PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH2 0x532 SWAP1 PUSH2 0x669 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND PUSH1 0x40 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH2 0x55A SWAP1 PUSH2 0x669 JUMP JUMPDEST DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x5AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x5D5 JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH1 0x0 DUP7 GAS CALL EQ ISZERO PUSH2 0x5D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST JUMPDEST PUSH32 0xA38789425DBEEE0239E16FF2D2567E31720127FBC6430758C1A4EFC6AEF29F80 DUP2 PUSH1 0x40 MLOAD DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH2 0x650 SWAP1 PUSH2 0x676 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD DUP2 SUB DUP3 MSTORE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND PUSH1 0x40 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x1B4 DUP1 PUSH2 0x683 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x77 DUP1 PUSH2 0x837 DUP4 CODECOPY ADD SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1B4 CODESIZE SUB DUP1 PUSH2 0x1B4 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x33 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH2 0xCA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x24 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x190 PUSH1 0x24 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH1 0x77 DUP1 PUSH2 0x119 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x0 SLOAD AND CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 DUP2 EQ ISZERO PUSH1 0x3D JUMPI RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST RETURNDATASIZE PUSH1 0x0 RETURN INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0x2b ADD BLOCKHASH PUSH3 0xFAC5BB CALLCODE RETURN LOG3 KECCAK256 SGT 0x4d 0xac PC GT LOG2 SWAP16 SWAP2 PUSH11 0xF071E16E4493BF4A28FE8 LOG0 PUSH5 0x736F6C6343 STOP SDIV EXP STOP ORIGIN 0x49 PUSH15 0x76616C6964206D617374657220636F PUSH17 0x7920616464726573732070726F76696465 PUSH5 0x6080604052 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x0 SLOAD AND CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY PUSH1 0x0 DUP2 EQ ISZERO PUSH1 0x3D JUMPI RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST RETURNDATASIZE PUSH1 0x0 RETURN INVALID LOG2 PUSH6 0x627A7A723058 KECCAK256 0x2b ADD BLOCKHASH PUSH3 0xFAC5BB CALLCODE RETURN LOG3 KECCAK256 SGT 0x4d 0xac PC GT LOG2 SWAP16 SWAP2 PUSH11 0xF071E16E4493BF4A28FE8 LOG0 PUSH5 0x736F6C6343 STOP SDIV EXP STOP ORIGIN LOG2 PUSH6 0x627A7A723058 KECCAK256 INVALID 0x4f 0xe6 DUP15 PUSH23 0x4A2E0AC4A395CC8DDF2803A1B14D8A4EE567D1CA4504BB CALLDATACOPY PUSH2 0xD21F PUSH5 0x736F6C6343 STOP SDIV EXP STOP ORIGIN ",sourceMap:"227:2461:24:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;227:2461:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1755:931;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1755:931:24;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1755:931:24;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1755:931:24;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;1755:931:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1755:931:24;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1284:106;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1284:106:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;524:373;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;524:373:24;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;524:373:24;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;524:373:24;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;524:373:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;524:373:24;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1033:104;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1033:104:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1755:931;1891:11;2051:12;2110:11;2100:22;;;;;;2124:9;2083:51;;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2083:51:24;;;2066:74;;;;;;2051:89;;2147:27;2201:24;;;;;;;;:::i;:::-;41:4:-1;34:5;30:16;25:3;21:26;14:5;7:41;87:2;83:7;78:2;73:3;69:12;65:26;61:2;54:38;2201:24:24;2241:11;2233:20;;2177:82;;;;;;;;;;;;;;;36:153:-1;66:2;61:3;58:11;36:153;;182:3;176:10;171:3;164:23;98:2;93:3;89:12;82:19;;123:2;118:3;114:12;107:19;;148:2;143:3;139:12;132:19;;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;2177:82:24;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;2177:82:24;;;2147:112;;2415:4;2398:14;2392:21;2375:14;2369:4;2365:25;2360:3;2352:68;2343:77;;2457:1;2436:11;:18;:22;2432:218;;;2624:1;2620;2617;2603:11;2597:18;2590:4;2577:11;2573:22;2570:1;2563:5;2558:3;2553:69;2550:76;2547:2;;;2638:1;2636;2629:11;2547:2;2537:113;2661:20;2675:5;2661:20;;;;;;;;;;;;;;;;;;;;;;1755:931;;;;;;;:::o;1284:106::-;1334:12;1361:24;;;;;;;;:::i;:::-;41:4:-1;34:5;30:16;25:3;21:26;14:5;7:41;87:2;83:7;78:2;73:3;69:12;65:26;61:2;54:38;1361:24:24;1354:31;;1284:106;:::o;524:373::-;608:11;647:10;637:21;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;637:21:24;629:29;;682:1;668:4;:11;:15;664:198;;;835:1;831;828;821:4;815:11;808:4;802;798:15;795:1;788:5;783:3;778:55;775:62;772:2;;;850:1;847;840:12;772:2;762:100;872:20;886:5;872:20;;;;;;;;;;;;;;;;;;;;;;524:373;;;;:::o;1033:104::-;1082:12;1109:23;;;;;;;;:::i;:::-;41:4:-1;34:5;30:16;25:3;21:26;14:5;7:41;87:2;83:7;78:2;73:3;69:12;65:26;61:2;54:38;1109:23:24;1102:30;;1033:104;:::o;227:2461::-;;;;;;;;:::o;:::-;;;;;;;;:::o"}};var bytecode$6="608060405234801561001057600080fd5b506108e2806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631688f0b91461005157806353e5d9351461017657806361b69abd146101f9578063addacc0f14610314575b600080fd5b6101346004803603606081101561006757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156100a457600080fd5b8201836020820111156100b657600080fd5b803590602001918460018302840111640100000000831117156100d857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610397565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61017e610520565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101be5780820151818401526020810190506101a3565b50505050905090810190601f1680156101eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102d26004803603604081101561020f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561024c57600080fd5b82018360208201111561025e57600080fd5b8035906020019184600183028401116401000000008311171561028057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061054b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61031c61063e565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035c578082015181840152602081019050610341565b50505050905090810190601f1680156103895780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60008083805190602001208360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012090506060604051806020016103e490610669565b6020820181038252601f19601f820116604052508673ffffffffffffffffffffffffffffffffffffffff166040516020018083805190602001908083835b602083106104455780518252602082019150602081019050602083039250610422565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040529050818151826020016000f592506000855111156104b45760008060008751602089016000885af114156104b357600080fd5b5b7fa38789425dbeee0239e16ff2d2567e31720127fbc6430758c1a4efc6aef29f8083604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150509392505050565b60606040518060200161053290610669565b6020820181038252601f19601f82011660405250905090565b60008260405161055a90610669565b808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604051809103906000f0801580156105ac573d6000803e3d6000fd5b5090506000825111156105d55760008060008451602086016000865af114156105d457600080fd5b5b7fa38789425dbeee0239e16ff2d2567e31720127fbc6430758c1a4efc6aef29f8081604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a192915050565b60606040518060200161065090610676565b6020820181038252601f19601f82011660405250905090565b6101b48061068383390190565b6077806108378339019056fe608060405234801561001057600080fd5b506040516101b43803806101b48339818101604052602081101561003357600080fd5b8101908080519060200190929190505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156100ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806101906024913960400191505060405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506077806101196000396000f3fe608060405273ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415603d573d6000fd5b3d6000f3fea265627a7a723058202b014062fac5bbf2f3a320134dac5811a29f916a0f071e16e4493bf4a28fe8a064736f6c634300050a0032496e76616c6964206d617374657220636f707920616464726573732070726f7669646564608060405273ffffffffffffffffffffffffffffffffffffffff600054163660008037600080366000845af43d6000803e6000811415603d573d6000fd5b3d6000f3fea265627a7a723058202b014062fac5bbf2f3a320134dac5811a29f916a0f071e16e4493bf4a28fe8a064736f6c634300050a0032a265627a7a72305820fe4fe68e764a2e0ac4a395cc8ddf2803a1b14d8a4ee567d1ca4504bb3761d21f64736f6c634300050a0032";var ProxyFactory = {abi:abi$6,evm:evm$6,"interface":[{constant:false,inputs:[{name:"_mastercopy",type:"address"},{name:"initializer",type:"bytes"},{name:"saltNonce",type:"uint256"}],name:"createProxyWithNonce",outputs:[{name:"proxy",type:"address"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"proxyCreationCode",outputs:[{name:"",type:"bytes"}],payable:false,stateMutability:"pure",type:"function"},{constant:false,inputs:[{name:"masterCopy",type:"address"},{name:"data",type:"bytes"}],name:"createProxy",outputs:[{name:"proxy",type:"address"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"proxyRuntimeCode",outputs:[{name:"",type:"bytes"}],payable:false,stateMutability:"pure",type:"function"},{anonymous:false,inputs:[{indexed:false,name:"proxy",type:"address"}],name:"ProxyCreation",type:"event"}],bytecode:bytecode$6};

    const CREATE_PROXY_AND_SETUP_GAS = 6e6;
    class CreateChannelController extends NodeController {
        constructor() {
            super(...arguments);
            this.executeMethod = super.executeMethod;
        }
        async enqueueByShard(requestHandler) {
            return [requestHandler.getShardedQueue(CreateChannelController.methodName)];
        }
        async executeMethodImplementation(requestHandler, params) {
            const { owners } = params;
            const { wallet, networkContext } = requestHandler;
            const multisigAddress = getCreate2MultisigAddress(owners, networkContext.ProxyFactory, networkContext.MinimumViableMultisig);
            const tx = await this.sendMultisigDeployTx(wallet, owners, networkContext);
            this.handleDeployedMultisigOnChain(multisigAddress, requestHandler, params);
            return { transactionHash: tx.hash };
        }
        async handleDeployedMultisigOnChain(multisigAddress, requestHandler, params) {
            const { owners } = params;
            const { publicIdentifier, instructionExecutor, store, outgoing } = requestHandler;
            const [responderXpub] = owners.filter(x => x !== publicIdentifier);
            const channel = (await instructionExecutor.runSetupProtocol({
                multisigAddress,
                responderXpub,
                initiatorXpub: publicIdentifier
            })).get(multisigAddress);
            await store.saveStateChannel(channel);
            await store.saveFreeBalance(channel);
            const msg = {
                from: publicIdentifier,
                type: NODE_EVENTS.CREATE_CHANNEL,
                data: {
                    multisigAddress,
                    owners,
                    counterpartyXpub: responderXpub
                }
            };
            outgoing.emit(NODE_EVENTS.CREATE_CHANNEL, msg);
        }
        async sendMultisigDeployTx(signer, owners, networkContext) {
            const proxyFactory = new ethers.Contract(networkContext.ProxyFactory, ProxyFactory.abi, signer);
            let error;
            const retryCount = 3;
            for (let tryCount = 0; tryCount < retryCount; tryCount += 1) {
                try {
                    const extraGasLimit = tryCount * 1e6;
                    const tx = await proxyFactory.functions.createProxyWithNonce(networkContext.MinimumViableMultisig, new utils.Interface(MinimumViableMultisig.abi).functions.setup.encode([
                        xkeysToSortedKthAddresses(owners, 0)
                    ]), 0, {
                        gasLimit: CREATE_PROXY_AND_SETUP_GAS + extraGasLimit,
                        gasPrice: await signer.provider.getGasPrice()
                    });
                    if (!tx.hash) {
                        throw new Error(`${NO_TRANSACTION_HASH_FOR_MULTISIG_DEPLOYMENT}: ${tx}`);
                    }
                    return tx;
                }
                catch (e) {
                    error = e;
                    console.error(`Channel creation attempt ${tryCount} failed: ${e}.\n
                      Retrying ${retryCount - tryCount} more times`);
                }
            }
            throw new Error(`${CHANNEL_CREATION_FAILED}: ${error}`);
        }
    }
    CreateChannelController.methodName = Node.MethodName.CREATE_CHANNEL;
    __decorate([
        dist_7("chan_create"),
        __metadata("design:type", Object)
    ], CreateChannelController.prototype, "executeMethod", void 0);

    const DEPOSIT_RETRY_COUNT = 3;
    async function installBalanceRefundApp(requestHandler, params) {
        const { publicIdentifier, instructionExecutor, networkContext, store, provider } = requestHandler;
        const { multisigAddress, tokenAddress } = params;
        const [peerAddress] = await getPeersAddressFromChannel(publicIdentifier, store, multisigAddress);
        const stateChannel = await store.getStateChannel(multisigAddress);
        const stateChannelsMap = new Map([
            [stateChannel.multisigAddress, stateChannel]
        ]);
        const depositContext = await getDepositContext(params, publicIdentifier, provider, networkContext, tokenAddress);
        const installParams = {
            initialState: depositContext.initialState,
            initiatorXpub: publicIdentifier,
            responderXpub: peerAddress,
            multisigAddress: stateChannel.multisigAddress,
            initiatorBalanceDecrement: constants.Zero,
            responderBalanceDecrement: constants.Zero,
            participants: stateChannel.getNextSigningKeys(),
            appInterface: depositContext.appInterface,
            defaultTimeout: 1008,
            outcomeType: OutcomeType.REFUND_OUTCOME_TYPE,
            initiatorDepositTokenAddress: tokenAddress,
            responderDepositTokenAddress: CONVENTION_FOR_ETH_TOKEN_ADDRESS
        };
        const updatedStateChannelsMap = await instructionExecutor.initiateProtocol(Protocol.Install, stateChannelsMap, installParams);
        await store.saveStateChannel(updatedStateChannelsMap.get(multisigAddress));
    }
    async function makeDeposit(requestHandler, params) {
        const { multisigAddress, amount, tokenAddress } = params;
        const { provider, blocksNeededForConfirmation, outgoing } = requestHandler;
        const signer = await requestHandler.getSigner();
        const tx = {
            to: multisigAddress,
            value: utils.bigNumberify(amount),
            gasLimit: 30000,
            gasPrice: await provider.getGasPrice()
        };
        let txResponse;
        let retryCount = DEPOSIT_RETRY_COUNT;
        while (retryCount > 0) {
            try {
                if (tokenAddress === CONVENTION_FOR_ETH_TOKEN_ADDRESS) {
                    txResponse = await signer.sendTransaction(tx);
                }
                else {
                    const erc20Contract = new ethers.Contract(tokenAddress, ERC20.abi, signer);
                    txResponse = await erc20Contract.functions.transfer(multisigAddress, utils.bigNumberify(amount));
                }
                break;
            }
            catch (e) {
                if (e.toString().includes("reject") || e.toString().includes("denied")) {
                    outgoing.emit(NODE_EVENTS.DEPOSIT_FAILED, e);
                    throw new Error(`${DEPOSIT_FAILED}: ${e}`);
                }
                retryCount -= 1;
                if (retryCount === 0) {
                    outgoing.emit(NODE_EVENTS.DEPOSIT_FAILED, `Could not deposit after ${DEPOSIT_RETRY_COUNT} attempts`);
                    throw new Error(`${DEPOSIT_FAILED}: ${e}`);
                }
            }
        }
        outgoing.emit(NODE_EVENTS.DEPOSIT_STARTED, {
            value: amount,
            txHash: txResponse.hash
        });
        await txResponse.wait(blocksNeededForConfirmation);
    }
    async function uninstallBalanceRefundApp(requestHandler, params) {
        const { publicIdentifier, store, instructionExecutor, networkContext } = requestHandler;
        const { multisigAddress } = params;
        const { CoinBalanceRefundApp } = networkContext;
        const [peerAddress] = await getPeersAddressFromChannel(publicIdentifier, store, multisigAddress);
        const stateChannel = await store.getStateChannel(params.multisigAddress);
        const refundApp = stateChannel.getAppInstanceOfKind(CoinBalanceRefundApp);
        const stateChannelsMap = await instructionExecutor.initiateProtocol(Protocol.Uninstall, new Map([
            [stateChannel.multisigAddress, stateChannel]
        ]), {
            initiatorXpub: publicIdentifier,
            responderXpub: peerAddress,
            multisigAddress: stateChannel.multisigAddress,
            appIdentityHash: refundApp.identityHash
        });
        await store.saveStateChannel(stateChannelsMap.get(stateChannel.multisigAddress));
    }
    async function getDepositContext(params, publicIdentifier, provider, networkContext, tokenAddress) {
        const { multisigAddress } = params;
        const threshold = tokenAddress === CONVENTION_FOR_ETH_TOKEN_ADDRESS
            ? await provider.getBalance(multisigAddress)
            : await new ethers.Contract(tokenAddress, ERC20.abi, provider).functions.balanceOf(multisigAddress);
        const initialState = {
            threshold,
            tokenAddress,
            recipient: xkeyKthAddress(publicIdentifier, 0),
            multisig: multisigAddress
        };
        return {
            initialState,
            appInterface: {
                addr: networkContext.CoinBalanceRefundApp,
                stateEncoding: coinBalanceRefundStateEncoding,
                actionEncoding: undefined
            }
        };
    }

    class DepositController extends NodeController {
        constructor() {
            super(...arguments);
            this.executeMethod = super.executeMethod;
        }
        async enqueueByShard(requestHandler, params) {
            return [requestHandler.getShardedQueue(params.multisigAddress)];
        }
        async beforeExecution(requestHandler, params) {
            const { store, provider, networkContext } = requestHandler;
            const { multisigAddress, amount, tokenAddress: tokenAddressParam } = params;
            const tokenAddress = tokenAddressParam || CONVENTION_FOR_ETH_TOKEN_ADDRESS;
            const channel = await store.getStateChannel(multisigAddress);
            if (channel.hasAppInstanceOfKind(networkContext.CoinBalanceRefundApp)) {
                throw new Error(CANNOT_DEPOSIT);
            }
            const address = await requestHandler.getSignerAddress();
            if (tokenAddress !== CONVENTION_FOR_ETH_TOKEN_ADDRESS) {
                const contract = new ethers.Contract(tokenAddress, ERC20.abi, provider);
                let balance;
                try {
                    balance = await contract.functions.balanceOf(address);
                }
                catch (e) {
                    throw new Error(FAILED_TO_GET_ERC20_BALANCE(tokenAddress, address));
                }
                if (balance.lt(amount)) {
                    throw new Error(INSUFFICIENT_ERC20_FUNDS_TO_DEPOSIT(tokenAddress, amount, balance));
                }
            }
            else {
                const balanceOfSigner = await provider.getBalance(address);
                if (balanceOfSigner.lt(amount)) {
                    throw new Error(`${INSUFFICIENT_FUNDS}: ${address}`);
                }
            }
        }
        async executeMethodImplementation(requestHandler, params) {
            const { provider } = requestHandler;
            const { multisigAddress, tokenAddress } = params;
            params.tokenAddress = tokenAddress || CONVENTION_FOR_ETH_TOKEN_ADDRESS;
            await installBalanceRefundApp(requestHandler, params);
            await makeDeposit(requestHandler, params);
            await uninstallBalanceRefundApp(requestHandler, params);
            const { messagingService, publicIdentifier, store } = requestHandler;
            const [counterpartyAddress] = await getPeersAddressFromChannel(publicIdentifier, store, multisigAddress);
            await messagingService.send(counterpartyAddress, {
                from: publicIdentifier,
                type: NODE_EVENTS.DEPOSIT_CONFIRMED,
                data: params
            });
            return {
                multisigBalance: await provider.getBalance(multisigAddress)
            };
        }
    }
    DepositController.methodName = Node.MethodName.DEPOSIT;
    __decorate([
        dist_7(Node.RpcMethodName.DEPOSIT),
        __metadata("design:type", Object)
    ], DepositController.prototype, "executeMethod", void 0);

    class GetStateChannelController extends NodeController {
        async executeMethodImplementation(requestHandler, params) {
            return {
                data: await requestHandler.store.getStateChannel(params.multisigAddress)
            };
        }
    }
    GetStateChannelController.methodName = Node.MethodName.GET_STATE_CHANNEL;

    class GetStateDepositHolderAddressController extends NodeController {
        constructor() {
            super(...arguments);
            this.executeMethod = super.executeMethod;
        }
        async executeMethodImplementation(requestHandler, params) {
            const { owners } = params;
            const { networkContext } = requestHandler;
            const multisigOwners = xkeysToSortedKthAddresses(owners, 0);
            const setupData = new utils.Interface(MinimumViableMultisig.abi).functions.setup.encode([multisigOwners]);
            const address = utils.getAddress(utils.solidityKeccak256(["bytes1", "address", "uint256", "bytes32"], [
                "0xff",
                networkContext.ProxyFactory,
                utils.solidityKeccak256(["bytes32", "uint256"], [utils.keccak256(setupData), 0]),
                utils.keccak256(utils.solidityPack(["bytes", "uint256"], [`0x${Proxy.bytecode}`, networkContext.MinimumViableMultisig]))
            ]).slice(-40));
            return { address };
        }
    }
    GetStateDepositHolderAddressController.methodName = Node.MethodName.GET_STATE_DEPOSIT_HOLDER_ADDRESS;
    __decorate([
        dist_7(Node.RpcMethodName.GET_STATE_DEPOSIT_HOLDER_ADDRESS),
        __metadata("design:type", Object)
    ], GetStateDepositHolderAddressController.prototype, "executeMethod", void 0);

    class GetAllChannelAddressesController extends NodeController {
        async executeMethodImplementation(requestHandler) {
            return {
                multisigAddresses: Object.keys(await requestHandler.store.getAllChannels())
            };
        }
    }
    GetAllChannelAddressesController.methodName = Node.MethodName.GET_CHANNEL_ADDRESSES;

    async function runWithdrawProtocol(requestHandler, params) {
        const { publicIdentifier, instructionExecutor, store } = requestHandler;
        const { multisigAddress, amount } = params;
        const tokenAddress = params.tokenAddress || CONVENTION_FOR_ETH_TOKEN_ADDRESS;
        const [peerAddress] = await getPeersAddressFromChannel(publicIdentifier, store, multisigAddress);
        const stateChannel = await store.getStateChannel(multisigAddress);
        const stateChannelsMap = await instructionExecutor.initiateProtocol(Protocol.Withdraw, new Map([[stateChannel.multisigAddress, stateChannel]]), {
            amount,
            tokenAddress,
            recipient: params.recipient,
            initiatorXpub: publicIdentifier,
            responderXpub: peerAddress,
            multisigAddress: stateChannel.multisigAddress
        });
        await store.saveStateChannel(stateChannelsMap.get(multisigAddress));
    }

    class WithdrawController extends NodeController {
        constructor() {
            super(...arguments);
            this.executeMethod = super.executeMethod;
        }
        async enqueueByShard(requestHandler, params) {
            const { store, publicIdentifier, networkContext } = requestHandler;
            const stateChannel = await store.getStateChannel(params.multisigAddress);
            if (stateChannel.hasAppInstanceOfKind(networkContext.CoinBalanceRefundApp)) {
                throw new Error(CANNOT_WITHDRAW);
            }
            const freeBalance = deserializeFreeBalanceState(stateChannel.freeBalance
                .state);
            const tokenAddress = params.tokenAddress || CONVENTION_FOR_ETH_TOKEN_ADDRESS;
            if (!(tokenAddress in freeBalance.balancesIndexedByToken)) {
                throw new Error(INVALID_WITHDRAW(tokenAddress));
            }
            const tokenFreeBalance = convertCoinTransfersToCoinTransfersMap(freeBalance.balancesIndexedByToken[tokenAddress]);
            const senderBalance = tokenFreeBalance[stateChannel.getFreeBalanceAddrOf(publicIdentifier)];
            if (senderBalance.lt(params.amount)) {
                throw new Error(INSUFFICIENT_FUNDS_TO_WITHDRAW(tokenAddress, params.amount, senderBalance));
            }
            return [requestHandler.getShardedQueue(params.multisigAddress)];
        }
        async executeMethodImplementation(requestHandler, params) {
            const { store, provider, wallet, publicIdentifier, blocksNeededForConfirmation, outgoing } = requestHandler;
            const { multisigAddress, amount, recipient } = params;
            params.recipient = recipient || xkeyKthAddress(publicIdentifier, 0);
            await runWithdrawProtocol(requestHandler, params);
            const commitment = await store.getWithdrawalCommitment(multisigAddress);
            if (!commitment) {
                throw new Error("no commitment found");
            }
            const tx = Object.assign({}, commitment, { gasPrice: await provider.getGasPrice(), gasLimit: 300000 });
            let txResponse;
            try {
                if (provider instanceof providers.JsonRpcProvider) {
                    const signer = await provider.getSigner();
                    txResponse = await signer.sendTransaction(tx);
                }
                else {
                    txResponse = await wallet.sendTransaction(tx);
                }
                outgoing.emit(NODE_EVENTS.WITHDRAWAL_STARTED, {
                    value: amount,
                    txHash: txResponse.hash
                });
                await provider.waitForTransaction(txResponse.hash, blocksNeededForConfirmation);
            }
            catch (e) {
                outgoing.emit(NODE_EVENTS.WITHDRAWAL_FAILED, e);
                throw new Error(`${WITHDRAWAL_FAILED}: ${e}`);
            }
            return {
                recipient: params.recipient,
                txHash: txResponse.hash
            };
        }
    }
    WithdrawController.methodName = Node.MethodName.WITHDRAW;
    __decorate([
        dist_7("chan_withdraw"),
        __metadata("design:type", Object)
    ], WithdrawController.prototype, "executeMethod", void 0);

    class RpcRouter extends dist_2 {
        constructor({ controllers, requestHandler }) {
            super({ controllers });
            this.requestHandler = requestHandler;
        }
        async dispatch(rpc) {
            const controller = Object.values(dist_1.rpcMethods).find(mapping => mapping.method === rpc.methodName);
            if (!controller) {
                throw new Error(`Cannot execute ${rpc.methodName}: no controller`);
            }
            try {
                const result = dist_9({
                    result: await new controller.type()[controller.callback](this.requestHandler, rpc.parameters),
                    type: rpc.methodName
                }, rpc.id);
                this.requestHandler.outgoing.emit(rpc.methodName, result);
                return result;
            }
            catch (e) {
                throw new Error(e);
            }
        }
        async subscribe(event, callback) {
            this.requestHandler.outgoing.on(event, callback);
        }
        async subscribeOnce(event, callback) {
            this.requestHandler.outgoing.once(event, callback);
        }
        async unsubscribe(event, callback) {
            this.requestHandler.outgoing.off(event, callback);
        }
        async emit(event, data, emitter = "incoming") {
            let eventData = data;
            if (!eventData["jsonrpc"]) {
                eventData = dist_9(eventData, Date.now());
            }
            this.requestHandler[emitter].emit(event, eventData.result);
        }
        eventListenerCount(event) {
            return this.requestHandler.outgoing.listenerCount(event);
        }
    }

    const controllers = [
        CreateChannelController,
        DepositController,
        InstallController,
        InstallVirtualController,
        ProposeInstallController,
        ProposeInstallVirtualController,
        RejectInstallController,
        TakeActionController,
        UninstallController,
        UninstallVirtualController,
        UpdateStateController,
        WithdrawController,
        GetStateChannelController,
        GetAppInstanceDetailsController,
        GetStateController,
        GetFreeBalanceController,
        GetAppInstancesController,
        GetProposedAppInstanceController,
        GetProposedAppInstancesController,
        GetStateDepositHolderAddressController,
        GetAllChannelAddressesController
    ];
    const methodNameToImplementation = controllers.reduce((acc, controller) => {
        if (!controller.methodName) {
            throw new Error(`Fatal: Every controller must have a "methodName" property`);
        }
        if (acc[controller.methodName]) {
            throw new Error(`Fatal: Multiple controllers connected to ${controller.methodName}`);
        }
        const handler = new controller();
        acc[controller.methodName] = handler.executeMethod.bind(handler);
        return acc;
    }, {});
    const createRpcRouter = (requestHandler) => new RpcRouter({ controllers, requestHandler });
    const eventNameToImplementation = {
        [NODE_EVENTS.INSTALL]: handleReceivedInstallMessage,
        [NODE_EVENTS.INSTALL_VIRTUAL]: handleReceivedInstallVirtualMessage,
        [NODE_EVENTS.PROPOSE_INSTALL]: handleReceivedProposalMessage,
        [NODE_EVENTS.PROPOSE_INSTALL_VIRTUAL]: handleReceivedProposeVirtualMessage,
        [NODE_EVENTS.PROTOCOL_MESSAGE_EVENT]: handleReceivedProtocolMessage,
        [NODE_EVENTS.REJECT_INSTALL]: handleRejectProposalMessage,
        [NODE_EVENTS.REJECT_INSTALL_VIRTUAL]: handleRejectProposalMessage
    };

    class AutoNonceWallet extends ethers.Wallet {
        async sendTransaction(tx) {
            if (!tx.nonce) {
                if (this.noncePromise === undefined) {
                    this.noncePromise = this.provider.getTransactionCount(this.address);
                }
                const tmp = this.noncePromise;
                this.noncePromise = this.noncePromise.then(nonce => nonce + 1);
                tx.nonce = await tmp;
            }
            return await super.sendTransaction(tx);
        }
    }

    class Deferred {
        constructor() {
            this.resolve = (value) => {
                this.internalResolve(value);
            };
            this.reject = (reason) => {
                this.internalReject(reason);
            };
            this.internalPromise = new Promise((resolve, reject) => {
                this.internalResolve = resolve;
                this.internalReject = reject;
            });
        }
        get promise() {
            return this.internalPromise;
        }
    }

    var RopstenContracts = [{contractName:"Migrations",address:"0xA10b9d1077678E3101988457033bC3A39722085b",transactionHash:"0x0332f7d59738290d69c26650ea151278a50699a50d74a3ffc02e27466e7e6f19"},{contractName:"CoinBalanceRefundApp",address:"0x62222411971c5a919a0F48bC4ea4eb615B6C1aFd",transactionHash:"0xff2b147b8d9d83583ff9b6694da3fb31f7eee8910339b10ece218e1c3df4c911"},{contractName:"CoinTransferInterpreter",address:"0x78D4A2c50b2EE6a99cE65b670Ec0BC6aa1BdD6B6",transactionHash:"0x0ccfc304d35cb5e3d770f88c4e3de4270599667426851c5b254bd96e383065bd"},{contractName:"ConditionalTransactionDelegateTarget",address:"0x99f56452E12644FB08c7151901697e02724aee42",transactionHash:"0x7dfdb12becd4175e3f3d002c3c9ff45e23530c18cfe10c41b8a09676b29d823a"},{contractName:"FreeBalanceApp",address:"0xCccd27Ef44787cBd7431BeA980503f15F92c4792",transactionHash:"0x840fb904797b7b2bb8f9efc56db66e7ec633925cba5bdddb79f1e61a67d422c6"},{contractName:"IdentityApp",address:"0x56f954c65330F46D2A736892F8c4484052A7eC61",transactionHash:"0x31beb87b0be9fb294cfce3404e46c4db26d96a80a0727e159def1e12de518323"},{contractName:"MinimumViableMultisig",address:"0xCCF3038Eb5d8c094420dAeA9BF9ee590aCd07A83",transactionHash:"0x313538f3350e91c4fb8c577523f6b7a4f86c02b95b58d39e783065bb0f86b7e7"},{contractName:"ProxyFactory",address:"0x00574729Bf25bC613ecE1D55472A8dc1f3dC0fB6",transactionHash:"0xe5f3331676b36c0bf327e28a1ee0a6525be617f48b37481360c453e1fad318c6"},{contractName:"TimeLockedPassThrough",address:"0xDBF1cBDE68Ce2D784Ea9c91801bb425543Cc219f",transactionHash:"0x5cccb5a68828ec2d394a7c9a4a71d1d99d680d501cedc2d06df73f3c4be0a32d"},{contractName:"Migrations",address:"0xE668a1E6C205A799F964A138cA6Be63e05b47eaf",transactionHash:"0x06dbffe47396aa05bc1591babdf8a46342359d659e74c150084e978fa2a2e1e1"},{contractName:"ChallengeRegistry",address:"0x167f53654A45216ac62320646E66Be6B7887E101",transactionHash:"0xf72613601b80eea7efd6544fbf1cad692406b844cb1b25fc51289fb84c3a3414"},{contractName:"TwoPartyFixedOutcomeInterpreter",address:"0x43A9A00Ba48fFe0Fc09840FB4B1F047d71f8A546",transactionHash:"0x9908549bb3947b64b5932ad0ad488d5e3ff55bd72e769403a7b6f402317214d4"},{contractName:"TwoPartyFixedOutcomeFromVirtualAppInterpreter",address:"0xDab441a20b7C2449Fa5D8E1dd6a60662657A8a85",transactionHash:"0xed4411af2708ab89bfea1eede8c56559cc0f4a86ab4041fa3e25a6d1e3c0613c"}];

    var RinkebyContracts = [{contractName:"CoinBalanceRefundApp",address:"0xA2502578c9b05e6A0B6801239BC0f98c8a6ea2E7",transactionHash:"0x47c82666deadf8897269734b330f07458770fc93ab5a86eea753f1740f9c0c47"},{contractName:"CoinTransferInterpreter",address:"0xee20aF5ff3C6040d17500cf3342022A21a9eC76d",transactionHash:"0xd58fa8f3b6e49247b4bd9dcc84d8f3a3851323beebef3cc14c3d65d1de790e34"},{contractName:"ConditionalTransactionDelegateTarget",address:"0x1cE72C1ec60aC26D04E1Ec1E7408e03e51720A00",transactionHash:"0x4452c4d0ebf356c1536a60641649d127661fd88c7ff7dc932daf8aff00364a8b"},{contractName:"FreeBalanceApp",address:"0xbB0A8b83fc09457f3AcB6e48454Cf349206ba5e7",transactionHash:"0xfd046db3bc02f6ad4d0d7980ceafd39ab39b812522c92dae897aca0db8524ec5"},{contractName:"IdentityApp",address:"0x49edCB58359218DA8C27E49d9D9ea41F9D2bC3B3",transactionHash:"0x01aba80d6a365a6e7619a64b93aa9f900796ee3db9cf2f7d1aaf273600f06f09"},{contractName:"MinimumViableMultisig",address:"0xb730A8BFbc202c9777004299b1aa13Dd0308dE7D",transactionHash:"0xb7915bf74576bb260a2370eb1a86ff4193005a23b6180fb343cc3a68f0a69ff9"},{contractName:"ProxyFactory",address:"0x8A49B435cc3D2176B67e0D26170387EeDf135669",transactionHash:"0xe0ba7ce52bda8e9333154c222b07dbd8b099c23181010352c606016cfe44f48c"},{contractName:"TimeLockedPassThrough",address:"0x7197797c0fA25B3Dc0c28C92a6154b347DC493B6",transactionHash:"0x7fe06ed378dfe656d0329bca8f160492064d024038802cb40a49822baa781a60"},{contractName:"Migrations",address:"0xE668a1E6C205A799F964A138cA6Be63e05b47eaf",transactionHash:"0x06dbffe47396aa05bc1591babdf8a46342359d659e74c150084e978fa2a2e1e1"},{contractName:"ChallengeRegistry",address:"0x167f53654A45216ac62320646E66Be6B7887E101",transactionHash:"0xf72613601b80eea7efd6544fbf1cad692406b844cb1b25fc51289fb84c3a3414"},{contractName:"TwoPartyFixedOutcomeInterpreter",address:"0x5AC29B1D3607fcE8216cC95F9E009A61c0048e6D",transactionHash:"0xb1890209b3b60a357fc11620829325288acfcd8a2b43cc67d1558737a8f9dd13"},{contractName:"TwoPartyFixedOutcomeFromVirtualAppInterpreter",address:"0xbe3b02162DEd206C6f2B565e19ffd5258a8AebfF",transactionHash:"0xbee64dc9b1f4f9f60a84f6dfd49c37c332168f3edc29efe6fe34813e95b2cdb9"}];

    var KovanContracts = [{contractName:"CoinBalanceRefundApp",address:"0x403A258A91644B905EDDd1CD931ffcD49aC5f80D",transactionHash:"0x246be58aa85d8a9ac25610bdc5eb7166cb78707f0362d9187e8d6d7c33e80db5"},{contractName:"CoinTransferInterpreter",address:"0x01428E1ed4BFDa2B9820CD0689eC407Bc2aB1cDF",transactionHash:"0xfac913187a7707f76cc5ed7481015facd3d830c484dc5fc9c03ab3d4f260e85c"},{contractName:"ConditionalTransactionDelegateTarget",address:"0x68414D9ceD10a422343590425823320E24485B02",transactionHash:"0x5da8471f7502cce36b7a91dc6705f5a63f0444e86b103a9f4cef45ffb318c051"},{contractName:"FreeBalanceApp",address:"0x79a5eC35534717dFEC167062328C613fC9840F55",transactionHash:"0xdabf87c50e37c2e22481451582cc462e57a723340f065b060ec0a9cff2966a8a"},{contractName:"IdentityApp",address:"0x17Ca1Fe423Ec32B2A95733ef3aa6a963D616697d",transactionHash:"0x65d150e1866b643616e9fe62eb7bbad49dd5b605e537c1f3550979400f42d25e"},{contractName:"MinimumViableMultisig",address:"0x4ce2bDfF009900fae668EB74e46b237e619B951a",transactionHash:"0xd6c5ea1c0047d8f14b2fe83620c121e64cfee91808f1601352caa04e2734ca95"},{contractName:"ProxyFactory",address:"0x3780e2Af8DAf979A6F66d76551AfA7CB8311D396",transactionHash:"0xfa4850a867eaa9681884327870a11aaddbc81ad0ee1605223b4ce85ff5615011"},{contractName:"TimeLockedPassThrough",address:"0x06143c7eb8bC68CD743BEBc39fb5b5B18195C21E",transactionHash:"0xde7a76e301768399494a9f7dd319270b4e51e56ec73f88e22214a70a56ead409"},{contractName:"Migrations",address:"0x9a2AdA593637c7f404C3DA69Ee26e4B1E8CfC0Fd",transactionHash:"0x5b9168daa3a09730373d468cfc61dfef71b9f78130d49e2496d9b79cf1345ab9"},{contractName:"ChallengeRegistry",address:"0x100Db874AC77dc8ddad7421b6464e188A2F533D6",transactionHash:"0xbc1bb1ebe71d8ceaf6024da3b4b68e972af37b8570e7e508022dfb6a8f2ab0e3"},{contractName:"TwoPartyFixedOutcomeInterpreter",address:"0x0C8D6B0EF29f242ced6c52001aF3B15d488A2A63",transactionHash:"0x5a285892581ef45f662ac5058ed6ba4924eff50ac418822397879111bee5981e"},{contractName:"TwoPartyFixedOutcomeFromVirtualAppInterpreter",address:"0x85F91D69760DAAe7140f3bd3e30532A20DF98c91",transactionHash:"0xebdccee775fa74d7508eaf235760fef61edb70ea3cecf9db0160311eaae513bf"}];

    const SUPPORTED_NETWORKS = new Set(["ropsten", "rinkeby", "kovan"]);
    function getNetworkContextForNetworkName(networkName) {
        log.info(`Configuring Node to use contracts on networkName: ${networkName}`);
        switch (networkName.toLocaleLowerCase()) {
            case "ropsten":
                return getNetworkContextFromNetworksFile(RopstenContracts);
            case "rinkeby":
                return getNetworkContextFromNetworksFile(RinkebyContracts);
            case "kovan":
                return getNetworkContextFromNetworksFile(KovanContracts);
            default:
                throw new Error(`${INVALID_NETWORK_NAME}: ${networkName}. \n
         The following networks are supported:
         ${Array.from(SUPPORTED_NETWORKS.values())}`);
        }
    }
    function getNetworkContextFromNetworksFile(listOfDeployedContractsFromNetworkFile) {
        return EXPECTED_CONTRACT_NAMES_IN_NETWORK_CONTEXT.reduce((acc, contractName) => (Object.assign({}, acc, { [contractName]: getContractAddressFromNetworksFile(listOfDeployedContractsFromNetworkFile, contractName) })), {});
    }
    function getContractAddressFromNetworksFile(listOfDeployedContractsFromNetworkFile, contractName) {
        const matched = listOfDeployedContractsFromNetworkFile.filter(networkFileEntry => networkFileEntry.contractName === contractName);
        if (!matched.length) {
            throw new Error(`Could not find any deployed contract address for ${contractName}`);
        }
        return matched[0].address;
    }

    const MNEMONIC_PATH = "MNEMONIC";
    async function getHDNode(storeService) {
        let mnemonic = await storeService.get(MNEMONIC_PATH);
        if (!mnemonic) {
            mnemonic = ethers.Wallet.createRandom().mnemonic;
            await storeService.set([{ key: MNEMONIC_PATH, value: mnemonic }]);
        }
        return hdnode.fromMnemonic(mnemonic).derivePath("m/44'/60'/0'/25446");
    }

    const REASONABLE_NUM_BLOCKS_TO_WAIT = 1;
    class Node$1 {
        constructor(messagingService, storeService, nodeConfig, provider, networkContext, blocksNeededForConfirmation = REASONABLE_NUM_BLOCKS_TO_WAIT) {
            this.messagingService = messagingService;
            this.storeService = storeService;
            this.nodeConfig = nodeConfig;
            this.provider = provider;
            this.blocksNeededForConfirmation = blocksNeededForConfirmation;
            this.ioSendDeferrals = new Map();
            this.incoming = new EventEmitter();
            this.outgoing = new EventEmitter();
            if (typeof networkContext === "string") {
                this.networkContext = getNetworkContextForNetworkName(networkContext);
            }
            else {
                this.networkContext = networkContext;
            }
            this.instructionExecutor = this.buildInstructionExecutor();
            debugLog(`Waiting for ${this.blocksNeededForConfirmation} block confirmations`);
        }
        static async create(messagingService, storeService, nodeConfig, provider, networkOrNetworkContext, blocksNeededForConfirmation) {
            const node = new Node$1(messagingService, storeService, nodeConfig, provider, networkOrNetworkContext, blocksNeededForConfirmation);
            return await node.asynchronouslySetupUsingRemoteServices();
        }
        async asynchronouslySetupUsingRemoteServices() {
            this.signer = await getHDNode(this.storeService);
            debugLog(`Node signer address: ${this.signer.address}`);
            debugLog(`Node public identifier: ${this.publicIdentifier}`);
            this.requestHandler = new RequestHandler(this.publicIdentifier, this.incoming, this.outgoing, this.storeService, this.messagingService, this.instructionExecutor, this.networkContext, this.provider, new AutoNonceWallet(this.signer.privateKey, this.provider), `${this.nodeConfig.STORE_KEY_PREFIX}/${this.publicIdentifier}`, this.blocksNeededForConfirmation);
            this.registerMessagingConnection();
            this.rpcRouter = createRpcRouter(this.requestHandler);
            this.requestHandler.injectRouter(this.rpcRouter);
            return this;
        }
        get publicIdentifier() {
            return this.signer.neuter().extendedKey;
        }
        async signerAddress() {
            return await this.requestHandler.getSignerAddress();
        }
        get freeBalanceAddress() {
            return getFreeBalanceAddress(this.publicIdentifier);
        }
        buildInstructionExecutor() {
            const instructionExecutor = new InstructionExecutor(this.networkContext, this.provider);
            instructionExecutor.register(Opcode.OP_SIGN, async (args) => {
                if (args.length !== 1 && args.length !== 2) {
                    throw new Error("OP_SIGN middleware received wrong number of arguments.");
                }
                const [commitment, overrideKeyIndex] = args;
                const keyIndex = overrideKeyIndex || 0;
                const signingKey = new utils.SigningKey(this.signer.derivePath(`${keyIndex}`).privateKey);
                return signingKey.signDigest(commitment.hashToSign());
            });
            instructionExecutor.register(Opcode.IO_SEND, async (args) => {
                const [data] = args;
                const fromXpub = this.publicIdentifier;
                const to = data.toXpub;
                await this.messagingService.send(to, {
                    data,
                    from: fromXpub,
                    type: NODE_EVENTS.PROTOCOL_MESSAGE_EVENT
                });
            });
            instructionExecutor.register(Opcode.IO_SEND_AND_WAIT, async (args) => {
                const [data] = args;
                const fromXpub = this.publicIdentifier;
                const to = data.toXpub;
                const deferral = new Deferred();
                this.ioSendDeferrals.set(data.protocolExecutionID, deferral);
                const counterpartyResponse = deferral.promise;
                await this.messagingService.send(to, {
                    data,
                    from: fromXpub,
                    type: NODE_EVENTS.PROTOCOL_MESSAGE_EVENT
                });
                const msg = await Promise.race([counterpartyResponse, timeout(60000)]);
                if (!msg || !("data" in msg)) {
                    throw new Error(`IO_SEND_AND_WAIT timed out after 30s waiting for counterparty reply in ${data.protocol}`);
                }
                this.ioSendDeferrals.delete(data.protocolExecutionID);
                return msg.data;
            });
            instructionExecutor.register(Opcode.WRITE_COMMITMENT, async (args) => {
                const { store } = this.requestHandler;
                const [protocol, commitment, ...key] = args;
                if (protocol === Protocol.Withdraw) {
                    const [multisigAddress] = key;
                    await store.storeWithdrawalCommitment(multisigAddress, commitment);
                }
                else {
                    await store.setCommitment([protocol, ...key], commitment);
                }
            });
            return instructionExecutor;
        }
        on(event, callback) {
            this.rpcRouter.subscribe(event, async (res) => callback(res));
        }
        off(event, callback) {
            this.rpcRouter.unsubscribe(event, callback ? async (res) => callback(res) : undefined);
        }
        once(event, callback) {
            this.rpcRouter.subscribeOnce(event, async (res) => callback(res));
        }
        emit(event, req) {
            this.rpcRouter.emit(event, req);
        }
        async call(method, req) {
            return this.requestHandler.callMethod(method, req);
        }
        registerMessagingConnection() {
            this.messagingService.onReceive(this.publicIdentifier, async (msg) => {
                await this.handleReceivedMessage(msg);
                this.rpcRouter.emit(msg.type, msg, "outgoing");
            });
        }
        async handleReceivedMessage(msg) {
            if (!Object.values(NODE_EVENTS).includes(msg.type)) {
                console.error(`Received message with unknown event type: ${msg.type}`);
            }
            const isProtocolMessage = (msg) => msg.type === NODE_EVENTS.PROTOCOL_MESSAGE_EVENT;
            const isExpectingResponse = (msg) => this.ioSendDeferrals.has(msg.data.protocolExecutionID);
            if (isProtocolMessage(msg) &&
                isExpectingResponse(msg)) {
                debugLog(`this.handleIoSendDeferral ${msg.type}`);
                await this.handleIoSendDeferral(msg);
            }
            else if (this.requestHandler.isLegacyEvent(msg.type)) {
                debugLog(`this.requestHandler.callEvent ${msg.type}`);
                await this.requestHandler.callEvent(msg.type, msg);
            }
            else {
                debugLog(`this.rpcRouter.emit ${msg.type}`);
                await this.rpcRouter.emit(msg.type, msg);
            }
        }
        async handleIoSendDeferral(msg) {
            const key = msg.data.protocolExecutionID;
            if (!this.ioSendDeferrals.has(key)) {
                throw new Error("Node received message intended for machine but no handler was present");
            }
            const promise = this.ioSendDeferrals.get(key);
            try {
                promise.resolve(msg);
            }
            catch (error) {
                console.error(`Error while executing callback registered by IO_SEND_AND_WAIT middleware hook`, { error, msg });
            }
        }
    }
    __decorate([
        memoizeDecorator_1(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], Node$1.prototype, "publicIdentifier", null);
    __decorate([
        memoizeDecorator_1(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], Node$1.prototype, "signerAddress", null);
    __decorate([
        memoizeDecorator_1(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [])
    ], Node$1.prototype, "freeBalanceAddress", null);

    exports.APP_ALREADY_UNINSTALLED = APP_ALREADY_UNINSTALLED;
    exports.CANNOT_DEPOSIT = CANNOT_DEPOSIT;
    exports.CANNOT_UNINSTALL_FREE_BALANCE = CANNOT_UNINSTALL_FREE_BALANCE;
    exports.CANNOT_WITHDRAW = CANNOT_WITHDRAW;
    exports.CHANNEL_CREATION_FAILED = CHANNEL_CREATION_FAILED;
    exports.Controller = dist_1;
    exports.DEPOSIT_FAILED = DEPOSIT_FAILED;
    exports.ETH_BALANCE_REFUND_NOT_UNINSTALLED = ETH_BALANCE_REFUND_NOT_UNINSTALLED;
    exports.FAILED_TO_GET_ERC20_BALANCE = FAILED_TO_GET_ERC20_BALANCE;
    exports.IMPROPERLY_FORMATTED_STRUCT = IMPROPERLY_FORMATTED_STRUCT;
    exports.INSUFFICIENT_ERC20_FUNDS_TO_DEPOSIT = INSUFFICIENT_ERC20_FUNDS_TO_DEPOSIT;
    exports.INSUFFICIENT_FUNDS = INSUFFICIENT_FUNDS;
    exports.INSUFFICIENT_FUNDS_IN_FREE_BALANCE_FOR_ASSET = INSUFFICIENT_FUNDS_IN_FREE_BALANCE_FOR_ASSET;
    exports.INSUFFICIENT_FUNDS_TO_WITHDRAW = INSUFFICIENT_FUNDS_TO_WITHDRAW;
    exports.INVALID_ACTION = INVALID_ACTION;
    exports.INVALID_NETWORK_NAME = INVALID_NETWORK_NAME;
    exports.INVALID_WITHDRAW = INVALID_WITHDRAW;
    exports.MNEMONIC_PATH = MNEMONIC_PATH;
    exports.NODE_EVENTS = NODE_EVENTS;
    exports.NO_ACTION_ENCODING_FOR_APP_INSTANCE = NO_ACTION_ENCODING_FOR_APP_INSTANCE;
    exports.NO_APP_CONTRACT_ADDR = NO_APP_CONTRACT_ADDR;
    exports.NO_APP_INSTANCE_FOR_GIVEN_ID = NO_APP_INSTANCE_FOR_GIVEN_ID;
    exports.NO_APP_INSTANCE_FOR_TAKE_ACTION = NO_APP_INSTANCE_FOR_TAKE_ACTION;
    exports.NO_APP_INSTANCE_ID_FOR_GET_STATE = NO_APP_INSTANCE_ID_FOR_GET_STATE;
    exports.NO_APP_INSTANCE_ID_TO_GET_DETAILS = NO_APP_INSTANCE_ID_TO_GET_DETAILS;
    exports.NO_APP_INSTANCE_ID_TO_INSTALL = NO_APP_INSTANCE_ID_TO_INSTALL;
    exports.NO_APP_INSTANCE_ID_TO_UNINSTALL = NO_APP_INSTANCE_ID_TO_UNINSTALL;
    exports.NO_CHANNEL_BETWEEN_NODES = NO_CHANNEL_BETWEEN_NODES;
    exports.NO_FREE_BALANCE_EXISTS = NO_FREE_BALANCE_EXISTS;
    exports.NO_MULTISIG_FOR_APP_INSTANCE_ID = NO_MULTISIG_FOR_APP_INSTANCE_ID;
    exports.NO_PROPOSED_APP_INSTANCE_FOR_APP_INSTANCE_ID = NO_PROPOSED_APP_INSTANCE_FOR_APP_INSTANCE_ID;
    exports.NO_STATE_CHANNEL_FOR_MULTISIG_ADDR = NO_STATE_CHANNEL_FOR_MULTISIG_ADDR;
    exports.NO_TRANSACTION_HASH_FOR_MULTISIG_DEPLOYMENT = NO_TRANSACTION_HASH_FOR_MULTISIG_DEPLOYMENT;
    exports.NULL_INITIAL_STATE_FOR_PROPOSAL = NULL_INITIAL_STATE_FOR_PROPOSAL;
    exports.Node = Node$1;
    exports.Router = dist_2;
    exports.STATE_OBJECT_NOT_ENCODABLE = STATE_OBJECT_NOT_ENCODABLE;
    exports.TWO_PARTY_OUTCOME_DIFFERENT_ASSETS = TWO_PARTY_OUTCOME_DIFFERENT_ASSETS;
    exports.VIRTUAL_APP_INSTALLATION_FAIL = VIRTUAL_APP_INSTALLATION_FAIL;
    exports.WITHDRAWAL_FAILED = WITHDRAWAL_FAILED;
    exports.__moduleExports = dist;
    exports.getHDNode = getHDNode;
    exports.jsonApiDeserialize = dist_5;
    exports.jsonApiOperation = dist_4;
    exports.jsonApiType = dist_3;
    exports.jsonRpcDeserialize = dist_6;
    exports.jsonRpcMethod = dist_7;
    exports.jsonRpcSerializeAsNotification = dist_8;
    exports.jsonRpcSerializeAsResponse = dist_9;

}(this.window = this.window || {}, ethers.utils, EventEmitter, ethers, ethers.constants, ethers.utils.HDNode, log, uuid, cfjs, ethers.errors, ethers.providers));
//# sourceMappingURL=index.iife.js.map
